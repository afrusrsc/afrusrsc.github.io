<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Lazarus on 慢步道人</title>
    <link>https://afrusrsc.github.io/tags/lazarus/</link>
    <description>Recent content in Lazarus on 慢步道人</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh</language>
    <copyright>2017-2025 Jesse Jin</copyright>
    <lastBuildDate>Mon, 05 May 2025 19:06:17 +0800</lastBuildDate>
    <atom:link href="https://afrusrsc.github.io/tags/lazarus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lazarus插件式窗口设计尝试</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_plugin_form/</link>
      <pubDate>Mon, 05 May 2025 19:06:17 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_plugin_form/</guid>
      <description>前言 先前就尝试过使用Lazarus写一个插件式的桌面应用框架，主程序只负责整体的插件管理以及为插件提供页签式的展示容器，具体的功能实现都由插件（动态库）来完成。
但是之前比较零散的几次尝试，多或少有些问题，比较有代表性的如：
无法以模式窗口显示插件内的子窗口
插件内的窗口在任务栏上显示的是和主程序分离的两个程序
动态库无法卸载
使用接口无法释放动态库里的对象
无法跨平台（主要针对windows）
近来又进行了一次系统性的尝试，以前的一些也针对性的研究了下，并找到了目前来看比较合适的解决方案，并将阶段性成果开源了，具体地址见文末。
旧问题解决 模式窗口 这个问题其实早在Lazarus官方的wiki（Form in Dll）上就有解决方案了。
在此基础上也尝试进行一些魔改，过程就不多说了，经验总结如下：
DisableFormsCallBack和EnableFormsCallback两个回调必须为普通过程，改为类方法会导致模式窗口失效
TApplicationCallback可以和插件动态库内的管理类合并，做为插件入口的统一管理，甚至做为插件统一接口的实现
视觉上为同一程序 Form in Dll中已经涉及，即在CreateParams中将Params.WndParent赋值为主程序中对应容器的句柄。
卸载/释放 对于动态库的卸载，在Lazarus的dll卸载问题中已有提到，本次直接避免。
对于对象的释放，这前的尝试犯了一个很严重的错误，即未遵守谁创建谁释放这一原则。接口中增加专门的释放函数，用于释放通过接口创建的对象。但，对于接口创建的对象，主程序除了释放外，也不应该（事实上也不能）进行其它操作，否则会抛内存访问异常。
共享内存管理器 如果仅使用基本数据类型的话，这就是个伪命题，但若使用高阶数据类型的话还是会方便很多，毕竟字符串其实并不算是真正的基本类型。
文章在Lazarus中使用ShareMem解决了在Windows平台上共享内存管理器的问题。在QQ群的交流中，群友啊D提出使用GetMemoryManager和SetMemoryManager，目前来看是能解决该问题的。
跨平台一致性 Lazarus本身就是跨平台的，只注意避免使用平台专用的api即可，或者对不同平台的api进行封装。
对于插件式的动态库，exports导出的函数统一使用Name关键字强制命名。同时，对于32位CPU，导出函数统一使用cdecl而不是stdcall进行传参约束；对于64位CPU，导出函数统一使用默认的传参约束，即不使用任何关键字，由编译器管理。
新的问题 基于有限的测试，Linux的gtk2中显示模式窗口时主窗体还能进行最大化、最小化、移动等操作，但不能操作窗体内的元素，这与Windows上的行为表现不太一致
插件动态库创建的窗体，嵌入主程序容器后，并不能像嵌入自身容器内那样可以方便的自适应大小和位置
TODO 解决新发现的问题
主程序页签式容器的实现
主程序插件的管理
开源地址 Github地址：https://github.com/afrusrsc/x-framework
Gitee地址：https://gitee.com/afrusrsc/x-framework</description>
    </item>
    <item>
      <title>Lazarus在Linux上使用自定义动态库</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_linux/</link>
      <pubDate>Thu, 20 Feb 2025 21:51:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_linux/</guid>
      <description>前置知识 Windows上叫动态链接库，通常以*.dll形式命名；Linux上叫共享库，通常以lib*.so形式命名。（此处统一叫动态库）
Windows上dll路径的一般搜索顺序为：当前目录-&amp;gt;系统目录（如：C:\Windows\System32、C:\Windows\SysWOW64）-&amp;gt;Windows目录（如C:\Windows）-&amp;gt;PATH环境变量指定的目录。
Linux上so路径的一般搜索顺序为：编译时使用-rpath指定的路径-&amp;gt;LD_LIBRARY_PATH环境变量指定的路径-&amp;gt;系统默认库路径（如/lib、/usr/lib等）-&amp;gt;/etc/ld.so.conf和/etc/ld.so.conf.d/目录中配置的路径。
Lazarus/Delphi调用动态库有两种形式：静态调用和动态调用。
静态调用：主程序启动时加载，若动态库不存在或不匹配，则主程序抛异常并中止；主程序退出时卸载。
动态调用：主程序在需要时可随时加载，不需要时可随时卸载；动态库发生异常时，一般不会导致主程序中止。
使用动态库 动态库 动态库本身不需要特殊设置，正常编译、构建即可。（以名为dll的动态库为例，实际文件名为libdll.so）
主程序 编译时 静态调用方式 主程序直接编译会报错：Warning: linker:/usr/bin/ld: cannot find -ldll: No such file or directory，意思是链接器找不到名为dll的动态库文件。
解决方案 打开Project Options-&amp;gt;Compiler Options-&amp;gt;Compilation and Linking，勾选Pass options to linker with &amp;quot;-k&amp;quot;, delimiter is space，并在下方填入-L’动态库所在路径’，保存即可正常编译。
动态调用方式 主程序直接编译即可。
运行时 静态调用方式 此时编译后的程序并不能正常运行，会报错error while loading shared libraries: libdll.so: cannot open shared object file: No such file or directory，意思是加载动态库时找不到名为libdll.so的动态库文件。
这是前面提到的路径搜索顺序导致的，可将动态库放入相应的搜索路径下，也可使用-rpath指定路径。对于自定的动态库，建议使用-rpath指定路径，最好指定的路径为当前路径（与Windows保持一致）。
解决方案 打开Project Options-&amp;gt;Compiler Options-&amp;gt;Compilation and Linking，勾选Pass options to linker with &amp;quot;-k&amp;quot;, delimiter is space，并在下方填入-rpath=&#39;$ORIGIN&#39;（与之前的-L’动态库所在路径’之间要添加一个空格），保存并重新编译，即可正常运行。</description>
    </item>
    <item>
      <title>Lazarus为应用添加版本信息</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_add_appver/</link>
      <pubDate>Tue, 12 Nov 2024 20:08:32 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_add_appver/</guid>
      <description>需求背景 在开发过程中，我们经常需要给应用添加版本信息，以便于追踪和管理应用的版本。
对于windows平台，直接在Project-&amp;gt;Project Options...对话框中的Project Options-&amp;gt;Version Info内进行设置即可。
但是，对于非windows平台，该方案便不可行。
而且，该方案还存在一个明显的问题：版本信息需要手动维护，未能与版本控制系统进行有效关联，很可能出现应用与源码不一致的情况。
解决思路 不使用Version Info功能，但取其把版本信息编译到可执行文件中的思想。
借鉴vscode的关于方案，版本信息中包含版本号和提交ID即可使应用和源码进行关联。
只要解决了在构建时动态获取版本信息的问题，便可以解决该问题。
解决方案 经多种尝试，最终确定的方案如下：
在源码中添加ver.inc文件，用于存储版本信息，在关于界面等进行展示。
编写脚本，获取版本信息并写入ver.inc文件。
打开Project-&amp;gt;Project Options...对话框，在Compiler Options-&amp;gt;Compiler Commands-&amp;gt;Execute before中添加脚本的路径。
正常构建应用即可。
如要跨平台，可分别编写对应平台的脚本并创建对应的Build mode，在Build modes中选择对应的模式，然后配置对应的脚本，正常构建即可。
附脚本 以使用git为例：
windows 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @echo off ::获取版本号 git describe --tags &amp;gt;nul 2&amp;gt;nul if errorlevel 1 ( set VER_NO=0.0 ) else ( for /f &amp;#34;delims=&amp;#34; %%a in (&amp;#39;git describe --tags&amp;#39;) do set VER_NO=%%a ) ::获取提交id git rev-parse HEAD &amp;gt;nul 2&amp;gt;nul if errorlevel 1 ( set COMMIT_ID=0000000000000000000000000000000000000000 ) else ( for /f &amp;#34;delims=&amp;#34; %%b in (&amp;#39;git rev-parse HEAD&amp;#39;) do set COMMIT_ID=%%b ) ::写入文件 echo const &amp;gt; ver.</description>
    </item>
    <item>
      <title>Lazarus获取纳秒级时间</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_nanosecond/</link>
      <pubDate>Sat, 31 Aug 2024 21:25:25 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_nanosecond/</guid>
      <description>背景 最近在改写一个加密算法，算法不可避免用到了随机数，但是Lazarus默认的随机种子初始化函数Randomize是依赖于GetTickCount的，而GetTickCount的时间精度是毫秒级的（windows平台实际大约是16ms级），日常是够用的，但在加密算法中就显得太过粗糙了。
关于GetTickCount的时间精度，详见Delphi中的延时和在Lazarus中分析Windows和Linux的延时。
在以上文章中有提到，windows平台下可以使用QueryPerformanceFrequency和QueryPerformanceCounter获取高精度的时间，事实上是微秒级的时间（本机实测是0.1微秒级，即百纳秒）。
考虑跨平台的话，如何获取非windows平台的高精度时间就变得很有必要了。
解决方案 搜索资料及查看Lazarus源码，找到了fpgettimeofday和clock_gettime两个函数。
fpgettimeofday fpgettimeofday实际上就是UNIX平台的gettimeofday，只引用unix单元即可。其定义如下：
1 function fpgettimeofday(tp: ptimeval;tzp:ptimezone):cint; external name &amp;#39;FPC_SYSC_GETTIMEOFDAY&amp;#39;; 其参数ptimeval的定义如下：
1 2 3 4 5 6 7 8 9 10 timeval = record tv_sec:time_t; {$ifdef CPUSPARC64} tv_usec:cint; {$else CPUSPARC64} tv_usec:clong; {$endif CPUSPARC64} end; ptimeval = ^timeval; TTimeVal = timeval; 另外，unix平台的GetTickCount64用到了fpgettimeofday：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function GetTickCount64: QWord; var tp: TTimeVal; {$IFDEF HAVECLOCKGETTIME} ts: TTimeSpec; {$ENDIF} begin {$IFDEF HAVECLOCKGETTIME} if clock_gettime(CLOCK_MONOTONIC, @ts)=0 then begin Result := (Int64(ts.</description>
    </item>
    <item>
      <title>Lazarus跨平台方案总结</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_cross_platform/</link>
      <pubDate>Wed, 07 Aug 2024 21:57:25 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_cross_platform/</guid>
      <description>前言 对于Lazarus跨平台开发接触有一段时间了，虽然踩了不坑，但仍觉得已踩过的坑不过是九牛一毛。不过还是应该记录一下，以备忘，以后又踩新坑了再补充吧。
环境 项目 Linux Windows 操作系统 Debian 12 Win10 CPU架构 x86_64 x86_64 桌面环境 xfce 4 / 输入法 fcitx 5 系统自带 GUI环境 gtk2/qt5/qt6 win32/gtk2/qt5 目标程序 64位 32位/64位 Qt6Pas1.dll未能得到，win + qt6未测试
linux 64位系统未能设置好32位运行环境，未测试
qt5未能得到64位的dll，未测试
坑 windows Application.MessageBox按钮文字英文，无法直接本地化，Windows.MessageBoxAPI可以
TPageControl组件自带的关闭按钮在win32下不可用，gtk2和qt5正常
qt5下，某些组件会有很诡异的现象
gtk2下，64位目标程序运行时报错
gtk2下，默认界面很丑，需要用皮肤
带GUI的dll机制和行为与delphi不一致
使用ShareMem单元需要自行构建fpcmemdll.dll
linux gtk2版IDE无法输入中文；目标程序可正常输入（SynEdit不可以，必须修改相关源码）
qt5和qt6版IDE可输入中文，但部分字无法输入，也无法正常输入多于两个字的词组；目标程序存在相同的问题
qt5版IDE及目标程序所需要的libqt5pas一定要和编译用的IDE版本匹配
总结 基于有限的测试经验，得出了以下结论：
虽然Lazarus是跨平台的，并且号称一次编写，到处编译，但GUI的跨平台表现是不完全一致的，需要分别处理
整体上，gtk2兼容性和稳定性优于qt
最佳的开发方案：在windows系统上开发，然后交叉编译或在目标环境下进行编译（若使用了SynEdit，必须修改相关源码）
保持跨平台一致性的方案：windows平台采用32位的gtk2+皮肤，linux平台采用gtk2+皮肤</description>
    </item>
    <item>
      <title>在Debian上使用Lazarus的Qt5问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_qt5/</link>
      <pubDate>Sun, 04 Aug 2024 16:37:12 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_qt5/</guid>
      <description>事件 环境 项目 值 操作系统 Debian 12 桌面环境 xfce 4 输入法 fcitx 5 背景 最早在Debian上安装Lazarus是直接sudo apt install lazarus，即使用的是官方仓库的版本，也是戏称为万年不更新版。默认安装的是Gtk2版，该版存在中文输入法问题（输入法问题可参照解决Debian上Lazarus输入法问题）；也可以把IDE改为Qt5版，同样可以使用中文输入法。
想用最新版Lazarus 3.4，直接在官网下载最新的deb包，没有安装成功。
后来使用的是fpcupdeluxe-x86_64-linux安装，即Gtk2版，但是由于官方并没有合并中文输入法的解决方案，每次升级都要再做一遍，麻烦。
现在，准备使用fpcupdeluxe-x86_64-linux-qt5直接安装Qt5版。
问题 直接使用fpcupdeluxe-x86_64-linux-qt5安装，报错：
1 ./fpcupdeluxe-x86_64-linux-qt5: error while loading shared libraries: libQt5Pas.so.1: cannot open shared object file: No such file or directory 是因为缺少libQt5Pas.so.1，安装libqt5pas-dev包：
1 sudo apt install libqt5pas-dev 再次安装，又报错：
1 ./fpcupdeluxe-x86_64-linux-qt5: symbol lookup error: ./fpcupdeluxe-x86_64-linux-qt5: undefined symbol: QGuiApplication_setFallbackSessionManagementEnabled 先安装Gtk2版，再修改为Qt5版，编译还报错。编写普通的应用，编译为Qt5版，同样报错。
安装官方仓库的Lazarus 2.2，一切正常。
解决 去github上查看fpcupdeluxe相关的issues，说是要下载1.2.15版的libqt5pas，并安装：
1 sudo apt install ./libqt5pas1_2.15-1_amd64.deb ./libqt5pas-dev_2.15-1_amd64.deb 进一步查看，其实是因为Qt5删除/更新了部分接口导致不兼容了，而Debian 12的官方仓库中并未包含该更新，所以需要手动下载安装，Debian 13的官方仓库中已经包含了，像以前一样直接安装即可。</description>
    </item>
    <item>
      <title>在Lazarus中分析Windows和Linux的延时</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_delay/</link>
      <pubDate>Wed, 24 Jul 2024 23:23:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_delay/</guid>
      <description>前言 之前用Delphi时，研究过延时及其时间精度，并写了篇文章——Delphi中的延时，当时是仅在windows平台下测试的，现在想用Lazarus分别在windows和linux平台测试对比下。
测试 测试环境 CPU：x86_64
win：win10
linux：debian 12.6 + xfce
ide：Lazarus 3.4 + fpc 3.2.2
测试设计 整体与之前的设计保持一致，增加了GetTickCount64的测试，Timer的测试有改动，具体如下：
假定系统时间是足够精确的，因此使用Now分别在延时前后获取系统当前时间来进行耗时评估。
为使测试更具代表性，每个测试点连续测试100次，取算术平均值。
在1ms~100ms内，测试点步长为1ms，在100ms~1000ms内，测试点步长为10ms。
为尽可能减小干扰，测试过程中未使用并行，Sleep、GetTickCount和GetTickCount64未使用Application.ProcessMessages;，Timer绕不开事件触发，使用了Application.ProcessMessages;。
测试结果 windows 延时(ms) Sleep GetTickCount GetTickCount64 Timer 1 1.93 15.51 15.63 15.62 2 2.93 16.59 15.62 15.63 3 3.95 15.58 15.62 15.66 4 5.10 15.49 15.94 15.61 5 5.86 15.55 15.62 15.65 6 6.83 15.50 15.62 15.63 7 7.81 15.62 15.63 15.67 8 8.77 15.55 15.63 15.68 9 9.76 15.</description>
    </item>
    <item>
      <title>在Lazarus中使用ShareMem</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_sharemem/</link>
      <pubDate>Tue, 23 Jul 2024 20:40:36 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_sharemem/</guid>
      <description>问题 使用Delphi开发应用时，如果要在主程序和dll间传递字符串、对象等不兼容C的类型时，通常需要在主程序和dll工程的uses区第一个位置引用ShareMem单元，并将borlndmm.dll随应用一起发布使用。
Lazarus中也有ShareMem单元，说明也可以采用相同的策略解决同样的需求，但是并不是使用borlndmm.dll。
在源码sharemem.pp中可以看到const fpcmemdll = &#39;fpcmemdll.dll&#39;;，说明使用的是fpcmemdll.dll，但是这个dll实际上是并不存在的！
解决 全盘搜索并没有找到fpcmemdll.dll，但是却找到了fpcmemdll.pp。
打开fpcmemdll.pp后发现，其实这并不是一个普通的用于uses的单元，而是一个library工程单元，那么问题就好办了。
创建一个空白library工程，并命名为fpcmemdll
复制fpcmemdll.pp内容到fpcmemdll.lpr
构建fpcmemdll.lpr得到fpcmemdll.dll
其它 linux平台似乎并没有ShareMem单元，也不存在以上用法，应该是只有windows平台才要这样用。</description>
    </item>
    <item>
      <title>使用fpcupdeluxe安装配置Lazarus</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_fpcupdeluxe_install/</link>
      <pubDate>Sun, 21 Jul 2024 14:20:33 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_fpcupdeluxe_install/</guid>
      <description>前言 之前的配置Lazarus免重装和Lazarus开发环境配置主要是针对windows平台的，同样也适用于linux平台，只是需要稍微变通一些。当然，由于linux平台本身的多样性，自然也会有一些特殊的坑，例如：解决Debian上Lazarus输入法问题。
在交流中，群友们也多次提到并推荐用fpcupdeluxe，体验了下，直观的感受就是——非常适合折腾！当然，不用来折腾的话也是非常方便的。
准备工作 访问GitHub 该问题请自行解决。
安装Git fpcupdeluxe是直接从源码构建Lazarus的，而Lazarus及fpc的源码是托管在GitLab上的，其本身依赖的工具又是在GitHub上，因此Git是必不可少的。安装可参考Git的基本使用。
下载fpcupdeluxe 可以在fpcupdeluxe的Releases页选择合适的版本下载fpcupdeluxe。linux平台注意要给予执行权限。
安装 核心IDE安装 建议专门建一个目录用于安装，例如就叫fpcupdeluxe，然后把下载的fpcupdeluxe文件放入，并运行。首次运行会有是否记录日志的提示，依据自己情况选择。 配置界面语言及安装路径，建议与fpcupdeluxe安装文件相同。
点Stable/稳定版本（也可选择其它版本），确认后即可自动下载依赖，然后完成基本IDE的安装。如果安装失败了，排除问题后，再次操作3.即可。
对于linux，可能会提示缺少依赖，如：
1 2 3 4 5 6 7 8 9 10 [Info] Checking dev-libs for gtk2 LCLWidgetType. [Error] Missing library: [Error] libX11.so [Error] libgdk_pixbuf-2.0.so [Error] libpango-1.0.so [Error] libcairo.so [Error] libgdk-x11-2.0.so [Warning] You need to install at least libx11-dev libgtk2.0-dev libcairo2-dev libpango1.0-dev libxtst-dev libgdk-pixbuf2.0-dev libatk1.0-dev libghc-x11-dev to build Lazarus !! [Warning] Make, binutils and git are also required !</description>
    </item>
    <item>
      <title>解决Debian上Lazarus输入法问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_ime/</link>
      <pubDate>Wed, 03 Apr 2024 20:41:30 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_ime/</guid>
      <description>从其它平台迁移而来
环境 项目 值 操作系统 Debian 12 桌面环境 xfce 4 输入法 fcitx 5 问题 在Lazarus的代码编辑器中，快速录入时会出现连击现象
在Lazarus的代码编辑器中无法输入中文
解决 问题1 安装fcitx5-frontend-gtk2即可，详见fcitx5 issues #1006
问题2 参照秋·风大佬中文输入法的解决方案。如果使用的是搜狗输入法的话，参照秋·风大佬搜狗输入法输入词组的解决方案。
补充1 使用fpcupdeluxe安装Lazarus，源码修改后使用git diff生成补丁文件，后期升级Lazarus后若输入法不能用可直接应用补丁，避免重复修改。
生成补丁文件 1 2 cd lazarus git diff &amp;gt; ~/linux_gtk2_ime.diff 应用补丁 如下图进行设置后，更新FPC+Lazarus即可。
以下是Lazarus 3.4的补丁文件内容。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 diff --git a/components/synedit/lazsyngtk2imm.</description>
    </item>
    <item>
      <title>让应用以单例运行</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_single_instance/</link>
      <pubDate>Fri, 26 Jan 2024 22:24:01 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_single_instance/</guid>
      <description>从其它平台迁移而来
有时候我们会期望所编写的应用只运行一个实例，比如监听网络端口或串口，用Lazarus有两种不同的实现方案。
SingleInstanceEnabled属性 SingleInstanceEnabled是TCustomApplication的属性，在初始化之前设置为True即可轻松实现单实例应用：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 program project1; {$mode objfpc}{$H+} uses AdvancedSingleInstance, //注意：必须引用该单元！！！ Interfaces, Forms, ...; {$R *.res} begin Application.SingleInstanceEnabled := True; //注意：必须在调用 Initialize 前赋值！！！ Application.Initialize; ... Application.Run; end. 特别注意 必须引用AdvancedSingleInstance单元，且该单元必须在Interfaces单元和Forms单元前
必须在调用Application.Initialize前赋值
该方法仅针对同一个可执行文件生效，并非系统全局生效
互斥对象 利用操作系统的互斥对象可实现系统级的单例。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var AppMutex: THandle; begin Application.</description>
    </item>
    <item>
      <title>给json数组中的元素排序</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_json_order/</link>
      <pubDate>Tue, 28 Nov 2023 21:38:45 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_json_order/</guid>
      <description>从其它平台迁移而来
起因 基本信息 平台：windows
IDE：Lazarus 2.2.6
json包：FPC自带的fpjson
背景 最近在搞一个小工具，数据文件采用的是json格式，其中一个节点存放的是一组文件的基本信息的清单，这个节点自然就是个json数组，元素就是每个文件基本信息的json对象。界面展示用的是经典的DBGrid + DataSource + DataSet方案，所以会把json数组转为DataSet。
操作过程中会比对磁盘上的文件，该添的添，该删的的删，该改的改，该标记的标记。一番操作下来，顺序自然是乱的，虽然可以操作DataSet或者换用带排序功能的DBGridEh达到排序的目的，但直接看json数据的话，依然是乱序的。因此，期望直接对json数组进行排序。
解决过程 习惯先看源码，如果没有原生解决方案了，或者原生解决方案太别扭了，才会选择第三方解决方案或自己造轮子。
一看源码 1 2 3 4 TJSONArray = class(TJSONData) public ... Procedure Sort(Compare: TListSortCompare); TJSONArray已经提供了排序方法，不过这个参数是什么东西？
1 TListSortCompare = function (Item1, Item2: Pointer): Integer; 嗯，是个函数声明，也就是说具体的算法实现要自己写，可以先找找看有默认的实现没。结果是：没有！那就自己写吧。
看声明，这个函数是要比较两个指针指向的东西，并返回一个整数。嗯，看上去很简单，不过：
到底是怎么实现排序的？
参数是指针，指向的又是什么东西？
返回一个什么样的整数才能实现排序呢？
没懂！！！
还是接着看源码吧：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 procedure TJSONArray.</description>
    </item>
    <item>
      <title>给类型、记录、类添加助手</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_helper/</link>
      <pubDate>Fri, 25 Aug 2023 20:38:35 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_helper/</guid>
      <description>从其它平台迁移而来
通常情况下，类型和记录是没有方法的，只有类有方法，但是可以通过给类型和记录添加助手来达到类似于类的方法的功能，当然，也可以给类添加助手。
语法 1 2 3 HelperName = class|record|type helper[(OptionalBaseHelper)] for TypeName [properties, procedures, functions, constructors, consts, vars] end [hint modifiers]; 类助手 FPC 2.6+版本可用，ObjFPC模式下无需特别设置。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //定义 TObjectHelper = class helper for TObject function SomeFunc: string; end; //实现 function TObjectHelper.SomeFunc: string; begin Result := &amp;#39;类名:&amp;#39; + Self.ClassName; end; //使用 var o: TObject; begin Writeln(o.SomeFunc); end. 一般情况下，给类添加方法可直接在类中添加，但这样添加的方法会直接在所有后代类中显示，如果只是想在特定的范围内添加方法，就可以使用类助手。</description>
    </item>
    <item>
      <title>使用Lazarus压缩/解压zip</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip02/</link>
      <pubDate>Sat, 29 Jul 2023 21:31:15 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip02/</guid>
      <description>从其它平台迁移而来
Lazarus默认已经提供了zip文件的压缩和解压功能，在Zipper单元中，不过，使用过程中还是有一些细节需要注意。
压缩 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 uses Zipper; { 使用类方法进行压缩 } //压缩单个文件 TZipper.Zip(&amp;#39;压缩后的文件.zip&amp;#39;, &amp;#39;待压缩的文件.txt&amp;#39;); //压缩多个文件 TZipper.Zip(&amp;#39;压缩后的文件.zip&amp;#39;, [&amp;#39;待压缩的文件1.txt&amp;#39;, &amp;#39;待压缩的文件2.pdf&amp;#39;]); { 使用实例对象进行压缩 } var zip: TZipper; zip := TZipper.Create; try //压缩单个文件 zip.ZipFile(&amp;#39;压缩后的文件.zip&amp;#39;, &amp;#39;待压缩的文件.txt&amp;#39;); //压缩多个文件 zip.ZipFiles(&amp;#39;压缩后的文件.zip&amp;#39;, [&amp;#39;待压缩的文件1.txt&amp;#39;, &amp;#39;待压缩的文件2.pdf&amp;#39;]); finally zip.Free; end; 以上为比较方便的使用方法，但是还存在一些问题：
以上仅限于文件名为英文的情况，若文件名为中文则会出现乱码（主要是在windows平台上，用专门的压缩/解压工具打开查看列表和解压时）。查看解决方案。
若待压缩的文件包括路径，则压缩后的文件内也会包含传参时传入的路径。查看解决方案。
另外，也可以配合FileName（压缩后的文件名）和Entries（待压缩的文件）属性使用ZipAllFiles方法；或者配合Entries（待压缩的文件）属性使用SaveToFile方法。不过，多次调用前一定要调用Clear方法，否则就会受前一次压缩操作的影响。
解压 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 uses Zipper; { 使用类方法进行解压 } //解压出全部文件 TUnZipper.</description>
    </item>
    <item>
      <title>在Lazarus中使用代码模板</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_code_templates/</link>
      <pubDate>Sat, 27 May 2023 21:12:44 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_code_templates/</guid>
      <description>从其它平台迁移而来
在Delphi中，可以使用CnPack中代码助手的功能，实现快速编写基础代码，专注于写具体业务、逻辑代码。在Lazarus中，也可以使用代码模板功能，实现相同的需求。
使用方法 将光标移到需要录入代码的位置
按Ctrl+J快捷键，弹出代码模板列表
选择要使用的模板，Enter回车
若模板需要填写参数，可在代码模板插入后，按Tab键在各参数间切换并修改，最后按Esc键或将光标移到其它位置
在模板生成的代码的基础上继续编写代码
注意：
可以先输入部分/完整代码模板的Token，然后再按快捷键；也可以按过快捷键后，继续输入Token剩余部分进一步过滤；当然，也可以组合使用。
先输入Token再按快捷键时，若可唯一确定模板，则会直接应用而不弹出模板列表。
自定义模板 Lazarus默认了一批模板，可以在菜单Tools-&amp;gt;Code Templates ...中进行查看。
若感觉默认模板不合适，可自行修改；若默认模板无法满足使用，也可自行添加。
简要说明 Module：当前使用的代码模板，默认是主配置目录下的lazarus.dci，可点右侧按钮选用其它模板。
Templates：所选代码模板的具体清单，格式为：Token - &amp;quot;说明&amp;quot;。右侧三个按钮用于对模板清单进行维护。
其余部分：所选模板项的详细信息。
最下方的编辑区：代码模板的具体内容，$开头的表示使用的宏代码，|表示模板插入后光标的位置。
Keep indentation：保持代码模板内容的缩进，勾选后代码模板首行在光标处插入，除首行外的缩进量保持原样插入（类似行模式插入）；否则模板首行外的内容与首行保持相对缩进（类似列模式插入）。
Enable Macros：启用宏代码，点Insert Macro可插入预定义的宏。
Auto complate on：自动完成，类似于事件触发，即满足条件后无需按Ctrl+J快捷键直接应用模板。
line break：按回车键时触发
space：按空格键时触发
tab：按Tab键时触发
word end：输入结束字符时触发，可暂时理解为输入;时触发
do not complate selection：暂时还不清楚具体效果
do not add character：可与前四种结合使用，勾选后不会把用来触发的字符插入到代码中，否则会插入用来触发的字符</description>
    </item>
    <item>
      <title>ctypes里的bug？</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_ctype/</link>
      <pubDate>Mon, 24 Apr 2023 21:20:06 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_ctype/</guid>
      <description>从其它平台迁移而来
起因 以前使用Delphi调用海康SDK时，专门改写过HCNetSDK.h，当时大部分桌面应用还都是32位的，毕竟64位还没彻底普及开（即便现在，还是有一部分桌面考虑兼容性依然是32位）。后来也搞过64位版的，编译没问题，运行就不成功。虽然没成功，但心里还是清楚这基本上是数据类型的问题，由于对64位了解不多，也就一直搁置着。
转Lazarus之后，又搞过一次64位版，还是没成功。后来知道有ctypes这个单元，也知道这是专门针对c语言数据类型的，但一直没去看过。近来又想起这个事，就想一探究竟。
探 直接看源码，其实就是给pascal的数据类型取了个c的别名。要想了解透彻，自已撸码跑一下还是很有必要的：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 program test; uses SysUtils, ctypes; begin writeln(Format(&amp;#39;%-16s%s&amp;#39;, [&amp;#39;type&amp;#39;, &amp;#39;size&amp;#39;])); writeln(&amp;#39;--------------------&amp;#39;); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint8&amp;#39;, SizeOf(cint8)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint8&amp;#39;, SizeOf(cuint8)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cchar&amp;#39;, SizeOf(cchar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cschar&amp;#39;, SizeOf(cschar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuchar&amp;#39;, SizeOf(cuchar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint16&amp;#39;, SizeOf(cint16)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint16&amp;#39;, SizeOf(cuint16)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cshort&amp;#39;, SizeOf(cshort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csshort&amp;#39;, SizeOf(csshort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cushort&amp;#39;, SizeOf(cushort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint32&amp;#39;, SizeOf(cint32)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint32&amp;#39;, SizeOf(cuint32)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint64&amp;#39;, SizeOf(cint64)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint64&amp;#39;, SizeOf(cuint64)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clonglong&amp;#39;, SizeOf(clonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cslonglong&amp;#39;, SizeOf(cslonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;culonglong&amp;#39;, SizeOf(culonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cbool&amp;#39;, SizeOf(cbool)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint&amp;#39;, SizeOf(cint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csint&amp;#39;, SizeOf(csint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint&amp;#39;, SizeOf(cuint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clong&amp;#39;, SizeOf(clong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cslong&amp;#39;, SizeOf(cslong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;culong&amp;#39;, SizeOf(culong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csigned&amp;#39;, SizeOf(csigned)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cunsigned&amp;#39;, SizeOf(cunsigned)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csize_t&amp;#39;, SizeOf(csize_t)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cfloat&amp;#39;, SizeOf(cfloat)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cdouble&amp;#39;, SizeOf(cdouble)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clongdouble&amp;#39;, SizeOf(clongdouble)])); Readln(); end.</description>
    </item>
    <item>
      <title>Lazarus发布v2.2.6版本</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_v2_2_6/</link>
      <pubDate>Thu, 06 Apr 2023 20:43:52 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_v2_2_6/</guid>
      <description>从其它平台迁移而来
2023-03-09，Lazarus 团队宣布发布 Lazarus 2.2.6 版本，这是一个错误修复版本，使用 FPC 3.2.2 构建。
大概在Lazarus 2.2.6发布的第二天吧，就把自己电脑上的Lazarus升级到最新了，一直以来都是这个习惯，基本上从来没怎么关心过具体都更新了哪些内容。
不过，这次心血来潮，把发行日志给大致看了下，看了之后还是有点小收获的，在此记录一二。
版本号 Lazarus是IDE，最终完成编译的是FPC，两者的版本号管理策略和Linux内核的策略类似。以下为笔者总结，实际的版本号管理策略未考证。
版本号格式如下：
1 [主版本号].[次版本号].[修订版本号] 其中，次版本号和修订版本号，奇数为开发版，偶数为稳定版。
发行日志 Lazarus 2.2.x发行日志原文。可以看到，这是2.2.0的发行日志，并非2.2.6的发行日志，说明这是按次版本号统一整理的。
由于内容较多，而且部分内容笔者也没接触/使用过，所以，只拣熟悉的或感觉比较重要的拿出来分享一下。
LazUtils包 移除PasWStr单元 原因：只有当编译器版本低于3.0才包含代码。
补救：不要再使用PasWStr
LCL包 TValueListEditor 旧行为：允许在键列中使用当前的NameValueSeparator（默认情况下：=）。
新行为：不能在键列中使用名称值分隔符。如果在键列中键入名称值分隔符，焦点将移动到值列。如果将其粘贴到列中，它将被删除（没有任何反馈或警告）。
Screen添加了三组新方法 BeginTempCursor / EndTempCursor、BeginWaitCursor / EndWaitCursor和BeginScreenCursor / EndScreenCursor用于临时光标更改，而不是直接设置Screen.Cursor属性。
TGroupBox，TRadioGroup，TCheckGroup Win32旧行为：可以设置属性颜色，它直接显示。
Win32新行为：如果要更改颜色，则必须设置ParentBackground := False;
TFrame Win32旧行为：无法更改TFrame的颜色。
Win32新行为：如果要更改颜色，则必须设置ParentBackground := False;
T(Float)SpinEdit 新增了EditorEnabled属性，以禁用编辑中的直接用户输入。如果设置为False，则用户只能使用微调器或箭头键更改值。
Debugger LazDebugger-FP (FpDebug) v1.0成为Windows和Linux默认的调试器。
GDB(mo)使用修改版的GDB 9.2
笔者补充：FpDebug无法调试dll，需要使用GDB
组件 OpenGL全面支持Qt5的widgetset。
TSpinEditEx 新属性ThousandSeparator允许显示插入了千位分隔符的值。
TFloatSpinEditEx 支持以科学计数法形式的文本进行录入。
新属性DisplayMode，用于控制是否使用科学记数法。
新属性property控制以科学记数法显示值时使用的精度。
还有其它许多更改，详细请看原文。</description>
    </item>
    <item>
      <title>Lazarus开发环境配置</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_ide_config/</link>
      <pubDate>Sat, 25 Feb 2023 23:52:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_ide_config/</guid>
      <description>从其它平台迁移而来
前言 做为一个桌面应用开发者，工作中一直使用的是Delphi（是语言，也是IDE，基于pascal语言），无论是经典的D7，还是现下最新的XE，都有着还算丰富的使用经验吧，虽然这两者都各有优缺点。做为团队开发成员之一，具体使用什么，几乎是没什么选择权的，毕竟公司有自己的技术栈，当然还有相应的技术债。
但是，做为一个个人开发者，还是比较喜欢严谨的pascal语言的（其实Go的一些语法就是借鉴pascal的，比如：类型在变量右侧），而且还有着那么多年的开发经验，理论上来说，写个小工具啊什么的，还是应该选择熟悉的Delphi才是，但是Delphi并不符合个人的选择条件：
不要太重量级
有当前比较流行的特性
有相对活跃的社区
D7以现在的眼光来看，绝对算是足够轻量级的，整个环境（不含三方组件）安装完还不到1G，但是是毕竟是二十年前的东西了，不说新特性，一些陈年bug就够喝一壶了。
相对来说，XE却是一直在更新着，新特性是有了，但是仅安装包就7~9G，只安装桌面开发必须的自带组件，安装完也有15G+，而且正版授权巨贵，社区版限制又巨多。
至于有相对活跃的社区这条，国外应该还行，但对英文渣渣来说还是有点难了；而国内，Delphi都是快绝迹的语言了，当我什么都没说吧。
所以，选来选去，也就只剩开源的Lazarus和CodeTyphon（基于Lazarus）了。原本是看中了CodeTyphon的，但是死活在Bug10上安装不成功，也就只能选Lazarus了，不过Lazarus倒也是越用越顺心了。
虽说Lazarus标榜的一次编写，到处编译，不过，实际用到的几乎都是windows平台，至于其它平台，有机会再说吧。
开发环境 以下以Lazarus 2.2.4为例。
安装IDE Lazarus有32位版本和64位版本，而且都互相有对方架构的插件包，个人尝试后还是觉得分别安装两个版本比较合适（不要质疑，真的可以同时安装多个版本，不同架构、不同版本号都可以）。
由于Bug10不愧是Bug10，所以个人还是喜欢整成免安装版本，万一哪天Bug10作妖，就不怕重新折腾了。
在非系统盘下手动创建目录，比如D:\lazarus和D:\lazarus\config，前者是IDE的安装目录，后者是IDE的配置目录
下载并运行安装包
在选择目标位置这一步时，选择之前手动创建的安装目录，同时勾选创建一个新的第二的安装（不要质疑，哪怕是第一次安装），下一步
到选择配置文件夹这一步，选择之前手动创建的配置目录，然后一路下一步
安装完之后，把安装目录备份一下，再把IDE卸载了，然后把安装目录恢复了（当然，这一步也可以不做）
运行lazarus.exe，首次运行时（包括未来重装系统后）会弹出Welcom to Lazarus IDE的窗口，其中Fppkg项会有叹号（似乎是2.2版本之后才有的），点Restore Fppkg configuration，再点Write new configuration files，最后点Start IDE
可以为lazarus.exe创建快捷方式
至此，IDE就算是安装完了，需要的话可以把安装目录整个压缩备份，不过个人还是建议把IDE配置好了再备份
IDE配置 构建配置 由于Lazarus每次安装三方组件都要重新build，如果三方组件装得多了，IDE的exe会很大（不是你自己写的exe），而个人又是比较喜欢小巧的，所以这一步是少不了的。
菜单Tools-&amp;gt;Configure &amp;quot;Build Lazarus&amp;quot;
Profile to build项选择Optimized IDE
点Build会立即重新构建IDE；点Save Settings仅保存配置，下次构建时生效
一体式窗口 安装完之后，IDE默认是D7那种分离式窗口，在小分辨率屏幕的时代很有用，不过现在嘛，个人感觉还是一体式窗口比较舒服。Lazarus已经提供了这样的包，只不过默认并没有启用。
菜单Package-&amp;gt;Install/Uninstall Packages ...
右侧选择AnchorDockingDsgn 1.0，点Install selection或双击
点Save and rebuild IDE重新构建，IDE重启之后就是一体式的窗口了
拖动子窗口的标题，会自动吸附，调整为自己喜欢的布局，重启IDE即可
此时，若是不小心把布局调乱了，就不好恢复了，所以可以考虑把自动保存布局功能给关了：
菜单Tools-&amp;gt;Desktops ...，去掉Auto save active desktop的勾，关闭 其它配置 菜单Tools-&amp;gt;Options ...是IDE集中的配置，可依自己习惯或喜好进行配置。不过，倒是可以分享些个人的配置及相应的考虑，以供参考：</description>
    </item>
    <item>
      <title>FPHTTPClient请求https</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_fphttpclient_https/</link>
      <pubDate>Fri, 17 Feb 2023 20:59:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_fphttpclient_https/</guid>
      <description>从其它平台迁移而来
在客户端不需要证书的情况下，简单两步操作即可让TFPHTTPClient实现https的请求：
在源码中引用opensslsockets单元
在生成目录下加入动态库libcrypto-1_1.dll和libssl-1_1.dll</description>
    </item>
    <item>
      <title>Lazarus连数据库的那点坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_connection/</link>
      <pubDate>Sat, 24 Dec 2022 22:03:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_connection/</guid>
      <description>从其它平台迁移而来
环境 Lazarus v2.2.4(32位/64位)
MySQL 8.0.31 64位
PostgreSQL 15.1 64位
坑 MySQL Lazarus v2.2.4已内置MySQL8.0的TMySQL80Connection组件，但是连接时却提示Can not load MySQL library &amp;quot;libmysql.dll&amp;quot;. Please check your installation.使用64位编译，放进64位MySQL8.0.31的libmysql.dll仍然报该错，一直到把版本降到5.7系列才正常，换32位编译，同样的结果：使用5.7系列的libmysql.dll可正常使用。
PostgreSQL 连接PostgreSQL时，同样遇到与MySQL类似的报错：Can not load PostgreSQL client library &amp;quot;libpq.dll&amp;quot;. Check your installation.按照与MySQL相同的思路，版本从15.1一直降到目前支持的最低版本9.2.24，仍然报错！
查一下官方论坛，各种方式试了一通，发现64位的程序除libpq.dll外，v11+还需要libcrypto-3-x64.dll、libiconv-2.dll、libintl-9.dll、libssl-3-x64.dll和libwinpthread-1.dll；v9.4~v10.23还需要libcrypto-1_1-x64.dll、libiconv-2.dll、libintl-8.dll、libssl-1_1-x64.dll。
而32位程序，最高可用版本为v10.23，除libpq.dll外，还需要libcrypto-1_1.dll、libiconv-2.dll、libintl-8.dll、libssl-1_1.dll，必要时可能还需要VC运行时。</description>
    </item>
    <item>
      <title>Lazarus的dll卸载问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_unload/</link>
      <pubDate>Sat, 10 Dec 2022 22:26:44 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_unload/</guid>
      <description>从其它平台迁移而来
事件 计划做一个插件式的桌面应用框架，一方面练练手，另一方面算是自身的技术积累吧。
在练手过程中，发现一个巨难受的问题，dll卸载不掉，程序直接假死！
虽然可以不直接调用卸载，依赖主程序退出时卸载的特性，但做为插件式应用，必须能在运行中加载/卸载才算完整。即便不是插件式应用，dll的正常卸载也应该是很常用的功能，现在不正常，那么一定是代码写得有问题。
写了测试Demo，一行一行加代码，结果都能正常卸载，这就杯具了……测试了无数次，直到想把每一步都输出到日志时，dll无法卸载了。一点点分析源码后，发现很可能是日志中为了方便使用，加的initialization节和finalization节导致的，注释掉之后就真的正常了。
分析 initialization节应该是在Application.Initialize;时执行的，finalization节应该是在Application.Terminate;之后的某个时间点执行的（具体执行时机没深入研究过）。而我的dll是要做成插件的，不可避免会有可视化窗体，所以Application.Initialize;不可避免（Lazarus是这样，Delphi不是），而在initialization节中创建了日志记录器实例，在finalization节中进行释放，这样，在卸载dll时就出现了锁死的情况：卸载时有内存（实例）未释放，需要等内存释放了才能完全卸载，而未卸载又导致执行不到finalization节，就不能释放实例……于是，dll无法卸载，程序就进入假死状态。
以上只是初步分析，鉴于对底层机制了解不深，可能分析不完全正确，甚至是错误的。
结论 在编写的dll中不要在initialization节和finalization节中进行内存管理的工作。 对于无对象、纯函数式的dll，initialization节和finalization节会不会产生影响尚未测试，目前也暂无这方面需求，待以后遇到了再详细测试吧。</description>
    </item>
    <item>
      <title>Lazarus debug的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debug/</link>
      <pubDate>Sun, 20 Nov 2022 23:44:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debug/</guid>
      <description>从其它平台迁移而来
最近在研究Lazarus写dll，已经踩了不少坑了，这下又踩了个不大不小的坑，记录下。
问题 在dll工程里，断点失效，根本没办法调试 解决方案 网上查了N多资料，个中辛酸在此不表，终于找到些蛛丝马迹。
Lazarus在windows上默认使用的是FpDebug内置的Dwarf，这货本身就不支持在dll中调试，法了个克！切换为gdb，立马OK！
不过，据说gdb在windows上有bug，这……反正FpDebug的bug遇到了也不是一个两个了，先用着再说。</description>
    </item>
    <item>
      <title>Lazarus编写dll与接口注意事项小结</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_api/</link>
      <pubDate>Tue, 13 Sep 2022 20:40:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_api/</guid>
      <description>从其它平台迁移而来
之前用lazarus编写了使用IInterface的dll，可惜没有成功。当把IInterface编译到exe里时，功能正常，编译到dll里再在exe里调用就不正常，原因未深究，不过大致也知道是哪一类问题，至于还有没有其它问题，暂未可知。
闲来有空，有写了点Demo来，有了不少新发现，在此记录下：
只有使用exports导出的函数才能在dll外部调用
只有使用stdcall修饰的函数传参规则才与标准C的传参规则相同，其它遵守标准C传参规则的语言可以正常调用；否则，只有lazarus编写的程序可以正常调用
入参为string类型时，无论是否使用stdcall修饰，lazarus编写的程序调用正常，其它语言未测试
返回值或出参为string类型时，调用报External: ACCESS VIOLATION错误；但参数为PChar时，调用正常
入参/出参/返回值为结构体时，调用正常
string类型传参是指针/引用拷贝，结构体传参是值拷贝
string做入参时，由主调函数分配内存并增加引用计数，被调函数执行时再次增加引用计数，被调函数结束时减少引用计数，此时引用计数不为0不释放内存，主调函数结束时再次减少引用计数，引用计数为0释放内存，该内存由exe分配，因此释放不报错；做出参时，由被调函数执行时分配内存并增加引用计数，被调函数返回时先赋值给主调函数的变量，增加引用计数，再结束被调函数，减少引用计数，主调函数结束时再次减少引用计数，此时引用计数为0释放内存，但该内存是由dll分配，因此产生External: ACCESS VIOLATION错误
string类型不适合在dll和exe之间传参（尤其是出参）
返回值为对象时，调用异常；入参/出参为exe创建的对象时，调用正常
结论 根据测试得出的结论，可能不严谨：
指针做为形参（入参/出参）传递没有问题，但必须遵守谁创建谁释放的原则；指针做为返回值可能会有隐患
对象传参实际传的是对象的指针，规则与指针相同
返回值适合传递值拷贝的类型，如整型、浮点型、布尔型、结构体、指针（但指针指向的内存要遵守谁创建谁释放的原则，不过一般不直接使用）等
字符串、结构体的生命周期是由编译器维护的，使用需慎重</description>
    </item>
    <item>
      <title>Lazarus压缩/解压zip乱码问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip01/</link>
      <pubDate>Wed, 24 Aug 2022 22:10:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip01/</guid>
      <description>从其它平台迁移而来
Lazarus压缩/解压zip文件可以使用Zipper单元中的TZipper/TUnZipper类来实现，但是在有中文文件名时需要注意，否则会出现乱码。
压缩 TZipper的Zip类方法无需创建实例即可直接生成zip压缩文件。
TZipper实例的ZipFile方法是压缩一个指定的文件生成zip压缩文件，ZipFiles方法是压缩多个指定的文件生成zip压缩文件，UnZipAllFiles方法是配合Entries等属性生成zip压缩文件。
解压 TUnZipper的UnZip类方法无需创建实例即可直接解压zip文件。
TUnZipper实例的UnZipFile方法是解压出一个指定的文件，UnZipFiles方法是解压出多个指定的文件，UnZipAllFiles方法可以从zip文件中解压出所有文件。
乱码 无中文文件名的情况下，以上类方法和实例方法使用都是正常的，与其它压缩/解压工具交叉使用也不会出现问题。
当存在中文文件名时，成对使用以上压缩/解压方法，从结果上来说是没什么问题的，但与其它压缩/解压工具交叉使用时就会出现文件名乱码问题。
乱码其实还是字符编码的问题，Lazarus默认使用UTF8编码，windows默认使用OEM对应的编码，对于中文windows就是GBK编码，于是就出问题了。
解决方案 TZipper有UseLanguageEncoding属性，TUnZipper有UseUTF8属性，均设置为True，再进行压缩/解压即可，因此，类方法是肯定不行的了。
不过，这两个属性在语意上却十分让人费解，因为属性为False时，zip文件头里的文件名实际使用的是UTF8编码，而当属性为True时，zip文件头里的文件名实际使用的却是GBK编码，搞不懂这些老外的想法。
对了，好像要使用FPC 3.2.0+的编译器版本才可以。</description>
    </item>
    <item>
      <title>Lazarus构造/析构等方法的执行顺序</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_order/</link>
      <pubDate>Fri, 24 Jun 2022 22:53:40 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_order/</guid>
      <description>从其它平台迁移而来
AfterConstruction、BeforeDestruction是TObject本身就有的方法，Loaded是从TComponent才有的方法，好好利用的话就可以更精准的控制对象的生命周期或者初始化/清理工作。虽然知道这点，而且也经常在自己的程序中使用，但还是会经常搞错执行顺序，因此专门记录一下以备忘备查。
Form graph TD f1[inherited Create 前] --&gt; f2[inherited Loaded 前] --&gt; f3[inherited Loaded 后] --&gt; f4[inherited Create 后] --&gt; f5[inherited AfterConstruction 前] --&gt; f6[FormCreate] --&gt; f7[inherited AfterConstruction 后] --&gt; f8[FormResize] --&gt; f9[FormShow] --&gt; f10[FormCloseQuery] --&gt; f11[FormClose] --&gt; f12[inherited BeforeDestruction 前] --&gt; f13[FormHide] --&gt; f14[FormDestroy] --&gt; f15[inherited BeforeDestruction 后] --&gt; f16[inherited Destroy 前] --&gt; f17[inherited Destroy 后] DataModule graph TD d1[inherited Create 前] --&gt; d2[inherited Loaded 前] --&gt; d3[inherited Loaded 后] --&gt; d4[inherited Create 后] --&gt; d5[inherited AfterConstruction 前] --&gt; d6[DataModuleCreate] --&gt; d7[inherited AfterConstruction 后] --&gt; d8[inherited BeforeDestruction 前] --&gt; d9[DataModuleDestroy] --&gt; d10[inherited BeforeDestruction 后] --&gt; d11[inherited Destroy 前] --&gt; d12[inherited Destroy 后] Frame graph TD f1[inherited Create 前] --&gt; f2[inherited Loaded 前] --&gt; f3[inherited Loaded 后] --&gt; f4[inherited Create 后] --&gt; f5[inherited AfterConstruction 前] --&gt; f6[inherited AfterConstruction 后] --&gt; f7[FrameResize] --&gt; f8[inherited BeforeDestruction 前] --&gt; f9[inherited BeforeDestruction 后] --&gt; f10[inherited Destroy 前] --&gt; f11[inherited Destroy 后] 总结 Loaded是在Create的过程执行的，应该是用来做一些加载资源之类或其它辅助构造的工作</description>
    </item>
    <item>
      <title>Lazarus速查</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_info/</link>
      <pubDate>Thu, 23 Jun 2022 22:55:57 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_info/</guid>
      <description>从其它平台迁移而来
Package-&amp;gt;Install/Uninstall Packages AnchorDockingDsgn：安装后转为一体式IDE
LazActiveX：安装后可安装ActiveX组件
lazdaemon：可开发windows服务
lazprojectgroups：使IDE支持工程组
lazvlc：VLC 播放器组件，需要V2版本以上的libvlccore.dll和libvlc.dll
Package-&amp;gt;Online Package Manager DBTreeViewAndDBCntrlGrid：可从数据集中把树型数据直接显示为树
DCPcrypt：常用加密/解密，如DES、3DES、AES、RC2、RC4、RC5、RC6、MD4、MD5、SHA1、SHA256、SHA384、SHA512等
自带单元 fpjson、jsonscanner、jsonparser：自带JSON
jsonConf：JSON配置
fphttpclient：HTTP客户端
fphttpserver：HTTP服务端
base64：BASE64编码/解码
md5：MD2、MD4、MD5算法
sha1：SHA-1(RFC 3174)算法
crcCRC32、CRC64和CRC128算法
开源库 dataset-serialize：数据集与JSON序列化/反序列化
CEF4Delphi：谷歌浏览器内核，依赖DCPcrypt</description>
    </item>
    <item>
      <title>Lazarus报Error: Undefined symbol</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_undefined_symbol/</link>
      <pubDate>Mon, 06 Jun 2022 21:59:18 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_undefined_symbol/</guid>
      <description>从其它平台迁移而来
在使用Lazarus编写动态库的过程中遇到了报Error: Undefined symbol:错误的问题，死活编译不过去，加了LCL包依赖也不行，找了N久终于在一个英文网站上找到了解决办法。
Error: Undefined symbol:错误会依据所写的代码用到的单元不同而有一定的差异，我遇到的报错大致如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 project1.lpr(18,1) Error: Undefined symbol: WSRegisterCustomImageListResolution project1.lpr(18,1) Error: Undefined symbol: WSRegisterMenuItem project1.lpr(18,1) Error: Undefined symbol: WSRegisterMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterMainMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterPopupMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterDragImageListResolution project1.lpr(18,1) Error: Undefined symbol: WSRegisterLazAccessibleObject project1.lpr(18,1) Error: Undefined symbol: WSRegisterControl project1.lpr(18,1) Error: Undefined symbol: WSRegisterWinControl project1.lpr(18,1) Error: Undefined symbol: WSRegisterGraphicControl project1.</description>
    </item>
    <item>
      <title>慎用 out</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_use_out/</link>
      <pubDate>Wed, 15 Dec 2021 11:29:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_use_out/</guid>
      <description>从其它平台迁移而来
最近需要评估一下海康摄像头不同抓拍方式的性能，以及封装类的可靠性。
在测试过程中，又发现了当初遇见的设备内存抓拍报错的问题。当初排查的结论是：当封装类开启预览的情况下，使用设备抓图有较高概率抓拍失败。由于预览是必需的，最终选择了预览抓拍。
现在，换用lazarus进行测试，发现设备抓图必失败，与是否预览无关。一点点调试，发现直接调用SDK原始方法进行设备抓图正常，使用封装类的设备抓图就不行，那肯定是封装类出了问题。
最终发现，封装类的设备抓图使用了out来修饰参数，参数是TMemoryStream和TJPEGImage对象，尝试去掉out修饰符，然后就一切正常了。
记得很久前专门研究过out和var修饰符的区别，当时查阅的结果是：out和var修饰的参数都是传址的，区别是out会对参数进行初始化，而var则不会。
另外，参数为对象的情况，实际也是传址的。
本次发现的问题可能就是使用out来修饰对象参数导致的，但并没有进行进一步的测试。
附 测试环境 操作系统：win10
硬盘：SSD
测试结果 子码流预览抓图，耗时毫秒级；主码流预览抓图，耗时10+毫秒级
预览抓图比设备拍图耗时少得多，设备抓图在100+毫秒级
在相同分辨率情况下，预览抓图的文件大小比设备抓图的略大</description>
    </item>
    <item>
      <title>配置Lazarus免重装</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_install/</link>
      <pubDate>Sun, 10 Oct 2021 11:21:03 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_install/</guid>
      <description>从其它平台迁移而来
事件 过了个十一，原本好好的电脑，突然鼠标不能用了，本着重启能解决80%的问题的原则重启了下，结果就杯具了，直接就蓝屏了，怎么折腾都进不了系统，BUG 10果然是BUG 10，绝对名不虚传！
无奈，只剩下重装系统这一条路了，装完系统之后还要装一堆软件，还要把软件配置成自己的习惯，还有其它一些细节工作……要把这些都做完才能大致恢复到原先的样子，想想就各种不爽。
虽然已经尽可能的使用免安装/重装的软件了，但还是避免不了有一些软件必须要重装才能使用的情况，唉~
其中最令人头疼的就是开发环境了，几乎绝大部分都要重装，Lazarus就是其中之一，先前已经尝试过了，离成功只差一步了，这次终于搞定了，记录下来。
免重装 正常安装Lazarus
首次启动Lazarus会弹出初始配置界面，关闭
打开Lazarus的根安装目录，新建一个config文件夹
打开C:\Users\xxx\AppData\Local\lazarus文件夹(xxx为用户名)，复制里面所有内容到config
找到Lazarus的快捷方式，右键属性，在目标里原有内容后面添加 --pcp=.\config(注意前面有空格)，确定
把修改好的快捷方式复制到Lazarus的根安装目录下，供以后使用
删除C:\Users\xxx\AppData\Local\lazarus文件夹
使用刚才的快捷方式启动Lazarus，进行个性化设置、安装组件等
以后重装系统了直接使用快捷方式启动Lazarus即可
如果安装的组件全部都在Lazarus的安装目录下，整个Lazarus的安装目录即为一个便携式的IDE了
为避免如果使用过程中出现莫名其妙的现象，建议把Lazarus的安装目录下的ssleay32.dll、libeay32.dll、Qt5Pas1.dll和Qt4Pas5.dll复制到C:\Windows\System32或C:\Windows\SysWOW64下
本文参考了https://blog.csdn.net/love3s/article/details/7450339
附 在命令行进入Lazarus的根安装目录，运行lazarus.exe -?
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 lazarus [options] &amp;lt;project-filename&amp;gt; IDE Options: --help or -?</description>
    </item>
    <item>
      <title>安装 CodeTyphon</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/codetyphon_install/</link>
      <pubDate>Sun, 07 Feb 2021 09:29:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/codetyphon_install/</guid>
      <description>从其它平台迁移而来
一直想找个开源的可以商用的Delphi的替代品，能跨平台了最好。开始时试过Lazarus，和D7还真是挺像的，不过用惯了XE，还是想找个习惯相似的IDE，扒拉下论坛后发现了CodeTyphon，就想着试一下。
下载 下载就不多说了，网上很容易找到，而且官方wiki写得也很好，英文好的可以直接看，像我这样的英语渣渣，还是有必要慢慢去啃的。
CodeTyphon下载后只有一个CodeTyphonIns.zip的压缩包，无论是Windows、Linux还是MacOS，安装包都是它，因为不管在哪个平台上安装，都是要编译的。
安装 解压CodeTyphonIns.zip得到CodeTyphonIns
在Windows平台，以管理员方式运行install.bat；在类unix平台，先cd CodeTyphonIns，再sudo ./install.sh
出现以下界面，输入0
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ==================================================== CodeTyphon Studio Version 7.30 (GEN 7) Installation for Linux-Solaris-Openindiana-MacOS FreeBSD-NetBSD-OpenBSD-DragonFly ==================================================== -----WARNING------ WARNING ----WARNING------- You tryng to install CT as root This is NOT the correct procedure. You MUST start CodeTyphon Installation as normal user with sudo root privileges --------------------------------------------- 0) Install CodeTyphon Studio (remove old first) 1) Update CodeTyphon Studio 2) Remove CodeTyphon Studio 9) Exit &amp;gt;&amp;gt;&amp;gt; Select an action (press 0.</description>
    </item>
    <item>
      <title>使用海康威视SDK的那些坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/sdk_hcnetsdk/</link>
      <pubDate>Wed, 02 Jan 2019 16:29:46 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/sdk_hcnetsdk/</guid>
      <description>从其它平台迁移而来
由于工作需要，项目中有使用到海康威视的产品，不可避免的就要使用海康的SDK进行二次开发。开发过程中磕磕绊绊的，踩了不少坑，这里做一个简单的记录，算是给健忘的自己提个醒吧。
Delphi版本的接口 Gitee地址
首先，自己一直使用Delphi进行开发，然而海康官方只提供了C/C++的接口和示例，无奈只能自己改写了。改写完的部分已经上传，希望能有人共同来完善。
由于Delphi商业使用的限制，现已转到Lazarus，全面拥抱开源。
坑 播放声音 预览时播放声音，回放时播放声音，甚至使用播放库播放已下载的视频时播放声音，这些对于前端摄像头自带麦克的场景肯定是刚需（另接麦克的情况暂未测试），然而按照官方SDK文档和示例代码写出的程序死活就是没有声音，这样的情况似乎不少人都遇到过，但是，好像并没有见谁把解决方法公开过。
其实，这个问题特别简单，只需要把HCNetSDKCom目录下的OpenAL32.dll拷贝到PlayCtrl.dll所在的目录下就可以了。这下就明白了吧，没有声音的原因其实就是使用NET_DVR_OpenSound调了PlayCtrl.dll，而PlayCtrl.dll又调了OpenAL32.dll来播放声音，但是由于PlayCtrl.dll没有找到OpenAL32.dll所以没有声音，而且这个有问题的返回值也并没有一层层的返回给NET_DVR_OpenSound函数，结果就是函数返回调用成功了，但就是死活没声音。
PlayCtrl.dll不是PlayCtrl.dll 使用海康SDK进行二次开发的，一般也会使用到海康的播放库，但是有一个问题是需要注意的，那就是SDK里的PlayCtrl.dll并不是播放库里的PlayCtrl.dll。虽然它们长得一样，名字也一样，但它们的本质却是完全不一样的，是不能互相替代的！有兴趣的朋友可以使用eXeScope详细查看。</description>
    </item>
  </channel>
</rss>
