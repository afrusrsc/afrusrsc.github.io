<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>⚜️其它 on 慢步道人</title>
    <link>https://afrusrsc.github.io/posts/other/</link>
    <description>Recent content in ⚜️其它 on 慢步道人</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh</language>
    <copyright>2017-2025 Jesse Jin</copyright>
    <lastBuildDate>Sun, 31 Aug 2025 16:35:55 +0800</lastBuildDate>
    <atom:link href="https://afrusrsc.github.io/posts/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gimp更换证件照的背景色</title>
      <link>https://afrusrsc.github.io/posts/other/gimp_change_background_color/</link>
      <pubDate>Sun, 31 Aug 2025 16:35:55 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/gimp_change_background_color/</guid>
      <description>背景 宝宝该上幼儿园了，之前千难万难终于拍成了一张红底的一寸照，现在突然又通知需要两版蓝底的一寸照，呃～还是自己P一个吧。
早先使用Gimp处理过换底色，方法比较笨拙，效果也差强人意。这次的效果还算不错，做个记录。
方法 思路 不管是用什么工具，思路都是一样的：
graph LR s1[扣出人像] --&gt; s2[删除原背景] --&gt; s3[添加新背景] 步骤 准备工作 安装Gimp 1 sudo apt install gimp 使用gimp打开红底照片，如果原图是使用Photoshop处理的话，一般都会有个转换的提示，点转换后，先另存为Gimp的*.xcf格式
修改当前图层名为原图
复制原图图层并改名为扣图
新建背景图层，使用油漆桶工具填充成蓝色
调整图层顺序，从下到上依次为背景、原图、扣图
扣图 在扣图图层上右键添加透明通道，并锁定位置和大小，可避免拖动类的误操作
选择前景选择工具，用鼠标粗略地围绕人物轮廓画一圈，形成一个大概的选区框，回车，画面变暗
调整笔触宽度，在人物的内部（包括头发）涂抹，涂抹过的区域将变亮。
注意：1.可以先用粗笔选中间区域，再用细笔选边缘区域；2.头发部分尽量不要选择到有背景色的部分；3.尽量贴近边缘选择，可以有效减少运算量
涂抹完成后回车，等Gimp运算完，将会自动生成一个精确的人物轮廓区，可以在彩色和灰度之间切换查看效果，如果有未选择到的区别，可以调整笔触继续选择，但每一次选择都会触发运算，建议回到第2.步重新选择
再次回车，可看到最终的选区
反选，即选择到背景，删除
精修 在扣图图层上右键添加图层蒙板，并选择蒙板
选择低硬度的画笔，如硬度25的笔刷，前景色为黑色
放大图片，在边缘有原背景色的地方进行涂抹，如果不小心把人物部分擦掉了，只需将前景色切换为白色，再涂抹就可以恢复
导出 隐藏原图图层，显示背景图层
菜单文件-&amp;gt;导出为，导出最终图片
保存*.xcf文件备用，如改白底、改尺寸等
总结 核心在扣图环节，这个环节做好了，后面基本不需要调整，或只需要微调。</description>
    </item>
    <item>
      <title>VSCode基本使用</title>
      <link>https://afrusrsc.github.io/posts/other/vscode/</link>
      <pubDate>Thu, 10 Aug 2023 22:12:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/vscode/</guid>
      <description>从其它平台迁移而来
个性配置 纯文本复制 设置-&amp;gt;搜索copy-&amp;gt;取消Editor:Copy With Syntax Highlighting前的勾
列分隔线 设置-&amp;gt;搜索rulers-&amp;gt;点Editor:Rulers项下的在settings.json中编辑-&amp;gt;如下填入分隔线位置（可设置多个，多个值之间用,隔开）
1 2 3 &amp;#34;editor.rulers&amp;#34;: [ 80, 120 ], 显示空格 设置-&amp;gt;搜索whitespace-&amp;gt;找到Editor:Render Whitespace-&amp;gt;选择all
自动换行 设置-&amp;gt;搜索word-&amp;gt;找到Editor:Word Wrap-&amp;gt;选择on
使用技巧 列模式 ALT+鼠标左击：选择不连续的列进行列编辑，列可不对齐
ALT+鼠标拖动：选择连续的列进行列编辑，列会对齐</description>
    </item>
    <item>
      <title>Markdown基础</title>
      <link>https://afrusrsc.github.io/posts/other/markdown/</link>
      <pubDate>Thu, 10 Aug 2023 21:27:10 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/markdown/</guid>
      <description>从其它平台迁移而来
基础知识 后缀名一般为.md
只关注于内容，渲染交给页面或软件来实现
语法 标题 1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 连续两个回车或连续两个空格一个回车表示一个段落的结束。
有序列表 1 2 3 4 5 1. 有序列表1 2. 有序列表2 3. 有序列表3 无序列表 1 2 3 4 5 - 无序列表1 - 无序列表2 - 无序列表3 任务列表 1 2 3 - [ ] 这是未完成 - [x] 这是已完成 这是扩展语法，部分渲染可能不支持。 引用 1 2 3 &amp;gt; 这是引用的内容 &amp;gt; &amp;gt; 这是又一行的引用内容 格式 1 2 3 *这是斜体* **这是加粗** ~~这是删除线~~ 分隔线 1 2 3 --- *** ___ 代码块 1 `这是行内代码块` 1 2 3 ``` 这是多行代码块 ``` 1 2 3 4 5 6 7 ```c //在```之后加语言名可进行语法高亮，具体看渲染如何实现 # include &amp;lt;stdio.</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——甘特图</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid_gantt/</link>
      <pubDate>Thu, 02 Mar 2023 21:59:59 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid_gantt/</guid>
      <description>从其它平台迁移而来
语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 gantt %注释 title 这是标题 %输入数据的时间格式 dateFormat YYYY-MM-DD %坐标轴的时间格式 axisFormat %m-%d %排除的时间 excludes weekends %坐标轴刻度，高版本支持 tickInterval 1day %是否显示当天的标记，默认on todayMarker off section 项目A %任务描述 : [任务状态,] [任务名称,] 开始时间, 时长或结束时间 任务1 : done, a1, 2023-03-01, 3d 任务2 : active, a2, after a1, 2023-03-08 里程碑 : milestone, a3, 2023-03-07, 1d section 项目B 任务1 : b1, 2023-03-07, 4000m 任务2 : crit, b2, after a2, 15h gantt %注释 title 这是标题 dateFormat YYYY-MM-DD axisFormat %m-%d excludes weekends %tickInterval 1day todayMarker off section 项目A 任务1 : done, a1, 2023-03-01, 3d 任务2 : active, a2, after a1, 2023-03-08 里程碑 : milestone, a3, 2023-03-07, 1d section 项目B 任务1 : b1, 2023-03-07, 4000m 任务2 : crit, b2, after a2, 15h 输入数据的时间格式 关键字dateFormat后的内容用于声明输入数据的时间格式，具体如下：</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——流程图</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid_graph/</link>
      <pubDate>Mon, 06 Feb 2023 21:24:16 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid_graph/</guid>
      <description>从其它平台迁移而来
语法 1 2 3 4 5 6 7 --- title: 流程图名称 # 可能会有渲染不支持 --- graph/flowchart [TB/TD|BT|LR|RL] 节点名即内容 节点名1[节点内容] 节点名2[&amp;#34;节点内容&amp;#34;] graph 节点名即内容 节点名1[节点内容] 节点名2[&#34;带引号节点内容&#34;] 节点 1 2 graph 默认节点 graph 默认节点 1 2 graph a1[矩形] graph a1[矩形] 1 2 graph a2(圆角矩形) graph a2(圆角矩形) 1 2 graph a3{菱形} graph a3{菱形} 1 2 graph a4((圆形)) graph a4((圆形)) 1 2 graph a5&amp;gt;旗形] graph a5&gt;旗形] 1 2 graph a6{{尖端矩形}} graph a6{{尖端矩形}} 1 2 graph a7([圆端矩形]) graph a7([圆端矩形]) 1 2 graph a8[\平行四边形1\] graph a8[\平行四边形1\] 1 2 graph a9[/平行四边形2/] graph a9[/平行四边形2/] 1 2 graph a10[/梯形1\] graph a10[/梯形1\] 1 2 graph a11[\梯形2/] graph a11[\梯形2/] 1 2 graph a12[[子程序]] graph a12[[子程序]] 1 2 graph a13[(圆柱形)] graph a13[(圆柱形)] 1 2 graph a14(((双圆))) # 高版本渲染支持 graph a14(((双圆))) 布局 标识 含义 备注 TB/TD 从上到下 默认 BT 从下到上 LR 从左到右 RL 从右到左 TB/TD graph a --&gt; b BT graph BT a --&gt; b LR graph LR a --&gt; b RL graph RL a --&gt; b 连线 普通连线 线形 1单位长 2单位长 3单位长 细实线 --- ---- ----- 细实线箭头 --&amp;gt; ---&amp;gt; ----&amp;gt; 粗实线 === ==== ===== 粗实线箭头 ==&amp;gt; ===&amp;gt; ====&amp;gt; 虚线 -.</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——初识</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid/</link>
      <pubDate>Sat, 04 Feb 2023 16:06:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid/</guid>
      <description>从其它平台迁移而来
一直比较喜欢用Markdown格式写点东西，如：记笔记、列计划等。但是当需要在Markdown中插入一些图片时，尤其是那些会经常发生变动的图片时（例如：流程图），简直痛不欲生，因为需要重新用工具修改图片后再链接进Markdown里。
如果能直接在Markdown里编写并生成图片，简直不要太开心。所幸这个问题已经有大佬给出了解决方案，那就是Mermaid。
个人理解：Mermaid是一种类似于Markdown中代码块高亮渲染的东西，可以把特定的纯文本渲染成对应的图片（流程图等）。Mermaid仅仅是一种渲染，并非Markdown的原生语法，所以，能不能看到图片以及图片最终呈现的样子，还要看对应的编辑器或页面是否对Mermaid进行支持及具体的渲染实现。
语法 在Markdown中嵌入Mermaid，语法与嵌入代码块的语法类似，即原先写c、java等的地方写为mermaid，之间写上具体的Mermaid内容即可。
1 2 3 4 ```mermaid # 开始 graph TD # 类型 Start --&amp;gt; Stop # 具体内容 ``` # 结束 经渲染后如下：
graph TD Start --&gt; Stop 分类 1. 流程图 见上面的示例。
2. 时序图 1 2 3 4 sequenceDiagram Alice-&amp;gt;&amp;gt;John: Hello John, how are you? John--&amp;gt;&amp;gt;Alice: Great! Alice-)John: See you later! sequenceDiagram Alice-&gt;&gt;John: Hello John, how are you? John--&gt;&gt;Alice: Great! Alice-)John: See you later! 3. 类图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 classDiagram Animal &amp;lt;|-- Duck Animal &amp;lt;|-- Fish Animal &amp;lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } classDiagram Animal &lt;|-- Duck Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } 4.</description>
    </item>
  </channel>
</rss>
