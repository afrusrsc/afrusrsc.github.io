<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>慢步道人</title>
    <link>https://afrusrsc.github.io/</link>
    <description>Recent content on 慢步道人</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh</language>
    <copyright>2017-2025 Jesse Jin</copyright>
    <lastBuildDate>Sat, 01 Nov 2025 15:43:00 +0800</lastBuildDate>
    <atom:link href="https://afrusrsc.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker容器日志配置</title>
      <link>https://afrusrsc.github.io/posts/devops/docker_log_opt/</link>
      <pubDate>Sat, 01 Nov 2025 15:43:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/devops/docker_log_opt/</guid>
      <description>事件 有一个任务需要把当前正在使用的镜像导出为离线包，在导出过程中发现速度特别慢，第一反应是CPU或内存被拉満了，top查看后是正常的，那问题可能出在磁盘上。
服务器上暂时没有合适的查看磁盘I/O的工具，只好先看下容量：
1 df -h 瞬间发现磁盘使用率达到了95%以上，铁定有问题了！
1 du -h -d 1 / 发现/var目录巨大无比！
1 du -h -t 10G /var 发现有几个/var/lib/docker/containers/xxxxxx的文件特别大，问了deepseek，得到的回答是：docker默认会将容器内应用产生的日志记录在json日志文件里，且默认没有大小限制！
查了下容器的id，嗯，这下对上了，确实是日志的问题！那就限定下日志的大小即可。
方案 全局配置 全局配置适用于所有之后新建的容器。
修改/etc/docker/daemon.json，添加日志限制：
1 2 3 4 5 6 7 { &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;10m&amp;#34;, &amp;#34;max-file&amp;#34;: &amp;#34;5&amp;#34; } } 单容器配置 启动时通过参数直接限制：
1 docker run --log-opt max-size=10m --log-opt max-file=5 ... docker-compose.yaml配置 使用docker compose时，可以在docker-compose.yaml里配置：
1 2 3 4 5 6 7 8 services: your-service: image: your-image logging: driver: &amp;#34;json-file&amp;#34; options: max-size: &amp;#34;10m&amp;#34; max-file: &amp;#34;5&amp;#34; 也可以使用yaml锚点避免重复配置：</description>
    </item>
    <item>
      <title>Bye~~ win10！</title>
      <link>https://afrusrsc.github.io/posts/os/bye_win10/</link>
      <pubDate>Mon, 20 Oct 2025 21:13:08 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/bye_win10/</guid>
      <description>一个消息 听说，win10停更了，第一反应是：哦，已经到时间了啊，停吧，反正也就玩游戏时会用用。
事实上，这个消息如果是在半年前，第一反应肯定是这样：哎呀，太好了，SBbug10终于不会再自动更新了，再也不用担心这SB偷偷自动更新半天、然后更新失败再回滚半天，浪费时间、浪费精力、浪费生命！
但是，不管是哪种情况，对于新的继任者——瘟尸疫（win11），打死我也不会用的，更不会买预装了瘟尸疫的电脑，实在迫不得已要在别人的瘟尸疫设备上操作，心里也是要多骂几句的。
话再说回来，现在对待win10的态度能这么平淡，其实是因为已经使用linux做主力了，毕竟最近几年在win10上使个劲儿地折腾wsl和虚拟机，就是为了转linux做主力。
转战场 其实，大概从2009年有第一台自己的电脑后不到一年，就开始接触linux了，第一次安装的发行版是wubi安装的ubuntu，再后来是物理分区装双系统；工作后5~6年，基本上都是在虚拟机里玩，ubuntu、centos、mint、debian等主流发行版都尝试过，gnome、kde、mate、xfce、cinnamon等主流的桌面环境也尝试过，不过也仅仅是尝试过而已；后来，bug10（win10）出了wsl，又玩起了wsl。
有一阵子，python爆火，无意间发现同样的python程序在wsl和win10下的性能天差地别，对win的不满（之前主要集中在SB自动更新上）瞬间爆涨。
后来学了git并做为主力工具后，linux的tab补全简直爱死了，于是wsl+git就正式成为生产力工具了。
再后来，固态硬盘开始大行其道，这本是件好事，但是无奈那些互联网大厂都推出了自己的桌面应用——清一色的浏览器套壳，真TM SB到极致了，于是，原本就喜欢绿色版的自己就变得更喜欢那些小而美的东西了。所以，debian+xfce的组合也就慢慢固定下来了。
由于一直做的是delphi开发，基本上被win锁死了，所以，很长一段时间里都是在用win，即便是双系统。
做了十年的delphi，早已厌倦了那种因个人审美及习惯不同而导致的各种算不上是真需求的需求，所以越来越倾向于去做更关注逻辑的后端。还好，碰巧遇到了这么一个机会，于是就从delphi转go了，顺便也转为linux做主力了。
其实，有了wsl+git做主力的那段经历，完全转linux做主力并没有太多不适，真要说的话，主要还是那些消费级的应用不多（在信创大环境下，还是比以前好了不少，比如：微信、QQ、wps等），以及一些硬件的驱动麻烦些，但是那些生产级的应用真的是挺好的。
不知不觉，使用linux做主力已经半年了，win10除了偶尔玩玩游戏外，几乎已经不用了，除非是需要使用个别只能在win上运行的应用。
后话 中间也尝试过很短一段时间的free bsd，除了生态更小外，没明显感觉出与linux有太大不同。
使用linux才真正感觉自己的电脑是自己的，虽然有时也会被玩坏点东西，但是网上查一下，照着敲几下命令，一般问题都能解决。</description>
    </item>
    <item>
      <title>关于xfce4-pulseaudio-plugin中文翻译的bug</title>
      <link>https://afrusrsc.github.io/posts/os/xfce4-pulseaudio-plugin_zh_cn_mo/</link>
      <pubDate>Fri, 10 Oct 2025 22:46:05 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/xfce4-pulseaudio-plugin_zh_cn_mo/</guid>
      <description>背景 系统从debian 12升到debian 13后，一直有个地方很不爽：鼠标放到状态栏的音量图标上时无法显示当前的具体音量。但是，由于升级过程出了点状况（详见Debian从12升到13的翻车记），一时不确定是自己搞出来的问题还是本来就有bug。
过程 新发现 今天无意间查看~/.xsession-errors内容时，看到大段如下重复的内容：
1 2 (wrapper-2.0:1621): Gtk-WARNING **: 21:29:52.802: Failed to set text &amp;#39;音量 30% &amp;lt;/b&amp;gt;&amp;lt;small&amp;gt;内置音频 模拟立体声&amp;lt;/small&amp;gt;&amp;#39; from markup due to error parsing markup: 第 2 行第 5 个字符出错： 元素“b”已经闭合，当前仍开放的元素是“markup” 然后瞬间就觉得这可能是个bug！查看插件的关于信息：xfce4-pulseaudio-plugin 0.4.9，卸载并重装插件：
1 2 3 4 5 6 # 卸载 sudo apt purge xfce4-pulseaudio-plugin # 重新安装 sudo apt install xfce4-pulseaudio-plugin # 重启面板 xfce4-panel -r 重启后，问题仍在。全盘搜索相关文件：
1 2 3 4 5 6 7 8 9 10 11 12 13 sudo find / -name &amp;#34;*xfce4-pulseaudio-plugin*&amp;#34; # 部分结果如下 /usr/share/icons/hicolor/48x48/apps/xfce4-pulseaudio-plugin.</description>
    </item>
    <item>
      <title>Gimp更换证件照的背景色</title>
      <link>https://afrusrsc.github.io/posts/other/gimp_change_background_color/</link>
      <pubDate>Sun, 31 Aug 2025 16:35:55 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/gimp_change_background_color/</guid>
      <description>背景 宝宝该上幼儿园了，之前千难万难终于拍成了一张红底的一寸照，现在突然又通知需要两版蓝底的一寸照，呃～还是自己P一个吧。
早先使用Gimp处理过换底色，方法比较笨拙，效果也差强人意。这次的效果还算不错，做个记录。
方法 思路 不管是用什么工具，思路都是一样的：
graph LR s1[扣出人像] --&gt; s2[删除原背景] --&gt; s3[添加新背景] 步骤 准备工作 安装Gimp 1 sudo apt install gimp 使用gimp打开红底照片，如果原图是使用Photoshop处理的话，一般都会有个转换的提示，点转换后，先另存为Gimp的*.xcf格式
修改当前图层名为原图
复制原图图层并改名为扣图
新建背景图层，使用油漆桶工具填充成蓝色
调整图层顺序，从下到上依次为背景、原图、扣图
扣图 在扣图图层上右键添加透明通道，并锁定位置和大小，可避免拖动类的误操作
选择前景选择工具，用鼠标粗略地围绕人物轮廓画一圈，形成一个大概的选区框，回车，画面变暗
调整笔触宽度，在人物的内部（包括头发）涂抹，涂抹过的区域将变亮。
注意：1.可以先用粗笔选中间区域，再用细笔选边缘区域；2.头发部分尽量不要选择到有背景色的部分；3.尽量贴近边缘选择，可以有效减少运算量
涂抹完成后回车，等Gimp运算完，将会自动生成一个精确的人物轮廓区，可以在彩色和灰度之间切换查看效果，如果有未选择到的区别，可以调整笔触继续选择，但每一次选择都会触发运算，建议回到第2.步重新选择
再次回车，可看到最终的选区
反选，即选择到背景，删除
精修 在扣图图层上右键添加图层蒙板，并选择蒙板
选择低硬度的画笔，如硬度25的笔刷，前景色为黑色
放大图片，在边缘有原背景色的地方进行涂抹，如果不小心把人物部分擦掉了，只需将前景色切换为白色，再涂抹就可以恢复
导出 隐藏原图图层，显示背景图层
菜单文件-&amp;gt;导出为，导出最终图片
保存*.xcf文件备用，如改白底、改尺寸等
总结 核心在扣图环节，这个环节做好了，后面基本不需要调整，或只需要微调。</description>
    </item>
    <item>
      <title>Debian从12升到13的翻车记</title>
      <link>https://afrusrsc.github.io/posts/os/debian_12to13/</link>
      <pubDate>Wed, 20 Aug 2025 20:45:47 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_12to13/</guid>
      <description>前言 之前都是在虚拟机里玩玩Debian，也就最近两年才实打实地在物理机上装了Debian 12，也一直用得挺好。
前段时间，关注已久的trixie也就是Debian 13终于发布了，虽然告诫过自己要等稳定一段时间再升级，但终究挡不过尝鲜的念头一起再起，于是在发布的第二天晚上开启了升级之路。
虽然已经研究了官方的升级文档，但还是翻车了。
升级过程 先更新当前系统的补丁 1 sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y 备份源，然后修改源，把bookworm替换为trixie 1 2 3 4 5 6 7 # 备份 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # 修改 sudo sed -i &amp;#39;s/bookworm/trixie/g&amp;#39; /etc/apt/sources.list # 也可用一个命令备份并修改 sudo sed -i.bak &amp;#39;s/bookworm/trixie/g&amp;#39; /etc/apt/sources.list 再进行大版本更新 1 sudo apt update &amp;amp;&amp;amp; sudo apt full-upgrade -y 更新完成后会有类似执行apt autoremove的提示，慎重执行 翻车记 翻车根源在于：大版本更新时使用了sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y，之后又无脑执行了sudo apt autoremove，好巧不巧把network-manager卸载了，没法上网了！
若是可以接有线网，插上网线，sudo apt install network-manager也就不会有后面的问题了。但是，偏偏这是在一个没有有线网的环境下。</description>
    </item>
    <item>
      <title>PC上多开微信的方法</title>
      <link>https://afrusrsc.github.io/posts/os/pc_mult_wechat/</link>
      <pubDate>Tue, 22 Jul 2025 21:13:32 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/pc_mult_wechat/</guid>
      <description>背景 随着微信在工作场景中使用得越来越多，为避免工作微信对个人生活的无缝入侵，多账号成了一个有效隔离工作和生活的手段。
但是，微信官方客户端默认不支持多账号登录，这就对有多账号登录需求的人造成了不便。
解决方案 多开的方法有很多，个人更倾向使用脚本完成，不推荐安装第三方软件。
windows win上多开的原理很简单，就是在微信彻底启动完成前启动多次，最终就会实现微信多开。可以拼手速，当然写成bat脚本更可靠。
1 2 3 4 5 6 7 8 9 10 @echo off :: 设置需要打开的微信数量 set count=2 :: 循环启动微信 for /l %%i in (1,1,%count%) do ( :: 需要填写微信实际安装路径 start &amp;#34;&amp;#34; &amp;#34;C:\Program Files (x86)\Tencent\WeChat\WeChat.exe&amp;#34; ) 美化 可以给写好的脚本创建个桌面快捷方式，然后在快捷方式上右键属性，更改图标，选择WeChat.exe，选择微信自己的图标即可。
若有开机启动的需求了，再把快捷方式加入开机启动项即可。
linux 注意：官方已经出了原生的linux版微信，以下方法是基于官方linux版，至于某些特供版是否适用尚不清楚。
在linux上多开的原理也不复杂：微信启动后会生成个锁文件（~/.xwechat/lock/lock.ini），删除即可再开一个微信。可以手动删除，当然依然是写成脚本更可靠。
1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash # 设置需要打开的微信数量 count=2 # 循环启动微信 for ((i=0; i&amp;lt;${count}; i++)); do # 需要填写微信实际安装路径 /usr/bin/wechat &amp;amp; # 0.</description>
    </item>
    <item>
      <title>Xfce4自定义用户文件夹</title>
      <link>https://afrusrsc.github.io/posts/os/xfce4_user_dirs/</link>
      <pubDate>Sun, 13 Jul 2025 10:26:19 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/xfce4_user_dirs/</guid>
      <description>背景 在Linux上，一直使用的是xfce桌面环境，要的就是一个简洁、轻量、稳定，够用却又不算丑。
但是，在中文环境下，默认的下载目录名字就是下载，在命令行下使用时还要切换输入法，麻烦，虽然可以建立软链接解决，但还是想知道有没有更直接的方法。
解决方案 一番折腾后，发现了$HOME/.config/目录下的user-dirs.dirs文件，内容如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # This file is written by xdg-user-dirs-update # If you want to change or add directories, just edit the line you&amp;#39;re # interested in. All local changes will be retained on the next run. # Format is XDG_xxx_DIR=&amp;#34;$HOME/yyy&amp;#34;, where yyy is a shell-escaped # homedir-relative path, or XDG_xxx_DIR=&amp;#34;/yyy&amp;#34;, where /yyy is an # absolute path.</description>
    </item>
    <item>
      <title>Debian开机自动挂载ntfs分区</title>
      <link>https://afrusrsc.github.io/posts/os/debian_mount_ntfs/</link>
      <pubDate>Thu, 12 Jun 2025 20:06:17 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_mount_ntfs/</guid>
      <description>背景 由于是win和debian双系统，并且需要在两个系统间共享使用资料分区，因此数据分区采用的是ntfs格式。虽说xfce桌面环境挂载ntfs分区不算麻烦（点下鼠标，再输个密码），但还是希望开机时就能自动挂载。
解决方案 以需要把win下的D:盘挂载到/mnt/d下为例进行说明。
准备工作 安装ntfs-3g驱动，已安装则忽略（桌面环境可挂载则证明已有驱动） 1 sudo apt update &amp;amp;&amp;amp; sudo apt install ntfs-3g 查看待挂载的ntfs分区的设备名称和UUID 1 lsblk -f # 假设设备名为 /dev/sda3，UUID 为 ABCDFE 手动创建挂载点 1 sudo mkdir /mnt/d 查看当前用户的uid和gid 1 id # 一般第一个非root的用户的 uid 和 gid 均为 1000 修改配置 编辑/etc/fstab 1 sudo vi /etc/fstab 添加如下内容并保存 1 UUID=ABCDFE /mnt/d ntfs-3g defaults,uid=1000,gid=1000,dmask=022,fmask=133,noatime,windows_names 0 0 重启 配置详解 1 &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt; &amp;lt;file system&amp;gt;要挂载的设备，常见格式如下： 格式 示例 说明 设备路径 /dev/sda1 直接指定分区（不推荐，设备名可能变化） UUID UUID=1234-5678 唯一标识符（推荐，通过 blkid 或 lsblk -f 查看） 卷标 LABEL=Data 文件系统卷标（需提前用 e2label 等工具设置） 网络路径 nas:/share NFS/Samba 等网络共享路径 &amp;lt;mount point&amp;gt;挂载点，必须是已存在的空目录，一般在/mnt下</description>
    </item>
    <item>
      <title>tar分卷打包解包</title>
      <link>https://afrusrsc.github.io/posts/os/tar_split/</link>
      <pubDate>Sat, 07 Jun 2025 10:19:51 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/tar_split/</guid>
      <description>前言 tar是个极其常用的命令，也是个功能很强大的命令，单是tar --help就出来好几屏，所以常用的也只是其中一小部分。
最近看到别人用tar解压分卷大文件时，自己对tar分卷完全不了解，搜索后记录一下。
分卷打包 tar自身不包含分卷功能，需要配合split完成。
1 tar -cvf - 文件夹名/ | split -b 大小 - 输出文件名前缀 # 注意两个`-`不能省 tar也可以带上其它参数，比如-z、-j等压缩参数。
split也可以带其它参数，比如-d使用数字后缀。
解包分卷 同分卷打包类似，tar需要配合cat完成对分卷的解包。
1 2 3 4 5 6 # 先拼接后解包 cat 文件前缀* &amp;gt; 合并后的文件名 tar -xvf 合并后的文件名 # 不产生中间文件 cat 文件前缀* | tar -xvf - # 注意这个`-`不能省 注意： 1. 分卷文件要全部在同一个目录下；2. 分卷文件的顺序特别重要，务必保证顺序正确无误。</description>
    </item>
    <item>
      <title>Go多版本共存</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_multi_version/</link>
      <pubDate>Mon, 26 May 2025 10:27:45 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_multi_version/</guid>
      <description>场景 工作需要，一般使用的是相对较低的go版本，且较长时间内不会轻易变更；自己尝鲜或参与某个开源项目，又会使用另外的go版本。在不同项目间切换工作，通常需要切换到对应的go版本（虽然go目前是向下兼容的，高版本可以正确编译低版本，但开发人员即便熟知不同版本间的差异，也不能百分百保证不使用到高版本的特性）。
解决方案 网上也有很多方案，尝试后摸索出了比较符合自己风格和习惯的方案。
创建一个存放go不同版本的目录，用于将不同版本下载到该目录统一管理，并以版本号命名 1 mkdir $HOME/gosdk 编写下载脚本download_go.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #!/bin/bash if test &amp;#34;${1}&amp;#34; == &amp;#34;&amp;#34;; then echo &amp;#39;请传入正确的版本号，如：&amp;#39;${0}&amp;#39; 1.21.1&amp;#39; else # 统一管理目录 gosdk=$HOME/gosdk # 下载 gopkg=go${1}.linux-amd64.tar.gz if ! test -e ${gopkg}; then wget -c https://dl.google.com/go/${gopkg} fi # 删除可能冲突的文件 rm -rf ${gosdk}/go rm -rf ${gosdk}/go${1} # 解压 tar -C ${gosdk}/ -xzf ${gopkg} # 重命名 mv ${gosdk}/go ${gosdk}/go${1} # 删除安装包 rm ${gopkg} # 配置环境变量 go env -w GOPROXY=https://goproxy.</description>
    </item>
    <item>
      <title>安装Docker</title>
      <link>https://afrusrsc.github.io/posts/devops/docker_install/</link>
      <pubDate>Wed, 21 May 2025 08:48:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/devops/docker_install/</guid>
      <description>前言 做了十多年桌面开发，虽然也会写一些服务端的东西，但毕竟不是主力，而且体量和规模也是极小的，所以很少接触docker这类。云原生已经普及很久了，而且桌面开发的路也越来越窄，是时候转变下方向了。
docker应该算是云原生的基石吧，但刚接触，光安装就够喝一壶了，多次尝试后终于成功，记录一下。
安装 准备 linux环境，linux发行版或wsl都可以
网络，有时候无法安装，仅仅是因为宽带运营商（此处点名批评下一动不动的移动）的不可知问题，换个网络即可
安装Docker 直接下载官方安装脚本进行安装 1 2 curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh 检查是否安装成功 1 docker -v 如果无权限则增加权限 1 sudo usermod -aG docker xxx 增加国内镜像源 执行以下命令
1 sudo vi /etc/docker/daemon.json 添加类似以下内容，可添加其它已知可用的镜像源地址
1 2 3 4 5 6 { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://docker.1ms.run&amp;#34;, &amp;#34;https://docker.xuanyuan.me&amp;#34; ] } 基本使用 命令 功能 示例 docker images 列出本地存储的所有镜像 docker images docker pull 从仓库拉取镜像 docker pull ubuntu docker load -i 从tar文件导入镜像 docker load -i xx.</description>
    </item>
    <item>
      <title>Lazarus插件式窗口设计尝试</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_plugin_form/</link>
      <pubDate>Mon, 05 May 2025 19:06:17 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_plugin_form/</guid>
      <description>前言 先前就尝试过使用Lazarus写一个插件式的桌面应用框架，主程序只负责整体的插件管理以及为插件提供页签式的展示容器，具体的功能实现都由插件（动态库）来完成。
但是之前比较零散的几次尝试，多或少有些问题，比较有代表性的如：
无法以模式窗口显示插件内的子窗口
插件内的窗口在任务栏上显示的是和主程序分离的两个程序
动态库无法卸载
使用接口无法释放动态库里的对象
无法跨平台（主要针对windows）
近来又进行了一次系统性的尝试，以前的一些也针对性的研究了下，并找到了目前来看比较合适的解决方案，并将阶段性成果开源了，具体地址见文末。
旧问题解决 模式窗口 这个问题其实早在Lazarus官方的wiki（Form in Dll）上就有解决方案了。
在此基础上也尝试进行一些魔改，过程就不多说了，经验总结如下：
DisableFormsCallBack和EnableFormsCallback两个回调必须为普通过程，改为类方法会导致模式窗口失效
TApplicationCallback可以和插件动态库内的管理类合并，做为插件入口的统一管理，甚至做为插件统一接口的实现
视觉上为同一程序 Form in Dll中已经涉及，即在CreateParams中将Params.WndParent赋值为主程序中对应容器的句柄。
卸载/释放 对于动态库的卸载，在Lazarus的dll卸载问题中已有提到，本次直接避免。
对于对象的释放，这前的尝试犯了一个很严重的错误，即未遵守谁创建谁释放这一原则。接口中增加专门的释放函数，用于释放通过接口创建的对象。但，对于接口创建的对象，主程序除了释放外，也不应该（事实上也不能）进行其它操作，否则会抛内存访问异常。
共享内存管理器 如果仅使用基本数据类型的话，这就是个伪命题，但若使用高阶数据类型的话还是会方便很多，毕竟字符串其实并不算是真正的基本类型。
文章在Lazarus中使用ShareMem解决了在Windows平台上共享内存管理器的问题。在QQ群的交流中，群友啊D提出使用GetMemoryManager和SetMemoryManager，目前来看是能解决该问题的。
跨平台一致性 Lazarus本身就是跨平台的，只注意避免使用平台专用的api即可，或者对不同平台的api进行封装。
对于插件式的动态库，exports导出的函数统一使用Name关键字强制命名。同时，对于32位CPU，导出函数统一使用cdecl而不是stdcall进行传参约束；对于64位CPU，导出函数统一使用默认的传参约束，即不使用任何关键字，由编译器管理。
新的问题 基于有限的测试，Linux的gtk2中显示模式窗口时主窗体还能进行最大化、最小化、移动等操作，但不能操作窗体内的元素，这与Windows上的行为表现不太一致
插件动态库创建的窗体，嵌入主程序容器后，并不能像嵌入自身容器内那样可以方便的自适应大小和位置
TODO 解决新发现的问题
主程序页签式容器的实现
主程序插件的管理
开源地址 Github地址：https://github.com/afrusrsc/x-framework
Gitee地址：https://gitee.com/afrusrsc/x-framework</description>
    </item>
    <item>
      <title>ANSI转义序列</title>
      <link>https://afrusrsc.github.io/posts/program/misc/ansi_es/</link>
      <pubDate>Thu, 17 Apr 2025 20:28:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/ansi_es/</guid>
      <description>起因 近来，翻看gin源码时，无意间看到了green = &amp;quot;\033[97;42m&amp;quot;这种不明所以的代码，遂充满疑惑和好奇，于是就搜索探究了一番，这才知道这叫ANSI转义序列。
ANSI转义序列 简单说，就是一种标准化的终端控制序列，用于设置文本样式、颜色和背景等。先放个代码吧，以免不知所云。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import &amp;#34;fmt&amp;#34; func main() { for i := 0; i &amp;lt;= 10; i++ { fmt.Printf(&amp;#34;这是\033[%[1]dm&amp;lt;文本属性&amp;gt;%2[1]d\033[0m\n&amp;#34;, i) } s := []int{30, 31, 32, 33, 34, 35, 36, 37} for _, v := range s { fmt.Printf(&amp;#34;这是\033[%[1]dm&amp;lt;16色标准前景色&amp;gt;%2[1]d\033[0m\t\033[%[2]dm&amp;lt;16色亮前景色&amp;gt;%2[2]d\033[0m\n&amp;#34;, v, v+60) fmt.Printf(&amp;#34;这是\033[%[1]dm&amp;lt;16色标准背景色&amp;gt;%2[1]d\033[0m\t\033[%[2]dm&amp;lt;16色亮背景色&amp;gt;%2[2]d\033[0m\n&amp;#34;, v+10, v+70) } for i := 0; i &amp;lt; 256; i++ { fmt.</description>
    </item>
    <item>
      <title>使用函数索引优化特定查询</title>
      <link>https://afrusrsc.github.io/posts/db/functional_index/</link>
      <pubDate>Mon, 31 Mar 2025 17:04:49 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/functional_index/</guid>
      <description>问题 业务中遇到一个非常慢的查询，大致可以简化为以下SQL：
1 2 3 4 5 select * from t1 where c1 not in (...) and c2 not like &amp;#39;ABC%&amp;#39; and c3 in (...) and c4=-1 and c5&amp;gt;&amp;#39;2020-01-01,00:00:00&amp;#39; 其中：
有索引且命中的条件已简化掉了
c5为自定义格式的时间字符串
c2和c5有索引（普通索引），c1、c3和c4无索引
c3和c4为绑定条件
c1、c3和c4均为小值域列
分析 not in和not like会导致普通索引失效
为小值域列添加普通索引无法提供预期的效果
c3和c4为绑定条件，且条件固定不变，视为一体进行处理的话，可一定程度上扩充列的值域
c5虽然已有索引，但字符串比较操作还是太低效
解决方案 基于以上特殊的情形，搜索并尝试后发现，函数索引恰好可以达到预期，而使用的数据库又刚好支持（Oracel和PostgreSQL完全支持）。
添加索引 将c1的not in手动改为in查询，即可利用已有索引
c2的not like为后模糊查询，为其创建函数索引：
1 CREATE INDEX idx_t1_func_c2 ON t1(CASE WHEN c2 NOT LIKE &amp;#39;ABC%&amp;#39; THEN 1 ELSE 0 END); 为c3和c4的绑定条件创建函数索引： 1 CREATE INDEX idx_t1_func_c3c4 ON t1(CASE WHEN c3 in (.</description>
    </item>
    <item>
      <title>Debian安装Nvidia驱动</title>
      <link>https://afrusrsc.github.io/posts/os/debian_nvidia_driver/</link>
      <pubDate>Fri, 28 Mar 2025 23:00:49 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_nvidia_driver/</guid>
      <description>背景 系统安装完之后，默认的显卡驱动就能好好的工作，这点还是比较满意的，但用久了之后就会发现：看个高清视频啥的，CPU使用率就会蹭蹭上去，风扇呼呼的，总感觉N卡压根就没派上用场，所以就想换上Nvidia的闭源驱动看看效果。
安装驱动 准备工作 修改/etc/apt/sources.list，在main后加入contrib non-free，已有则跳过
禁用BIOS中的Secure Boot（！！！非常非常非常重要！！！）
由于我一开始没有禁用Secure Boot，反复安装并修改了许多配置，浪费时间不说，原始安装能否像以下步骤那样光滑已无法考证，除非把系统也重装了。
安装 更新包索引 1 sudo apt update 安装nvidia-detect 1 sudo apt install nvidia-detect 运行nvidia-detect，我的提示安装nvidia-driver即可
安装nvidia-driver
1 sudo apt install nvidia-driver 重启 双卡切换 Debian官方仓库中并没有nvidia-prime，所以使用envycontrol来实现。
下载envycontrol
安装
1 sudo apt install ./python3-envycontrol_3.5.1-1_all.deb 查看当前显卡模式sudo envycontrol --query
切换显卡
1 2 3 sudo envycontrol -s integrated # 切换到 集显 sudo envycontrol -s hybrid # 切换到 混合模式 sudo envycontrol -s nvidia # 切换到 N卡 重启 </description>
    </item>
    <item>
      <title>解决Debian安装巨慢的问题</title>
      <link>https://afrusrsc.github.io/posts/os/debian_install_slowly/</link>
      <pubDate>Wed, 26 Mar 2025 12:46:29 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_install_slowly/</guid>
      <description>问题及原因 Debian安装过程中会有一个阶段下载特别慢，即便是在安装过程中更换了国内源，仍然是巨慢无比，其根本原因是：更换的源并不包含安全更新部分。
当然，如果是网卡硬件不在默认的安装包驱动范围内，这种情况如果不在安装过程中安装相关驱动，压根也不会遇到下载慢的情况。如果使用的是最新的完整的DVD安装包，可能也不会遇到下载慢的情况。
解决方案 断网安装 最简单的办法就是断网安装，安装完之后再彻底更换源，最后再进行更新。这也是比较适合小白的方案。
至于断网的时机，可选择一开始就不联网，也可选择在下载慢的时候断网。建议小白选择后者。
安装过程中彻底更换源 原理 安装过程其实本身就是运行了一个简版的、定制的linux系统，只不过整个安装过程是在其中一个终端中（命令终端或图形终端）完成的，那么，安装过程中自然可以从别的终端界入并完成更换源，如此即可解决下载过程巨慢的问题，同时，系统安装好之后也无需再考虑更换源的问题。
具体操作 正常安装进行到选择国内源这一步
按Ctrl+Alt+F2或Ctrl+Alt+F3进入终端，会有提示，直接回车
注意：
Ctrl+Alt+F1为命令行安装终端，图形安装后台也使用该终端
Ctrl+Alt+F2和Ctrl+Alt+F3为暂未使用的命令行终端
Ctrl+Alt+F4为日志输出终端
Ctrl+Alt+F5为图形终端
执行如下命令 1 2 cat /target/etc/apt/sources.list # /target 是正在安装的新系统的挂载点 如果第1.步选择完国内源之后没有继续，这里空的，或者只有deb cdrom: [pebian GNu/Linux 12.9.0Bookworm- 0fficial amd64 NETINST with irmware 20250111-10:54]/ bookworm contrib main non-free-firmware；如果第1.步选择完国内源之后继续了，并且此时已经进入下载阶段了，则会看到类似以下的内容：
1 2 3 4 5 6 7 8 9 deb cdrom: [pebian GNu/Linux 12.9.0Bookworm- 0fficial amd64 NETINST with irmware 20250111-10:54]/ bookworm contrib main non-free-firmware deb http://mirrors.ustc.edu.cn/debian/ bookworm main non-free-firmware deb-src http://mirrors.</description>
    </item>
    <item>
      <title>PostgreSQL错误消息在win和linux上的差异</title>
      <link>https://afrusrsc.github.io/posts/db/pgsql_errmsg/</link>
      <pubDate>Sun, 23 Mar 2025 18:53:21 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/pgsql_errmsg/</guid>
      <description>意外的乱码 在尝试用go操作pg数据库时，由于连接参数的笔误，意外得到了一条包含乱码的错误消息，很显然是字符编码的问题：win系统默认是gbk编码，debian一般都默认utf8编码，做一下编码转换就可以了。
虽然很容易得到期望的结果，但还是引出了我很深的疑惑，因为这表现出了跨平台的不一致性，而这正是我一直都在设法避免的。
环境说明 pg是在win10上的服务，安装方法见PostgreSQL zip 安装
go开发是在wsl2的debian上进行
对比pg是在虚拟机的debian上，安装方法见Debian上安装PostgreSQL
排查 统一服务端编码 \l命令查看，win上的pg：Encoding是utf8，Collate和Ctype是cp932，即gbk；debian上的pg全部是utf8。
win上使用bin\initdb -D data -U postgres -A password --locale=zh_CN.UTF-8 -E utf8 -W重新安装，全部变为utf8。
此时进行测试，发现数据库连接成功之后的错误消息都是utf8的，但连接过程中的错误消息还是gbk。
修改系统默认编码 修改windows的区域设置，勾选Beta版：使用 Unicode UTF-8 提供全球语言支持(U)，重启系统。
此时进行测试，无论哪个环节，错误消息都是utf8。但这很可能会影响到其它程序，尤其是比较旧的程序或为了兼容旧系统的程序，因此，虽然可行，但还是不能采用。
其它对比 使用Lazarus自带组件，配合libpq.dll，进行测试，在不修改系统默认编码的情况下，与go的程序表现一样。
结论 目前，暂时无法通过修改配置使pg达到在windows和debian上的表现完全一致，但通过配置可以达到除连接成功前的错误消息编码外的一致性（至少暂未发现其它不一致处）。</description>
    </item>
    <item>
      <title>Go命令行加进度条</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_progressbar/</link>
      <pubDate>Fri, 21 Mar 2025 21:38:23 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_progressbar/</guid>
      <description>背景 文件去重功能做好了，但当文件比较多或文件比较大的时候，耗时也会比较久，想加个进度条来直观显示处理进度。
简单尝试了下github.com/schollz/progressbar这个库，完全能满足目前的需求。
使用 安装 1 go get -u github.com/schollz/progressbar/v3 # 注意带版本v3 一般使用 1 2 3 4 5 6 bar := progressbar.Default(n, &amp;#34;描述&amp;#34;) defer bar.Close() i := 0; i &amp;lt; n; i++ { bar.Add(1) // 工作代码 } n为总数，当n&amp;gt;0时，显示的是常规的进度条；当n=-1时，显示一个计数的进度。
还有其它比较细的控制及其它场景的使用，等有空了再细细研究下。</description>
    </item>
    <item>
      <title>用Go写一个文件去重工具</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_duplicate_cleaner/</link>
      <pubDate>Thu, 20 Mar 2025 16:19:57 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_duplicate_cleaner/</guid>
      <description>背景 想自己做这个功能，主要是因为Duplicate Cleaner这个商业软件只有几天的试用时间，而且文件去重这个逻辑也非常简单。
graph TD a[获取文件清单及大小] --&gt; b[按大小分组] --&gt; c[排除只有一个文件的组] --&gt; d[计算文件Hash值] --&gt; e[按Hash值分组] --&gt; f[排除只有一个文件的组] --&gt; g[选择需要删除的文件] --&gt; h[删除] 问题 计算文件Hash值，使用了hash.Hash接口，自然也用到了goroutine来缩短耗时，但是在测试的时候发现功能不太好用，时好时坏，准确说是有时能获取到重复列表，有时不能。
一点点排查，并且把代码段发给DeepSeek，最终确定是因为hash.Hash不是并发安全的。
修复方法很简单，只要在goroutine内实例化即可。修改之后达到了预期。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 func calcHashs(files []*FileInfo, hashName string) { g := sync.WaitGroup{} for _, file := range files { g.Add(1) go func(f *FileInfo) { defer g.Done() h := newHash(hashName) hashValue, err := calcHash(f.</description>
    </item>
    <item>
      <title>祼盘安装win10时调整EFI分区大小</title>
      <link>https://afrusrsc.github.io/posts/os/win_efi/</link>
      <pubDate>Tue, 04 Mar 2025 23:09:36 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/win_efi/</guid>
      <description>背景 鸟枪换大炮，把旧电脑的HDD升级成SSD了，是替换而非加装，所以需要重新安装系统。
依旧是安装windows+linux双系统，由于windows安装时会覆盖EFI分区，不想折腾的话就先装windows再装linux。
手里有windows的安装盘（原版iso，不带pe），安装时分区会自动分出来100M的EFI分区，但装双系统的话，很可能会不够用，但又不想再烧个pe，也不想装完系统再折腾分区。
尝试过程中发现可以进入命令提示符，于是网上搜索命令行分区工具，找到了DiskPart，尝试后可以完美实现需求。
解决方案 使用安装盘引导启动，进入到分区界面
取消安装，回到初始界面
按win+r会跳出一个新的界面，找到命令提示符并运行
输入diskpart回车，进入分区工具
list disk列出磁盘列表，记住需要分区的磁盘号
select disk n选择要分区的磁盘（n为上一步查出的磁盘号）
clean all删除所有分区（如果有的话）
convert gpt将磁盘转换为GPT分区列表（这年头就不要再用MBR了）
create partition efi size=512创建512M的EFI分区
exit退出分区工具
关闭命令提示符
继续安装
注意 该方案适用于win10，其它版本windows未测试！</description>
    </item>
    <item>
      <title>Gin功能列表</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_gin_funclist/</link>
      <pubDate>Sun, 23 Feb 2025 19:48:17 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_gin_funclist/</guid>
      <description>gin版本v1.10.0
包函数 方法 含义 说明 BasicAuth 创建一个HTTP基本认证（Basic HTTP Authorization）的中间件 底层调用BasicAuthForRealm BasicAuthForProxy 创建一个HTTP代理基本认证（Basic HTTP Proxy - Authorization）的中间件 BasicAuthForRealm 创建一个HTTP基本认证（Basic HTTP Authorization）的中间件 Bind 创建一个用于将请求中的数据绑定到指定的接口对象上的中间件 CreateTestContext 创建一个干净的Engine实例和一个与之关联的上下文对象用于测试 CreateTestContextOnly 在已有的Engine实例基础上创建一个独立的上下文用于测试 CustomRecovery 根据自定义的处理函数创建一个恢复中间件 底层调用CustomRecoveryWithWriter CustomRecoveryWithWriter 创建一个自定义的恢复中间件 Default 返回一个默认的Engine实例 默认含Logger和Recovery两个中间件 Dir 返回一个http.FileSystem接口的实现，该实现可被http.FileServer使用 DisableBindValidation 关闭默认的验证器 DisableConsoleColor 禁用控制台的颜色输出 EnableJsonDecoderDisallowUnknownFields 开启JSON解码器的DisallowUnknownFields功能 即遇到未知字段时就报错 EnableJsonDecoderUseNumber 开启JSON解码器的UseNumber功能 即将数字解码为json.Number类型，而不是float64，以在需要时精确地转换为整数或浮点数，从而避免精度丢失的问题 ErrorLogger 创建一个能够处理任意类型的错误的中间件 底层调用ErrorLoggerT ErrorLoggerT 创建一个能够处理指定类型的错误的中间件 ForceConsoleColor 强制在控制台输出带有颜色的内容 IsDebugging 判断当前框架是否处于调试模式 Logger 使用默认配置来创建一个日志中间件 底层调用LoggerWithConfig LoggerWithConfig 根据传入的配置来创建一个日志中间件 LoggerWithFormatter 根据指定的格式来创建一个日志中间件 底层调用LoggerWithConfig LoggerWithWriter 根据指定的输出目标创建一个日志中间件 底层调用LoggerWithConfig Mode 返回当前Gin框架的运行模式 有debug、release和test三种模式 New 返回一个全新的、没有任何中间件的Engine实例 Recovery 使用默认配置创建一个恢复中间件 底层调用RecoveryWithWriter RecoveryWithWriter 根据指定输出目标创建一个恢复中间件 底层调用CustomRecoveryWithWriter SetMode 设置gin框架的运行模式 WrapF 将标准的http.</description>
    </item>
    <item>
      <title>Lazarus在Linux上使用自定义动态库</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_linux/</link>
      <pubDate>Thu, 20 Feb 2025 21:51:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_linux/</guid>
      <description>前置知识 Windows上叫动态链接库，通常以*.dll形式命名；Linux上叫共享库，通常以lib*.so形式命名。（此处统一叫动态库）
Windows上dll路径的一般搜索顺序为：当前目录-&amp;gt;系统目录（如：C:\Windows\System32、C:\Windows\SysWOW64）-&amp;gt;Windows目录（如C:\Windows）-&amp;gt;PATH环境变量指定的目录。
Linux上so路径的一般搜索顺序为：编译时使用-rpath指定的路径-&amp;gt;LD_LIBRARY_PATH环境变量指定的路径-&amp;gt;系统默认库路径（如/lib、/usr/lib等）-&amp;gt;/etc/ld.so.conf和/etc/ld.so.conf.d/目录中配置的路径。
Lazarus/Delphi调用动态库有两种形式：静态调用和动态调用。
静态调用：主程序启动时加载，若动态库不存在或不匹配，则主程序抛异常并中止；主程序退出时卸载。
动态调用：主程序在需要时可随时加载，不需要时可随时卸载；动态库发生异常时，一般不会导致主程序中止。
使用动态库 动态库 动态库本身不需要特殊设置，正常编译、构建即可。（以名为dll的动态库为例，实际文件名为libdll.so）
主程序 编译时 静态调用方式 主程序直接编译会报错：Warning: linker:/usr/bin/ld: cannot find -ldll: No such file or directory，意思是链接器找不到名为dll的动态库文件。
解决方案 打开Project Options-&amp;gt;Compiler Options-&amp;gt;Compilation and Linking，勾选Pass options to linker with &amp;quot;-k&amp;quot;, delimiter is space，并在下方填入-L’动态库所在路径’，保存即可正常编译。
动态调用方式 主程序直接编译即可。
运行时 静态调用方式 此时编译后的程序并不能正常运行，会报错error while loading shared libraries: libdll.so: cannot open shared object file: No such file or directory，意思是加载动态库时找不到名为libdll.so的动态库文件。
这是前面提到的路径搜索顺序导致的，可将动态库放入相应的搜索路径下，也可使用-rpath指定路径。对于自定的动态库，建议使用-rpath指定路径，最好指定的路径为当前路径（与Windows保持一致）。
解决方案 打开Project Options-&amp;gt;Compiler Options-&amp;gt;Compilation and Linking，勾选Pass options to linker with &amp;quot;-k&amp;quot;, delimiter is space，并在下方填入-rpath=&#39;$ORIGIN&#39;（与之前的-L’动态库所在路径’之间要添加一个空格），保存并重新编译，即可正常运行。</description>
    </item>
    <item>
      <title>Git管理文件权限</title>
      <link>https://afrusrsc.github.io/posts/git/git_filemode/</link>
      <pubDate>Mon, 06 Jan 2025 22:28:42 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/git/git_filemode/</guid>
      <description>问题 由于经常会在windows和linux间交替写代码，因此也经常遇到使用git status查看有变更，使用git diff查看却没有看到差异的情况，原因有两种：
换行符的差异
文件权限的差异
换行符 默认情况下，windows使用crlf做为换行符，linux使用lf做为换行符，不进行配置和处理的话，自然会出现上述情况。
通常情况下，windows下的git进行如下配置：
1 2 git config --global core.safecrlf true git config --global core.autocrlf true linux下进行如下配置：
1 2 git config --global core.safecrlf true git config --global core.autocrlf input 如此，可解决绝大部分换行符问题，但对于需要精细化控制的场景显然不够，对此，可通过仓库的.gitattributes进行配置实现。
1 2 *.bat text eol=crlf *.sh text eol=lf 文件权限 在windows下，准确说是windows的文件系统下（如ntfs），git init一个仓库时，其filemode默认是false，即忽略文件权限的变化；而linux的文件系统下（如ext4），其filemode默认是true，即跟踪文件权限的变化。若是在两者之间交替工作，或是拷贝文件，则会出现文件权限的变化，此时若filemode=true则会出现上述问题。
一种是一刀切的方案，关闭filemode，即：
1 git config --local core.fileMode false 另一种精细化的方案，自然还是借助.gitattributes进行配置：
1 2 * -filemode *.sh filemode=755 </description>
    </item>
    <item>
      <title>Lazarus为应用添加版本信息</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_add_appver/</link>
      <pubDate>Tue, 12 Nov 2024 20:08:32 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_add_appver/</guid>
      <description>需求背景 在开发过程中，我们经常需要给应用添加版本信息，以便于追踪和管理应用的版本。
对于windows平台，直接在Project-&amp;gt;Project Options...对话框中的Project Options-&amp;gt;Version Info内进行设置即可。
但是，对于非windows平台，该方案便不可行。
而且，该方案还存在一个明显的问题：版本信息需要手动维护，未能与版本控制系统进行有效关联，很可能出现应用与源码不一致的情况。
解决思路 不使用Version Info功能，但取其把版本信息编译到可执行文件中的思想。
借鉴vscode的关于方案，版本信息中包含版本号和提交ID即可使应用和源码进行关联。
只要解决了在构建时动态获取版本信息的问题，便可以解决该问题。
解决方案 经多种尝试，最终确定的方案如下：
在源码中添加ver.inc文件，用于存储版本信息，在关于界面等进行展示。
编写脚本，获取版本信息并写入ver.inc文件。
打开Project-&amp;gt;Project Options...对话框，在Compiler Options-&amp;gt;Compiler Commands-&amp;gt;Execute before中添加脚本的路径。
正常构建应用即可。
如要跨平台，可分别编写对应平台的脚本并创建对应的Build mode，在Build modes中选择对应的模式，然后配置对应的脚本，正常构建即可。
附脚本 以使用git为例：
windows 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @echo off ::获取版本号 git describe --tags &amp;gt;nul 2&amp;gt;nul if errorlevel 1 ( set VER_NO=0.0 ) else ( for /f &amp;#34;delims=&amp;#34; %%a in (&amp;#39;git describe --tags&amp;#39;) do set VER_NO=%%a ) ::获取提交id git rev-parse HEAD &amp;gt;nul 2&amp;gt;nul if errorlevel 1 ( set COMMIT_ID=0000000000000000000000000000000000000000 ) else ( for /f &amp;#34;delims=&amp;#34; %%b in (&amp;#39;git rev-parse HEAD&amp;#39;) do set COMMIT_ID=%%b ) ::写入文件 echo const &amp;gt; ver.</description>
    </item>
    <item>
      <title>Go path包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_path/</link>
      <pubDate>Sun, 03 Nov 2024 22:12:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_path/</guid>
      <description>path包 path包仅适用于处理由正斜杠/分隔的路径，例如URL。
不能处理带有盘符或反斜杠\的Windows路径。
包函数 方法 含义 说明 Base 返回路径的最后一个元素 会先移除路径末尾的斜杠，空路径返回.，纯斜杠返回/ Clean 返回与输入路径等效的最短路径名 Dir 返回路径的目录部分 Ext 返回路径中以.分隔的文件扩展名 无.则返回空字符串 IsAbs 判断路径是否为绝对路径 只有以/开头的才是绝对路径 Join 将路径元素连接成路径 Match 判断路径是否匹配模式 Split 将路径拆分为目录和文件 filepath包 处理方式与目标操作系统定义的文件路径相兼容。 包函数 方法 含义 说明 Abs 返回绝对路径 Base 返回路径的最后一个元素 会先移除路径末尾的斜杠，空路径返回.，纯斜杠返回/ Clean 返回与输入路径等效的最短路径名 Dir 返回路径的目录部分 EvalSymlinks 返回路径中的符号链接所指向的真实路径 Ext 返回路径中以.分隔的文件扩展名 无.则返回空字符串 FromSlash 将路径中/的斜杠替换为特定操作系统的分隔符字符 linux中的\不会被替换 ToSlash 将路径中特定操作系统的分隔符字符替换为/ linux中的\不会被替换 Glob 返回与模式匹配的所有路径 IsAbs 判断路径是否为绝对路径 只有以/开头的才是绝对路径 IsLocal 判断路径是否为本地路径，即是否在当前路径下 仅词法分析，不考虑文件系统 Join 将路径元素连接成路径 Localize 将一个以/分隔的路径转换为一个操作系统路径 Match 判断路径是否匹配模式 Rel 返回从basepath到targpath的相对路径 Split 将路径拆分为目录和文件 SplitList 将一个包含多个以特定操作系统路径分隔符（如:或;）分隔的路径字符串拆分成单个的路径元素 分隔符取决于当前操作系统 VolumeName 返回路径的卷名 适用于Windows平台 Walk 遍历路径下的所有目录和文件并对其调用fn WalkDir 遍历路径下的所有目录和文件并对其调用fn 比Walk更优更高效 </description>
    </item>
    <item>
      <title>Go sync包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_sync/</link>
      <pubDate>Wed, 30 Oct 2024 22:45:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_sync/</guid>
      <description>Mutex 无需显式初始化，直接声明变量即可使用。
互斥锁，同一时刻只能有一个协程持有锁，不分读写。
方法 含义 说明 Lock 加锁 Unlock 解锁 未加锁时调用会导致panic TryLock 尝试加锁 立即返回，成功返回true，失败返回false RWMutex 无需显式初始化，直接声明变量即可使用。
读写锁，同一时刻可以有多个协程持有读锁，但是只能有一个协程持有写锁。
有写锁时，其他协程无法获取读锁和写锁。
有读锁时，其他协程可以获取读锁，但是无法获取写锁。
方法 含义 说明 RLock 加读锁 RUnlock 解读锁 未加读锁时调用会导致panic TryRLock 尝试加读锁 立即返回，成功返回true，失败返回false Lock 加写锁 Unlock 解写锁 未加写锁时调用会导致panic TryLock 尝试加写锁 立即返回，成功返回true，失败返回false Map 无需显式初始化，直接声明变量即可使用。 方法 含义 说明 Store 存储键值对 Load 加载键对应的值 Delete 删除键对应的值 Clear 清除所有键值对 Swap 交换指定键对应的旧值和新值，并返回旧值和操作之前键是否存在 LoadAndDelete 加载键对应的值并删除键值对 LoadOrStore 加载键对应的值，如果键不存在则存储键值对 CompareAndDelete 比较键对应的值是否等于指定值，如果相等则删除键值对 CompareAndSwap 比较键对应的值是否等于指定值，如果相等则替换键对应的值 Range 遍历键值对 传入函数返回false时停止遍历 WaitGroup 无需显式初始化，直接声明变量即可使用。 方法 含义 说明 Add 添加计数器 启动协程前调用，传入协程数量 Done 减少计数器 协程执行完毕后调用 Wait 等待计数器变为0 主协程调用，等待所有协程执行完毕 Once 无需显式初始化，直接声明变量即可使用。 方法 含义 说明 Do 执行函数 传入函数，只会执行一次 Pool 需显式初始化，为New指定创建对象的函数。</description>
    </item>
    <item>
      <title>Go flag包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_flag/</link>
      <pubDate>Sun, 27 Oct 2024 11:03:21 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_flag/</guid>
      <description>简介 flag用于实现命令行标志的解析。
一般流程 定义命令行标志
解析命令行标志
获取解析标志外的命令行参数
使用解析后的标志和参数
支持的标志格式 -flag：短标志
--flag：长标志
-flag=value：短标志和值
-flag value：短标志和值，仅限非布尔标志
解析规则 标志解析会在遇到第一个非标志参数（-被视为非标志参数）或者终止符--之后停止。
1 0 t f T F true false TRUE FALSE True False均可被解析为布尔值。
标志解析的返回值均为对应类型的指针。
包函数 方法 含义 说明 NewFlagSet 创建一个新的标志集 通常用于创建子命令的标志集 Lookup 查找标志集中的标志 Set 设置标志集中的标志的值 NArg 返回实际传入的命令行参数的数量 调用Parse之后生效，不包含命令行标志 Arg 返回第i个命令行参数 从0开始 NFlag 返回实际传入的命令行标志的数量 调用Parse之后生效 Parsed 返回标志是否已被解析 Parse 解析命令行标志 Bool 定义一个布尔型标志 BoolVar 定义一个布尔型标志并绑定到指定变量 Int 定义一个整数标志 IntVar 定义一个整数标志并绑定到指定变量 Int64 定义一个64位整数标志 Int64Var 定义一个64位整数标志并绑定到指定变量 Uint 定义一个无符号整数标志 UintVar 定义一个无符号整数标志并绑定到指定变量 Uint64 定义一个64位无符号整数标志 Uint64Var 定义一个64位无符号整数标志并绑定到指定变量 Float64 定义一个64位浮点数标志 Float64Var 定义一个64位浮点数标志并绑定到指定变量 Duration 定义一个时间间隔标志 DurationVar 定义一个时间间隔标志并绑定到指定变量 String 定义一个字符串标志 StringVar 定义一个字符串标志并绑定到指定变量 Var 定义一个自定义类型标志并绑定到对应变量 自定义类型需要实现flag.</description>
    </item>
    <item>
      <title>Go log包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_log/</link>
      <pubDate>Sat, 26 Oct 2024 19:43:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_log/</guid>
      <description>Logger 方法 含义 说明 Fatal Fatalf Fatalln 记录一条严重错误后执行os.Exit(1) Panic Panicf Panicln 记录一条严重错误后引发panic Print Printf Println 记录一条普通信息 Flags 返回当前Logger的输出标志 SetFlags 设置当前Logger的输出标志 Prefix 返回当前Logger的前缀 SetPrefix 设置当前Logger的前缀 Writer 返回当前Logger的输出目标 SetOutput 设置当前Logger的输出目标 Output 直接输出日志 更接近底层，可指定调用等级 包函数 方法 含义 说明 Default 返回默认的Logger New 创建一个新的Logger Fatal Fatalf Fatalln 记录一条严重错误后执行os.Exit(1) 使用默认的Logger Panic Panicf Panicln 记录一条严重错误后引发panic 使用默认的Logger Print Printf Println 记录一条普通信息 使用默认的Logger Flags 返回默认Logger的输出标志 SetFlags 设置默认Logger的输出标志 Prefix 返回默认Logger的前缀 SetPrefix 设置默认Logger的前缀 Writer 返回默认Logger的输出目标 SetOutput 设置默认Logger的输出目标 Output 使用默认的Logger直接输出日志 </description>
    </item>
    <item>
      <title>Go bufio包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_bufio/</link>
      <pubDate>Fri, 25 Oct 2024 21:23:15 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_bufio/</guid>
      <description>Reader 方法 含义 说明 Buffered 返回从当前缓冲区内可以读取的字节数量 Discard 跳过接下来的n字节 Peek 查看接下来的n字节 不移动读指针 Read 从bufio.Reader中读取内容到字节切片 ReadByte 从bufio.Reader中读取一个字节 ReadBytes 从bufio.Reader中读取数据，直到遇到指定的分隔符delim 包含分隔符 ReadLine 从bufio.Reader中读取一行数据 不包含换行符，建议使用Reader.ReadBytes(&#39;\n&#39;)、Reader.ReadString(&#39;\n&#39;)或者Scanner ReadRune 从bufio.Reader中读取一个rune ReadSlice 从bufio.Reader中读取数据，直到遇到指定的分隔符delim 包含分隔符，建议使用Reader.ReadBytes或ReadString ReadString 从bufio.Reader中读取数据，直到遇到指定的分隔符delim 包含分隔符 Reset 重置bufio.Reader Size 返回底层缓冲区的大小 UnreadByte 回退最后读取的一个字节 UnreadRune 回退最后读取的一个rune WriteTo 将数据从bufio.Reader写入到io.Writer Writer 方法 含义 说明 Available 返回当前缓冲区中可以写入的字节数量 AvailableBuffer 返回一个空的缓冲区，容量是Available返回的值 Buffered 返回当前缓冲区中已经写入的字节数量 Flush 将缓冲区中的数据写入到io.Writer ReadFrom 从io.Reader读取数据到bufio.Writer Reset 重置bufio.Writer Size 返回底层缓冲区的大小 Write 将数据写入bufio.Writer WriteByte 将一个字节写入bufio.Writer WriteRune 将一个rune写入bufio.Writer WriteString 将一个字符串写入bufio.Writer Scanner 方法 含义 说明 Buffer 设置在扫描时要使用的初始缓冲区，及在扫描过程中可能分配的最大缓冲区大小 Bytes 返回由最近一次调用Scanner.</description>
    </item>
    <item>
      <title>Go io/fs包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_io_fs/</link>
      <pubDate>Thu, 24 Oct 2024 22:02:04 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_io_fs/</guid>
      <description>包函数 方法 含义 说明 FileInfoToDirEntry 将fs.FileInfo转换为fs.DirEntry FormatDirEntry 将fs.DirEntry格式化为字符串 FormatFileInfo 将fs.FileInfo格式化为字符串 Glob 获取指定模式的文件列表 ReadDir 读取指定目录中的内容，返回DirEntry切片 ReadFile 读取指定文件的内容，返回字节切片 Stat 获取文件信息，返回FileInfo Sub 获取指定目录的子目录 ValidPath 验证路径是否合法 WalkDir 遍历目录 </description>
    </item>
    <item>
      <title>Go io包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_io/</link>
      <pubDate>Thu, 24 Oct 2024 20:05:22 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_io/</guid>
      <description>OffsetWriter OffsetWriter是io.Writer的一个实现，它可以将写入的数据偏移指定的字节数后写入到另一个io.Writer中。
方法 含义 说明 Write 将数据写入io.Writer WriteAt 将数据写入io.Writer，从指定位置开始 Seek 设置指针位置 SectionReader SectionReader是io.Reader的一个实现，它可以从另一个io.Reader中读取指定范围的数据。
方法 含义 说明 Outer 获取底层的ReaderAt、偏移量和长度 Read 从io.Reader读取内容到字节切片 读取后指针位置会移动 ReadAt 从io.Reader读取内容到字节切片，从指定位置开始 读取后指针位置不会移动 Seek 设置指针位置 Size 返回区间的大小 PipeReader PipeReader是io.Reader的一个实现，它可以从另一个io.Reader中读取数据。
方法 含义 说明 Read 从管道读取内容到字节切片 Close 关闭PipeReader CloseWithError 关闭PipeReader并返回错误 PipeWriter PipeWriter是io.Writer的一个实现，它可以将数据写入到另一个io.Reader中。
方法 含义 说明 Write 将数据写入io.Writer Close 关闭PipeWriter CloseWithError 关闭PipeWriter并返回错误 包函数 方法 含义 说明 Copy 将数据从io.Reader复制到io.Writer CopyBuffer 将数据从io.Reader复制到io.Writer，使用指定的缓冲区 CopyN 将数据从io.Reader复制到io.Writer，最多复制n个字节 LimitReader 从io.Reader创建一个限制的读取范围的io.Reader MultiReader 将多个io.Reader组合成一个io.Reader 先后读取，类似内容拼接 MultiWriter 将多个io.Writer组合成一个io.Writer 同时写入 NewOffsetWriter 从io.Writer创建一个带有偏移量的io.Writer NewSectionReader 从io.</description>
    </item>
    <item>
      <title>Go os包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_os/</link>
      <pubDate>Wed, 23 Oct 2024 23:49:39 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_os/</guid>
      <description>File 方法 含义 说明 Close 关闭文件 Chdir 改变当前工作目录 *File必须为目录 Chmod 修改文件权限 Chown 修改文件所有者和组 Fd 返回文件描述符 Name 返回文件名 Read 从文件读取内容到字节切片 读取后指针位置会移动 ReadAt 从文件读取内容到字节切片，从指定位置开始 读取后指针位置不会移动 ReadDir 获取目录下的列表，返回DirEntry切片 *File必须为目录 Readdir 获取目录下的列表，返回FileInfo切片 *File必须为目录 Readdirnames 获取指定目录下的文件名 *File必须为目录 ReadFrom 从io.Reader读取内容到文件 读取后指针位置会移动，本质上是写文件 Seek 设置指针位置 SetDeadline 设置文件I/O超时时间 只有部分文件类型支持 SetReadDeadline 设置文件读取超时时间 只有部分文件类型支持 SetWriteDeadline 设置文件写入超时时间 只有部分文件类型支持 Stat 获取文件信息，返回FileInfo Sync 将文件内容同步到磁盘 SyscallConn 获取与文件操作相关的系统调用连接 Truncate 截断文件 Write 将字节切片中的数据写入文件 写入后指针位置会移动 WriteAt 将字节切片中的数据写入文件，从指定位置开始 写入后指针位置不会移动 WriteString 将字符串写入文件 写入后指针位置会移动 WriteTo 将数据写入io.Writer 写入后指针位置会移动，本质上是读文件 FileInfo 方法 含义 说明 IsDir 返回文件是否是目录 ModTime 返回文件的修改时间 Name 返回文件名 Size 返回文件的大小 Sys 返回文件的系统信息 FileMode 方法 含义 说明 IsDir 返回文件是否是目录 IsRegular 返回文件是否是普通文件 Perm 返回文件的权限 String 返回文件的字符串表示形式 Type 返回文件的类型 Process 方法 含义 说明 Kill 杀掉进程 Release 释放与Process对象相关的资源 Signal 向进程发送信号 Wait 等待进程退出 ProcessState 用于获取已结束进程状态信息。</description>
    </item>
    <item>
      <title>Go time包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_time/</link>
      <pubDate>Tue, 22 Oct 2024 22:23:20 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_time/</guid>
      <description>Time 方法 说明 Add 在该时间上加个时间得到新时间 AddDate 在该时间上加个日期得到新时间 After 判断该时间是否在另一个时间之后 AppendFormat 将该时间格式化为字符串并追加到字节切片中 Before 判断该时间是否在另一个时间之前 Clock 返回当前时间的时、分、秒 Compare 和另一个时间比较大小，返回-1、0、1 Date 返回该时间的年、月、日 Day 返回该时间的日 Equal 判断该时间是否和另一个时间相等 Format 将该时间格式化为字符串 GoString 返回该时间的字符串表示形式 GobDecode 从字节切片中解码该时间 GobEncode 将该时间编码为字节切片 Hour 返回该时间的小时 ISOWeek 返回该时间所在的ISO周 In 返回该时间在指定时区对应的时间 IsDST 判断该时间是否在夏令时 IsZero 判断一个时间值是否为零值 Local 返回该时间在本地时区对应的时间 Location 返回该时间所在的时区 MarshalBinary 将该时间序列化为二进制格式 MarshalJSON 将该时间序列化为JSON格式 MarshalText 将该时间序列化为文本格式 Minute 返回该时间的分钟 Month 返回该时间的月份 Nanosecond 返回该时间的纳秒 Round 将该时间舍入到指定的时间单位 Second 返回该时间的秒 String 返回该时间的字符串表示形式 Sub 在该时间上减去另一个时间得到新时间 Time 返回该时间的时间戳 Truncate 将该时间截断到指定的时间单位 UTC 返回该时间在UTC时区对应的时间 Unix 返回该时间的Unix时间戳，单位：秒 UnixMicro 返回该时间的Unix时间戳，单位：微秒 UnixMilli 返回该时间的Unix时间戳，单位：毫秒 UnixNano 返回该时间的Unix时间戳，单位：纳秒 UnmarshalBinary 从二进制格式反序列化该时间 UnmarshalJSON 从JSON格式反序列化该时间 UnmarshalText 从文本格式反序列化该时间 Weekday 返回该时间所在的星期几 Year 返回该时间的年份 YearDay 返回该时间所在的年中的第几天 Zone 返回该时间所在的时区名称和偏移量（单位：秒） ZoneBounds 返回该时间所在的时区的夏令时开始和结束时间 包函数 函数名 含义 说明 Now 返回当前时间 Date 构造指定的时间 FixedZone 构造一个指定偏移时的时区 LoadLocation 加载时区信息 LoadLocationFromTZData 从TZData文件加载时区信息 Parse 解析时间字符串 ParseDuration 解析时间间隔字符串 ParseInLocation 在指定时区解析时间字符串 Since 计算指定时间与现在的间隔 等同于time.</description>
    </item>
    <item>
      <title>Go strings包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_strings/</link>
      <pubDate>Sun, 20 Oct 2024 13:36:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_strings/</guid>
      <description>Builder 方法 说明 String 返回最终构造的字符串 Len 返回缓冲区（字节切片）的长度 Cap 返回缓冲区（字节切片）的容量 Reset 重置Builder Grow 显式扩容 Write 向Builder追加字节切片 WriteByte 向Builder追加字节 WriteRune 向Builder追加Unicode码点 WriteString 向Builder追加字符串 包函数 函数名 含义 说明 Clone 返回字符串的副本 Compare 比较两个字符串的大小，返回-1、0、1 Contains 判断一个字符串是否包含另一个字符串 类似于pascal的Pos()&amp;gt;0 ContainsAny 判断一个字符串是否包含另一个字符串中的任意一个字符 ContainsRune 判断一个字符串是否包含一个Unicode码点 ContainsFunc 判断一个字符串是否包含满足特定条件的字符 Count 统计一个字符串中某个子字符串出现的次数 Cut 将一个字符串按照指定的分隔符进行切割 只进行一次切割 CutPrefix 判断一个字符串是否以指定的前缀开始，是则进行切割 CutSuffix 判断一个字符串是否以指定的后缀结束，是则进行切割 EqualFold 判断两个字符串是否相等，忽略大小写 类似于pascal的SameText() Fields 用连续的空白字符对字符串进行分割 FieldsFunc 用指定的函数对字符串进行分割 HasPrefix 判断一个字符串是否以指定的前缀开始 HasSuffix 判断一个字符串是否以指定的后缀结束 Index 返回一个字符串中某个子字符串第一次出现的位置（从0开始，未找到返回-1） 类似于pascal的Pos() IndexAny 返回一个字符串中任意一个字符第一次出现的位置（从0开始，未找到返回-1） IndexByte 返回一个字符串中某个字节第一次出现的位置（从0开始，未找到返回-1） IndexRune 返回一个字符串中某个Unicode码点第一次出现的位置（从0开始，未找到返回-1） IndexFunc 返回一个字符串中满足特定条件的字符第一次出现的位置（从0开始，未找到返回-1） LastIndex 返回一个字符串中某个子字符串最后一次出现的位置（从0开始，未找到返回-1） LastIndexAny 返回一个字符串中任意一个字符最后一次出现的位置（从0开始，未找到返回-1） LastIndexByte 返回一个字符串中某个字节最后一次出现的位置（从0开始，未找到返回-1） LastIndexFunc 返回一个字符串中满足特定条件的字符最后一次出现的位置（从0开始，未找到返回-1） Join 将一个字符串切片用指定的字符串连接成一个新字符串 Map 将一个字符串中的每个字符都映射成另一个字符 Repeat 将一个字符串重复指定的次数 Replace 将一个字符串中的某个子字符串替换成另一个字符串 ReplaceAll 将一个字符串中的所有子字符串替换成另一个字符串 Split 用指定的字符对字符串进行分割 SplitN 用指定的字符对字符串进行分割，最多分割n次 SplitAfter 用指定的字符对字符串进行分割，保留分隔符 SplitAfterN 用指定的字符对字符串进行分割，保留分隔符，最多分割n次 ToLower 将一个字符串中的所有字符都转换成小写 ToUpper 将一个字符串中的所有字符都转换成大写 ToTitle 将其中所有的Unicode字母转换为它们对应的Unicode标题大小写 ToLowerSpecial 将字符串中的字符按照特定规则转换为小写形式 ToUpperSpecial 将字符串中的字符按照特定规则转换为大写形式 ToTitleSpecial 将字符串中的字符按照特定规则转换为标题形式 ToValidUTF8 将一个字符串中的无效UTF-8字符替换成Unicode替换字符 Trim 去除字符串两端的指定字符 连续的指定字符都会被去除 TrimLeft 去除字符串左边的指定字符 连续的指定字符都会被去除 TrimRight 去除字符串右边的指定字符 连续的指定字符都会被去除 TrimFunc 去除字符串两端满足特定条件的字符 连续的满足条件的字符都会被去除 TrimLeftFunc 去除字符串左边满足特定条件的字符 连续的满足条件的字符都会被去除 TrimRightFunc 去除字符串右边满足特定条件的字符 连续的满足条件的字符都会被去除 TrimSpace 去除字符串两端的空白字符 连续的空白都会被去除 TrimPrefix 去除字符串前缀 TrimSuffix 去除字符串后缀 </description>
    </item>
    <item>
      <title>Go builtin包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_builtin/</link>
      <pubDate>Fri, 18 Oct 2024 13:35:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_builtin/</guid>
      <description>说明 预声明标识符是指在代码中可以直接使用的标识符，但它们并没有在任何包中声明。这些标识符通常是由Go语言的标准库或编译器提供的，它们在代码中可以直接使用，而不需要导入任何包。
builtin包的作用是为这些预声明标识符提供文档说明，以便开发人员了解它们的用途和用法。通过查看builtin包的文档，开发人员可以了解到哪些预声明标识符是可用的，以及它们的作用和使用方法。
内置函数 函数名 含义 说明 append 将元素追加到切片末尾 容量足够时，不会重新分配内存；容量不足时，会重新分配内存 copy 将切片中的元素复制到另一个切片中，返回复制的元素数量 delete 从映射中删除指定的键值对 len 返回切片、映射、通道或字符串的长度 cap 返回切片、映射或通道的容量 make 为切片、映射或通道分配内存，并返回该类型的零值 max 返回一组可比较类型中的最大值 如果是浮点型且参数中有NaN，则返回NaN min 返回一组可比较类型中的最小值 如果是浮点型且参数中有NaN，则返回NaN new 为指定类型的新值分配内存，并返回指向该类型的零值的指针 complex 创建一个复数 real 返回复数的实部 imag 返回复数的虚部 clear 清除切片、映射中的所有元素 close 关闭通道 只能由发送方调用 panic 停止当前协程的正常执行，引发一个运行时错误，导致程序回溯调用栈 recover 从panic中恢复，并返回panic的值 只能在defer语句中使用 print println 对传入的参数进行格式化，然后将格式化后的结果输出到标准错误 用于引导程序和调试，未来其可能会被修改或移除，不应该在生产环境中使用 </description>
    </item>
    <item>
      <title>Go strconv包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_strconv/</link>
      <pubDate>Thu, 17 Oct 2024 13:14:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_strconv/</guid>
      <description>Go是强数据类型语言，且不支持隐式类型转换，strconv包是用于字符串和基本数据类型之间转换的。
其它类型转字符串 函数名 含义 说明 FormatBool 布尔型转字符串 FormatInt FormatUint 整形转字符串 需指定进制 FormatFloat 浮点型转字符串 需指定格式、精度、位宽（32/64） FormatComplex 复数型转字符串 需指定格式、精度、位宽（64/128） Itoa 整形转字符串 固定十进制 字符串转其它类型 函数名 含义 说明 ParseBool 字符串转布尔型 1 t T true TRUE True为真，0 f F false FALSE False为假 ParseInt ParseUint 字符串转整形 需指定字符串的进制及转换后的位宽 ParseFloat 字符串转浮点型 需指定转换后的位宽 ParseComplex 字符串转复数 需指定转换后的位宽 Atoi 字符串转整形 固定十进制 其它 函数名 含义 说明 CanBackquote 判断一个字符串是否可以不被修改地放在反引号中 不能包含换行符，除了制表符之外，不能包含其他控制字符 IsGraphic 判断一个Unicode字符是否是图形字符 IsPrint的超集 IsPrint 判断一个Unicode字符是否是可打印字符 IsGraphic的子集 Quote 返回一个用双引号包裹的Go语言字符串字面量 控制字符和由IsPrint定义的不可打印字符会进行转义 QuoteToASCII 返回一个用双引号包裹的Go语言字符串字面量 非ASCII字符以及由IsPrint定义的不可打印字符会进行转义 QuoteToGraphic 返回一个用双引号包裹的Go语言字符串字面量 由IsGraphic定义的非图形字符会进行转义 QuoteRune 返回一个单引号包裹的Go字符字面量 控制字符和由IsPrint定义的不可打印字符会进行转义 QuoteRuneToASCII 返回一个单引号包裹的Go字符字面量 非ASCII字符以及由IsPrint定义的不可打印字符会进行转义 QuoteRuneToGraphic 返回一个单引号包裹的Go字符字面量 由IsGraphic定义的非图形字符会进行转义 AppendBool 布尔型转字符串，结果追加到指定的字节切片，并返回新的字节切片 AppendInt AppendUint 整型转字符串，结果追加到指定的字节切片，并返回新的字节切片 需指定进制 AppendFloat 浮点型转字符串，结果追加到指定的字节切片，并返回新的字节切片 需指定格式、精度、位宽（32/64） AppendQuote Quote处理后的结果追加到指定的字节切片，并返回新的字节切片 AppendQuoteToASCII QuoteToASCII处理后的结果追加到指定的字节切片，并返回新的字节切片 AppendQuoteToGraphic QuoteToGraphic处理后的结果追加到指定的字节切片，并返回新的字节切片 AppendQuoteRune QuoteRune处理后的结果追加到指定的字节切片，并返回新的字节切片 AppendQuoteRuneToASCII QuoteRuneToASCII处理后的结果追加到指定的字节切片，并返回新的字节切片 AppendQuoteRuneToGraphic QuoteRuneToGraphic处理后的结果追加到指定的字节切片，并返回新的字节切片 </description>
    </item>
    <item>
      <title>Go fmt包</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_fmt/</link>
      <pubDate>Wed, 16 Oct 2024 20:51:40 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_fmt/</guid>
      <description>fmt包提供了格式化输入、输出的功能。
格式化输出 函数名 说明 Print 以默认格式进行格式化，格式化结果输出到os.Stdout Printf 以指定格式进行格式化，格式化结果输出到os.Stdout Println 以默认格式进行格式化，并在末尾添加换行符，格式化结果输出到os.Stdout Fprint 以默认格式进行格式化，格式化结果输出到指定的io.Writer接口 Fprintf 以指定格式进行格式化，格式化结果输出到指定的io.Writer接口 Fprintln 以默认格式进行格式化，并在末尾添加换行符，格式化结果输出到指定的io.Writer接口 Sprint 以默认格式进行格式化，格式化结果以字符串形式返回 Sprintf 以指定格式进行格式化，格式化结果以字符串形式返回 Sprintln 以默认格式进行格式化，并在末尾添加换行符，格式化结果以字符串形式返回 具体格式化规则详见Go 格式化。
格式化输入 函数名 说明 Scan 按默认格式从os.Stdin进行扫描，空格用于分隔数据，换行符按空格处理，扫描结果存入对应的变量 Scanf 按指定格式从os.Stdin进行扫描，扫描结果存入对应的变量 Scanln 按默认格式从os.Stdin进行扫描，空格用于分隔数据，遇换行符时停止扫描，扫描结果存入对应的变量 Fscan 按默认格式从指定的io.Reader接口进行扫描，空格用于分隔数据，换行符按空格处理，扫描结果存入对应的变量 Fscanf 按指定格式从指定的io.Reader接口进行扫描，扫描结果存入对应的变量 Fscanln 按默认格式从指定的io.Reader接口进行扫描，空格用于分隔数据，遇换行符时停止扫描，扫描结果存入对应的变量 Sscan 按默认格式从指定的字符串中进行扫描，空格用于分隔数据，换行符按空格处理，扫描结果存入对应的变量 Sscanf 按指定格式从指定的字符串中进行扫描，扫描结果存入对应的变量 Sscanln 按默认格式从指定的字符串中进行扫描，空格用于分隔数据，遇换行符时停止扫描，扫描结果存入对应的变量 注意：变量前必须要带上&amp;amp;才能成功接收扫描到的数据!
其它 函数名 说明 Append 以默认格式进行格式化，格式化结果追加到指定的字节切片，并返回新的字节切片 Appendf 以指定格式进行格式化，格式化结果追加到指定的字节切片，并返回新的字节切片 Appendln 以默认格式进行格式化，并在末尾添加换行符，格式化结果追加到指定的字节切片，并返回新的字节切片 Errorf 以指定格式进行格式化，格式化结果转为error接口并返回 </description>
    </item>
    <item>
      <title>Go 格式化</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_learn_format/</link>
      <pubDate>Tue, 15 Oct 2024 21:34:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_learn_format/</guid>
      <description>格式化动词 常规 格式化动词 含义 %v 默认格式 %T 数据的类型 %% %本身 使用%v时不同类型默认对应的格式化动词如下：
数据类型 格式化动词 说明 bool %t int int8 等 %d uint uint8 等 %d %#v时对应%#x float32 complex64 等 %g string %s chan %p pointer %p 布尔型 格式化动词 含义 示例 结果 %t true或false 1&amp;gt;2 false 整型 格式化动词 含义 示例 结果 %b 二进制 90 1011010 %c 对应的 Unicode 字符 90 Z %d 十进制 90 90 %o 八进制 90 132 %O 带0o前缀的八进制 90 0o132 %q 用单引号包括的对应的 Unicode 字符，并且特殊字符会进行转义 90 &amp;lsquo;Z&amp;rsquo; %x 小写的十六进制 90 5a %X 大写的十六进制 90 5A %U Unicode 格式：U+1234；与U+%04X相同 90 U+005A 浮点型和复数型 格式化动词 含义 示例 结果 %b 十进制无小数的科学计数法表示浮点数，指数部分是2的幂次方 3.</description>
    </item>
    <item>
      <title>Lazarus获取纳秒级时间</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_nanosecond/</link>
      <pubDate>Sat, 31 Aug 2024 21:25:25 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_nanosecond/</guid>
      <description>背景 最近在改写一个加密算法，算法不可避免用到了随机数，但是Lazarus默认的随机种子初始化函数Randomize是依赖于GetTickCount的，而GetTickCount的时间精度是毫秒级的（windows平台实际大约是16ms级），日常是够用的，但在加密算法中就显得太过粗糙了。
关于GetTickCount的时间精度，详见Delphi中的延时和在Lazarus中分析Windows和Linux的延时。
在以上文章中有提到，windows平台下可以使用QueryPerformanceFrequency和QueryPerformanceCounter获取高精度的时间，事实上是微秒级的时间（本机实测是0.1微秒级，即百纳秒）。
考虑跨平台的话，如何获取非windows平台的高精度时间就变得很有必要了。
解决方案 搜索资料及查看Lazarus源码，找到了fpgettimeofday和clock_gettime两个函数。
fpgettimeofday fpgettimeofday实际上就是UNIX平台的gettimeofday，只引用unix单元即可。其定义如下：
1 function fpgettimeofday(tp: ptimeval;tzp:ptimezone):cint; external name &amp;#39;FPC_SYSC_GETTIMEOFDAY&amp;#39;; 其参数ptimeval的定义如下：
1 2 3 4 5 6 7 8 9 10 timeval = record tv_sec:time_t; {$ifdef CPUSPARC64} tv_usec:cint; {$else CPUSPARC64} tv_usec:clong; {$endif CPUSPARC64} end; ptimeval = ^timeval; TTimeVal = timeval; 另外，unix平台的GetTickCount64用到了fpgettimeofday：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function GetTickCount64: QWord; var tp: TTimeVal; {$IFDEF HAVECLOCKGETTIME} ts: TTimeSpec; {$ENDIF} begin {$IFDEF HAVECLOCKGETTIME} if clock_gettime(CLOCK_MONOTONIC, @ts)=0 then begin Result := (Int64(ts.</description>
    </item>
    <item>
      <title>修改jar包内配置并重新构建</title>
      <link>https://afrusrsc.github.io/posts/program/misc/java_jar_rebuild/</link>
      <pubDate>Fri, 16 Aug 2024 21:33:30 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/java_jar_rebuild/</guid>
      <description>起因 公司一个小项目，java组封了一个jar包，主要是封一个http的服务，提供几个接口，包含加密/解密和签名/验签的中间件，具体业务在数据库的存储过程里完成。
由于没怎么接触过java，所以对如何修改配置完全不清楚，问人家，结果得到一句充满不屑和鄙视的回复——用解压工具打开直接改就行。
呃~某些java仔还是一如既往的让人无力吐槽。算了，还是自己想办法吧。
方法 网上搜了一下，然后试了试，嗯，可以了！
列出jar包里的文件和文件夹，找到需要修改的文件 1 jar tf test.jar 提取文件并编辑保存 1 jar xf test.jar BOOT-INF/classes/application.yml 更新jar包 1 jar uf test.jar BOOT-INF/classes/application.yml 网上也有介绍与那个java仔说的方法类似的，不过有声明，说是可能会损坏jar包，所以并未尝试。
题外话 java的生态确实很强，准确说是spring家族</description>
    </item>
    <item>
      <title>Lazarus跨平台方案总结</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_cross_platform/</link>
      <pubDate>Wed, 07 Aug 2024 21:57:25 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_cross_platform/</guid>
      <description>前言 对于Lazarus跨平台开发接触有一段时间了，虽然踩了不坑，但仍觉得已踩过的坑不过是九牛一毛。不过还是应该记录一下，以备忘，以后又踩新坑了再补充吧。
环境 项目 Linux Windows 操作系统 Debian 12 Win10 CPU架构 x86_64 x86_64 桌面环境 xfce 4 / 输入法 fcitx 5 系统自带 GUI环境 gtk2/qt5/qt6 win32/gtk2/qt5 目标程序 64位 32位/64位 Qt6Pas1.dll未能得到，win + qt6未测试
linux 64位系统未能设置好32位运行环境，未测试
qt5未能得到64位的dll，未测试
坑 windows Application.MessageBox按钮文字英文，无法直接本地化，Windows.MessageBoxAPI可以
TPageControl组件自带的关闭按钮在win32下不可用，gtk2和qt5正常
qt5下，某些组件会有很诡异的现象
gtk2下，64位目标程序运行时报错
gtk2下，默认界面很丑，需要用皮肤
带GUI的dll机制和行为与delphi不一致
使用ShareMem单元需要自行构建fpcmemdll.dll
linux gtk2版IDE无法输入中文；目标程序可正常输入（SynEdit不可以，必须修改相关源码）
qt5和qt6版IDE可输入中文，但部分字无法输入，也无法正常输入多于两个字的词组；目标程序存在相同的问题
qt5版IDE及目标程序所需要的libqt5pas一定要和编译用的IDE版本匹配
总结 基于有限的测试经验，得出了以下结论：
虽然Lazarus是跨平台的，并且号称一次编写，到处编译，但GUI的跨平台表现是不完全一致的，需要分别处理
整体上，gtk2兼容性和稳定性优于qt
最佳的开发方案：在windows系统上开发，然后交叉编译或在目标环境下进行编译（若使用了SynEdit，必须修改相关源码）
保持跨平台一致性的方案：windows平台采用32位的gtk2+皮肤，linux平台采用gtk2+皮肤</description>
    </item>
    <item>
      <title>在Debian上使用Lazarus的Qt5问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_qt5/</link>
      <pubDate>Sun, 04 Aug 2024 16:37:12 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_qt5/</guid>
      <description>事件 环境 项目 值 操作系统 Debian 12 桌面环境 xfce 4 输入法 fcitx 5 背景 最早在Debian上安装Lazarus是直接sudo apt install lazarus，即使用的是官方仓库的版本，也是戏称为万年不更新版。默认安装的是Gtk2版，该版存在中文输入法问题（输入法问题可参照解决Debian上Lazarus输入法问题）；也可以把IDE改为Qt5版，同样可以使用中文输入法。
想用最新版Lazarus 3.4，直接在官网下载最新的deb包，没有安装成功。
后来使用的是fpcupdeluxe-x86_64-linux安装，即Gtk2版，但是由于官方并没有合并中文输入法的解决方案，每次升级都要再做一遍，麻烦。
现在，准备使用fpcupdeluxe-x86_64-linux-qt5直接安装Qt5版。
问题 直接使用fpcupdeluxe-x86_64-linux-qt5安装，报错：
1 ./fpcupdeluxe-x86_64-linux-qt5: error while loading shared libraries: libQt5Pas.so.1: cannot open shared object file: No such file or directory 是因为缺少libQt5Pas.so.1，安装libqt5pas-dev包：
1 sudo apt install libqt5pas-dev 再次安装，又报错：
1 ./fpcupdeluxe-x86_64-linux-qt5: symbol lookup error: ./fpcupdeluxe-x86_64-linux-qt5: undefined symbol: QGuiApplication_setFallbackSessionManagementEnabled 先安装Gtk2版，再修改为Qt5版，编译还报错。编写普通的应用，编译为Qt5版，同样报错。
安装官方仓库的Lazarus 2.2，一切正常。
解决 去github上查看fpcupdeluxe相关的issues，说是要下载1.2.15版的libqt5pas，并安装：
1 sudo apt install ./libqt5pas1_2.15-1_amd64.deb ./libqt5pas-dev_2.15-1_amd64.deb 进一步查看，其实是因为Qt5删除/更新了部分接口导致不兼容了，而Debian 12的官方仓库中并未包含该更新，所以需要手动下载安装，Debian 13的官方仓库中已经包含了，像以前一样直接安装即可。</description>
    </item>
    <item>
      <title>PostgreSQL zip 安装</title>
      <link>https://afrusrsc.github.io/posts/db/pgsql_zip_install/</link>
      <pubDate>Tue, 30 Jul 2024 21:35:21 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/pgsql_zip_install/</guid>
      <description>安装脚本 windows上安装PostgreSQL还是比较麻烦的，又是安装又是配置，还要设为系统服务，远不像linux上一条命令就搞定，所以参考网上其它资料整理后形成批处理文件，直接放在解压出来的pgsql根目录下执行即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 ::****************************************************************************** :: 注意：需要放到 PostgreSQL 根目录下执行！！ ::****************************************************************************** @echo off ::============================================================================== set pgpath=%cd% echo 1. 安装服务 echo 2. 卸载服务 set /p op=&amp;#34;请选择操作: &amp;#34; if %op%==1 goto :Install if %op%==2 goto :Uninstall ::============================================================================== :Install echo **************************** echo * 注意：输入密码时不可见！ * echo **************************** ::初始化数据库簇 bin\initdb -D data -U postgres -A password -E utf8 -W ::是否开启局域网访问 set /p lan=&amp;#34;是否开启局域网访问？[y/n]：&amp;#34; if %lan%==y ( echo host all all 0.</description>
    </item>
    <item>
      <title>在Lazarus中分析Windows和Linux的延时</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_delay/</link>
      <pubDate>Wed, 24 Jul 2024 23:23:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_delay/</guid>
      <description>前言 之前用Delphi时，研究过延时及其时间精度，并写了篇文章——Delphi中的延时，当时是仅在windows平台下测试的，现在想用Lazarus分别在windows和linux平台测试对比下。
测试 测试环境 CPU：x86_64
win：win10
linux：debian 12.6 + xfce
ide：Lazarus 3.4 + fpc 3.2.2
测试设计 整体与之前的设计保持一致，增加了GetTickCount64的测试，Timer的测试有改动，具体如下：
假定系统时间是足够精确的，因此使用Now分别在延时前后获取系统当前时间来进行耗时评估。
为使测试更具代表性，每个测试点连续测试100次，取算术平均值。
在1ms~100ms内，测试点步长为1ms，在100ms~1000ms内，测试点步长为10ms。
为尽可能减小干扰，测试过程中未使用并行，Sleep、GetTickCount和GetTickCount64未使用Application.ProcessMessages;，Timer绕不开事件触发，使用了Application.ProcessMessages;。
测试结果 windows 延时(ms) Sleep GetTickCount GetTickCount64 Timer 1 1.93 15.51 15.63 15.62 2 2.93 16.59 15.62 15.63 3 3.95 15.58 15.62 15.66 4 5.10 15.49 15.94 15.61 5 5.86 15.55 15.62 15.65 6 6.83 15.50 15.62 15.63 7 7.81 15.62 15.63 15.67 8 8.77 15.55 15.63 15.68 9 9.76 15.</description>
    </item>
    <item>
      <title>在Lazarus中使用ShareMem</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_sharemem/</link>
      <pubDate>Tue, 23 Jul 2024 20:40:36 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_sharemem/</guid>
      <description>问题 使用Delphi开发应用时，如果要在主程序和dll间传递字符串、对象等不兼容C的类型时，通常需要在主程序和dll工程的uses区第一个位置引用ShareMem单元，并将borlndmm.dll随应用一起发布使用。
Lazarus中也有ShareMem单元，说明也可以采用相同的策略解决同样的需求，但是并不是使用borlndmm.dll。
在源码sharemem.pp中可以看到const fpcmemdll = &#39;fpcmemdll.dll&#39;;，说明使用的是fpcmemdll.dll，但是这个dll实际上是并不存在的！
解决 全盘搜索并没有找到fpcmemdll.dll，但是却找到了fpcmemdll.pp。
打开fpcmemdll.pp后发现，其实这并不是一个普通的用于uses的单元，而是一个library工程单元，那么问题就好办了。
创建一个空白library工程，并命名为fpcmemdll
复制fpcmemdll.pp内容到fpcmemdll.lpr
构建fpcmemdll.lpr得到fpcmemdll.dll
其它 linux平台似乎并没有ShareMem单元，也不存在以上用法，应该是只有windows平台才要这样用。</description>
    </item>
    <item>
      <title>使用fpcupdeluxe安装配置Lazarus</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_fpcupdeluxe_install/</link>
      <pubDate>Sun, 21 Jul 2024 14:20:33 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_fpcupdeluxe_install/</guid>
      <description>前言 之前的配置Lazarus免重装和Lazarus开发环境配置主要是针对windows平台的，同样也适用于linux平台，只是需要稍微变通一些。当然，由于linux平台本身的多样性，自然也会有一些特殊的坑，例如：解决Debian上Lazarus输入法问题。
在交流中，群友们也多次提到并推荐用fpcupdeluxe，体验了下，直观的感受就是——非常适合折腾！当然，不用来折腾的话也是非常方便的。
准备工作 访问GitHub 该问题请自行解决。
安装Git fpcupdeluxe是直接从源码构建Lazarus的，而Lazarus及fpc的源码是托管在GitLab上的，其本身依赖的工具又是在GitHub上，因此Git是必不可少的。安装可参考Git的基本使用。
下载fpcupdeluxe 可以在fpcupdeluxe的Releases页选择合适的版本下载fpcupdeluxe。linux平台注意要给予执行权限。
安装 核心IDE安装 建议专门建一个目录用于安装，例如就叫fpcupdeluxe，然后把下载的fpcupdeluxe文件放入，并运行。首次运行会有是否记录日志的提示，依据自己情况选择。 配置界面语言及安装路径，建议与fpcupdeluxe安装文件相同。
点Stable/稳定版本（也可选择其它版本），确认后即可自动下载依赖，然后完成基本IDE的安装。如果安装失败了，排除问题后，再次操作3.即可。
对于linux，可能会提示缺少依赖，如：
1 2 3 4 5 6 7 8 9 10 [Info] Checking dev-libs for gtk2 LCLWidgetType. [Error] Missing library: [Error] libX11.so [Error] libgdk_pixbuf-2.0.so [Error] libpango-1.0.so [Error] libcairo.so [Error] libgdk-x11-2.0.so [Warning] You need to install at least libx11-dev libgtk2.0-dev libcairo2-dev libpango1.0-dev libxtst-dev libgdk-pixbuf2.0-dev libatk1.0-dev libghc-x11-dev to build Lazarus !! [Warning] Make, binutils and git are also required !</description>
    </item>
    <item>
      <title>用Hugo搭建个人博客——显示目录</title>
      <link>https://afrusrsc.github.io/posts/blog/hugo04/</link>
      <pubDate>Sun, 09 Jun 2024 21:58:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/blog/hugo04/</guid>
      <description>文章参考了Hugo博客目录放在侧边
修改配置 文章较长时，能够显示可直接跳转的目录是极好的，PaperMod原生就支持目录，只需简单修改配置即可。
在config.yml中，添加或修改params对应的配置为以下内容：
1 2 3 params: ShowToc: true TocOpen: true 目录移至侧边 虽然PaperMod原生就有目录，但是却是在顶部，便捷性几乎为0，放在侧边就会方便许多。
在项目目录layouts/partials下添加toc.html文件，内容如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 {{- $headers := findRE &amp;#34;&amp;lt;h[1-6].</description>
    </item>
    <item>
      <title>用Hugo搭建个人博客——支持Mermaid</title>
      <link>https://afrusrsc.github.io/posts/blog/hugo03/</link>
      <pubDate>Sun, 09 Jun 2024 17:38:54 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/blog/hugo03/</guid>
      <description> 文章参考了Hugo博客添加mermaid作图
文章可以使用Mermaid添加流程图等，来增强信息传递效率和阅读体验，但PaperMod原生似乎并不支持（或者支持得不好？）Mermaid。
修改方法 在项目目录layouts/shortcodes下添加mermaid.html，内容如下： 1 2 3 &amp;lt;div class=&amp;#34;mermaid&amp;#34; align=&amp;#34;center&amp;#34;&amp;gt; {{.Inner}} &amp;lt;/div&amp;gt; 复制主题目录themes/hugo-PaperMod/layouts/partials下的header.html到项目目录layouts/partials，然后在开头插入以下内容： 1 2 3 {{ if (.Params.mermaid) }} &amp;lt;script async src=&amp;#34;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; {{ end }} 在archetypes/default.md或者对应的模板头里添加以下内容： 1 mermaid: true 使用方法 把Markdown的语法标识替换为用{{}}包换的&amp;lt;mermaid&amp;gt;和&amp;lt;/mermaid&amp;gt;标签（由于会直接被识别成shortcode进行解析，只能用语言描述），包括住实际的mermaid代码。
graph LR a--&gt;b-.-&gt;c </description>
    </item>
    <item>
      <title>用Hugo搭建个人博客——配置</title>
      <link>https://afrusrsc.github.io/posts/blog/hugo02/</link>
      <pubDate>Sat, 01 Jun 2024 20:45:01 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/blog/hugo02/</guid>
      <description>空空如也的页面，需要好好配置一番才能丰富多彩。
配置config.yml 隐性配置 在上一篇config.yml的基础上先加入以下内容：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 copyright: &amp;#34;© 20xx [xxx](https://github.com/xxx)&amp;#34; # 版权说明 paginate: 5 # 每页文章数 enableInlineShortcodes: true # 是否使用短码 enableRobotsTXT: true # 是否允许被搜索引擎收录 buildDrafts: false buildFuture: false buildExpired: false enableEmoji: true # 是否使用emoji表情 pygmentsUseClasses: true mainsections: [&amp;#34;posts&amp;#34;, &amp;#34;papermod&amp;#34;] minify: disableXML: true outputs: home: - HTML - RSS - JSON markup: goldmark: renderer: unsafe: true highlight: noClasses: false codeFences: true guessSyntax: true lineNos: true services: instagram: disableInlineCSS: true twitter: disableInlineCSS: true params: env: production description: &amp;#34;xxx&amp;#39;s blog&amp;#34; author: xxx # 作者 defaultTheme: auto ShowShareButtons: false # 是否显示分享按钮 ShowReadingTime: true # 是否显示阅读时间 displayFullLangName: true ShowPostNavLinks: true # 是否显示上一页下一页 ShowBreadCrumbs: true ShowCodeCopyButtons: true # 是否在代码上显示复制按钮 ShowRssButtonInSectionTermList: false ShowAllPagesInArchive: true ShowPageNums: true # 是否显示页数 ShowToc: false # 是否显示目录 DateFormat: &amp;#34;2006-01-02 15:04:05&amp;#34; # 时间格式 socialIcons: - name: github title: View Source on Github url: &amp;#34;https://github.</description>
    </item>
    <item>
      <title>用Hugo搭建个人博客——准备</title>
      <link>https://afrusrsc.github.io/posts/blog/hugo01/</link>
      <pubDate>Sun, 26 May 2024 17:10:12 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/blog/hugo01/</guid>
      <description>方案制定 使用hugo（笔者使用的是v0.126.1）进行构建
使用PaperMod主题，前言提到的基本需求都能满足
因为hugo是命令行工具，所以使用Linux系统或Win10+的wsl比较方便
使用Github Pages，服务器和域名问题就一并解决了，不过代价就是访问速度一言难尽。
使用两个仓库，一个公开仓库用于部署页面，一个私有仓库用于管理源码（内容）
工具准备 安装Git 用于源码（内容、配置）管理，也用于向Githug仓库进行推送。Git的安装、配置请自行解决。
安装hugo 打开hugo的下载地址（自行解决科学上网），注意正确选择对应自己操作系统和架构的版本。由于使用的是PaperMod主题，基础版就够了。当然，下载扩展版也没问题，只是听说好像需要go环境，没有验证过。
下载之后解压，只需要一个可执行的hugo即可。
1 tar -xzf hugo_0.126.1_linux-amd64.tar.gz # 适用于linux系统amd64架构的不带扩展的0.126.1版hugo 为了方便使用，可以把hugo放到一个已有的默认搜索路径中，也可以把hugo所在的路径加入环境变量。
在Linux环境下，运行hugo completion -h查看如何为hugo添加自动完成功能。
仓库准备 Github 无Github账号的，自行申请一个。
目标仓库 目标仓库即将来用于部署页面的仓库，新建名为xxx.github.io的仓库（xxx为用户名），仓库更新后会自动部署，直接访问https://xxx.github.io即可。如果想部署第二或更多的仓库，那就只能新建普通仓库，手动开启Github Pages，通过https://xxx.github.io/yyy（xxx为用户名，yyy为仓库名）访问。
源码仓库 源码仓库即将来用于管理*.md的仓库，新建一个普通私有仓库即可，例如名为blog-src。
本地仓库 克隆源码仓库 1 2 git clone https://github.com/xxx/blog-src.git cd blog-src # 切到仓库根目录，无特殊说明时，所有命令都在该目录下执行 添加.gitignore 1 2 echo &amp;#39;public/&amp;#39; &amp;gt; .gitignore echo &amp;#39;.hugo_build.lock&amp;#39; &amp;gt;&amp;gt; .gitignore 克隆目标仓库 1 2 mkdir public git clone git@github.com:xxx/xxx.github.io.git public 添加部署脚本 新建文本文件pushpage.sh，并赋予执行权限，然后写入以下内容
1 2 3 4 5 6 7 8 9 10 11 12 13 14 #!</description>
    </item>
    <item>
      <title>用Hugo搭建个人博客——前言</title>
      <link>https://afrusrsc.github.io/posts/blog/hugo00/</link>
      <pubDate>Sun, 26 May 2024 15:30:12 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/blog/hugo00/</guid>
      <description>全是废话 注意：本篇全是废话，无任何技术性内容！
忆往昔 想当年，能有个属于自己的博客或网站，那是件很有面儿的事，可惜那时的自己是个纯纯的小白，只有眼馋的份儿。
后来，在某些门户网站提供的博客功能里写那么些仨瓜俩枣的，也算是过把小瘾。
再后来，自己写的东西慢慢开始有了些含金量，碰巧那阵子的门户网站也陆陆续续开始关停博客功能，无奈也就随之辗转迁移，几番下来，丢了不少东西。
想过自己建站，不过那些前端、后端、域名之类的，搞得头大，再加上囊中羞涩，还是罢了。
期间，了解到Markdown，简单明了，一下子就喜欢上了这种格式，随后也逐渐迁移到了几个相对靠谱并且支持Markdown的平台上。
慢慢的，发现这些平台，不是河蟹就是死板，写起文章来束手束脚，难受得不能行。
无意间发现，Github或Gitee对Markdown的渲染还是不错的，直接在git里写Markdown，效果有了，还不拘束，而且东西还掌握在自己手里，完美！
看今朝 如今，随着写的东西越来越多，GitXX+Markdown的不足也慢慢暴露出来：刀耕火种不够灵活。于是，建站的想法又冒出来了，兜兜转转又盯上hugo+Githug Pages了。
其实，当初选择GitXX+Markdown方案前，已经考虑过hugo+GitXX Pages了，不过当时没有选到合适的主题，再加上Github感人的访问速度和Gitee感人的存储空间，以及没有合适的图床，一直都是备用方案。
如今再次盯上hugo+Githug Pages，仔细试了几个主题，最后发现如今的PaperMod还是挺符合个人需求的。
简洁、轻量
支持暗黑模式
中文支持比较好
移动端适配良好
缺点嘛，自然也是有的，不过目前还能接受。
望未来 暂时是决定用hugo+Githug Pages方案的，未来会不会再变，等未来再说吧。
至于以前写的文章，看情况吧，可能会部分迁移过来，也可能全部备份完就罢了，写文章嘛，是个舒爽的活，不能给自己设限。</description>
    </item>
    <item>
      <title>解决Debian上Lazarus输入法问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_ime/</link>
      <pubDate>Wed, 03 Apr 2024 20:41:30 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debian_ime/</guid>
      <description>从其它平台迁移而来
环境 项目 值 操作系统 Debian 12 桌面环境 xfce 4 输入法 fcitx 5 问题 在Lazarus的代码编辑器中，快速录入时会出现连击现象
在Lazarus的代码编辑器中无法输入中文
解决 问题1 安装fcitx5-frontend-gtk2即可，详见fcitx5 issues #1006
问题2 参照秋·风大佬中文输入法的解决方案。如果使用的是搜狗输入法的话，参照秋·风大佬搜狗输入法输入词组的解决方案。
补充1 使用fpcupdeluxe安装Lazarus，源码修改后使用git diff生成补丁文件，后期升级Lazarus后若输入法不能用可直接应用补丁，避免重复修改。
生成补丁文件 1 2 cd lazarus git diff &amp;gt; ~/linux_gtk2_ime.diff 应用补丁 如下图进行设置后，更新FPC+Lazarus即可。
以下是Lazarus 3.4的补丁文件内容。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 diff --git a/components/synedit/lazsyngtk2imm.</description>
    </item>
    <item>
      <title>配置校时服务</title>
      <link>https://afrusrsc.github.io/posts/os/debian_ntp/</link>
      <pubDate>Wed, 13 Mar 2024 22:25:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_ntp/</guid>
      <description> 从其它平台迁移而来
安装ntpdate 1 sudo apt install ntpdate 手动校时 1 sudo ntpdate -u ntp.ntsc.ac.cn -u：可越过防火墙与主机同步
ntp.ntsc.ac.cn：国家授时中心的服务地址
同步硬件时间 1 sudo hwclock -w 定时校时 校时脚本 1 vi ntp.sh 写入以下内容：
1 2 3 #!/bin/bash /usr/sbin/ntpdate -u ntp.ntsc.ac.cn; /usr/sbin/hwclock -w; 授予执行权限
1 chmod +x ntp.sh 创建定时任务 1 sudo crontab -e 加入以下内容：
1 */30 * * * * /root/ntp.sh # 表示每30分钟执行一次 </description>
    </item>
    <item>
      <title>Oracle基础使用</title>
      <link>https://afrusrsc.github.io/posts/db/oracle_base/</link>
      <pubDate>Mon, 11 Mar 2024 21:47:05 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/oracle_base/</guid>
      <description> 从其它平台迁移而来
用户 取消密码生命周期 1 ALTER profile default limit password_life_time unlimited; 修改用户密码 1 ALTER USER xxx IDENTIFIED BY xxx; 文件夹 查看文件夹 1 SELECT * FROM All_Directories; 表空间 查询表空间 1 SELECT * FROM Dba_Data_Files; 创建表空间 1 2 3 4 5 6 7 CREATE TABLESPACE 表空间名 DATAFILE &amp;#39;文件名&amp;#39; SIZE 初始大小 --单位k或m AUTOEXTEND ON --自动扩展 NEXT 扩展大小 MAXSIZE 最大大小 ; 表空间追加数据文件 1 2 3 4 5 6 7 ALTER TABLESPACE 表空间名 ADD DATAFILE &amp;#39;文件名&amp;#39; SIZE 初始大小 --单位k或m AUTOEXTEND ON --自动扩展 NEXT 扩展大小 MAXSIZE 最大大小 ; 删除表空间 1 2 DROP TABLESPACE 表空间名; --仅删除表空间 DROP TABLESPACE 表空间名 INCLUDING CONTENTS AND DATAFILES; --删除表空间及数据文件 导入数据 1 2 3 4 5 6 7 8 --原模式(用户名)导入 IMPDP 登录名/密码 DIRECTORY=泵导文件夹 DUMPFILE=泵导文件 LOGFILE=日志文件 SCHEMAS=模式名 --指定模式(用户名)导入 IMPDP 登录名/密码 DIRECTORY=泵导文件夹 DUMPFILE=泵导文件 LOGFILE=日志文件 SCHEMAS=原模式名:新模式名 --多模式(用户名)导入 IMPDP 登录名/密码 DIRECTORY=泵导文件夹 DUMPFILE=泵导文件 LOGFILE=日志文件 SCHEMAS=模式名1,模式名2 导出数据 1 EXPDP 登录名/密码@SID名 DIRECTORY=泵导文件夹 DUMPFILE=泵导文件 SCHEMAS=模式名 </description>
    </item>
    <item>
      <title>Debian上使用蓝牙音响</title>
      <link>https://afrusrsc.github.io/posts/os/debian_bluetooth/</link>
      <pubDate>Fri, 16 Feb 2024 21:26:44 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_bluetooth/</guid>
      <description> 从其它平台迁移而来
安装驱动
安装蓝牙管理工具blueman
1 sudo apt install blueman 此时连接蓝牙音响报br-connection-profile-unavailable
编辑/etc/pulse/default.pa，找到并注释掉load-module module-bluetooth-discover行
编辑/usr/bin/start-pulseaudio-x11，在如下位置添加/usr/bin/pactl load-module module-bluetooth-discover
1 2 3 4 5 if [ x&amp;#34;$SESSION_MANAGER&amp;#34; != x ] ; then /usr/bin/pactl load-module module-x11-xsmp &amp;#34;display=$DISPLAY xauthority=$XAUTHORITY session_manager=$SESSION_MANAGER&amp;#34; &amp;gt; /dev/null # 添加下面一行 /usr/bin/pactl load-module module-bluetooth-discover fi 重启 </description>
    </item>
    <item>
      <title>让应用以单例运行</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_single_instance/</link>
      <pubDate>Fri, 26 Jan 2024 22:24:01 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_single_instance/</guid>
      <description>从其它平台迁移而来
有时候我们会期望所编写的应用只运行一个实例，比如监听网络端口或串口，用Lazarus有两种不同的实现方案。
SingleInstanceEnabled属性 SingleInstanceEnabled是TCustomApplication的属性，在初始化之前设置为True即可轻松实现单实例应用：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 program project1; {$mode objfpc}{$H+} uses AdvancedSingleInstance, //注意：必须引用该单元！！！ Interfaces, Forms, ...; {$R *.res} begin Application.SingleInstanceEnabled := True; //注意：必须在调用 Initialize 前赋值！！！ Application.Initialize; ... Application.Run; end. 特别注意 必须引用AdvancedSingleInstance单元，且该单元必须在Interfaces单元和Forms单元前
必须在调用Application.Initialize前赋值
该方法仅针对同一个可执行文件生效，并非系统全局生效
互斥对象 利用操作系统的互斥对象可实现系统级的单例。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var AppMutex: THandle; begin Application.</description>
    </item>
    <item>
      <title>把旧笔记本电脑改为家用服务器</title>
      <link>https://afrusrsc.github.io/posts/os/debian_server_install/</link>
      <pubDate>Mon, 22 Jan 2024 21:45:33 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_server_install/</guid>
      <description>从其它平台迁移而来
背景 有一台旧笔记本电脑，电池鼓包已拆除，显示器画面乱跳（暂未查出原因，外接显示器正常），闲置已久，计划改为家用服务器使用。
系统安装及配置 安装系统 冒着闪瞎眼的风险，安装Debian，安装过程尽可能简化。
注意事项：
特别注意下网卡是否需要另外下载驱动（本机刚好不需要，忽略）
安装过程中会提示选择源，但Debian 软件安全更新源并不会采用所选源，所以，安装过程可能会因此变得很漫长
由于是做服务器用，所以不需要安装桌面环境，本着最小安装原则，什么都不安装（包括标准系统工具，因为很多用不上）
配置系统 安装ssh服务 由于显示问题，先安装ssh服务，然后远程进行其它配置
1 2 3 # root登录 apt update apt install openssh-server -y 安装并配置sudo 1 2 apt install sudo -y usermod -aG sudo xxx # xxx为用户名 查看ip，并远程登录 由于显示问题，直接通过路由器查得。
1 ssh 用户名@ip地址 修改ssh端口 1 sudo vi /etc/ssh/sshd_config 取消Port 22的注释，再添加一行Port xxx
重启ssh服务
1 sudo systemctl restart sshd.service 退出ssh并用新端口登录
1 ssh -p 新端口 用户名@ip地址 登录成功后再注释Port 22，再次重启ssh服务
修改源 1 sudo vi /etc/apt/sources.</description>
    </item>
    <item>
      <title>Debian上安装PostgreSQL</title>
      <link>https://afrusrsc.github.io/posts/os/debian_pg_install/</link>
      <pubDate>Mon, 15 Jan 2024 23:07:40 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_pg_install/</guid>
      <description>从其它平台迁移而来
安装 Debian仓库中已包含PostgreSQL，所以，直接安装即可：
1 sudo apt install postgresql 若想使用pg官方源，则执行：
1 2 3 4 sudo sh -c &amp;#39;echo &amp;#34;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main&amp;#34; &amp;gt; /etc/apt/sources.list.d/pgdg.list&amp;#39; wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - sudo apt-get update sudo apt-get -y install postgresql 配置 重置密码 曾经安装又卸载N多次，都没能像在win上一样正常使用，其实就是安装时默认生成的是随机密码，重置下密码即可使用。
删除linux系统的postgres用户密码 1 sudo passwd -d postgres 设置linux系统的postgres用户密码 1 sudo -u postgres passwd 登录数据库 1 sudo -u postgres psql 修改数据库的postgres用户密码 1 ALTER USER postgres WITH PASSWORD &amp;#39;xxxxxx&amp;#39;; # 注意带分号 退出psql并重启服务 1 2 \q # 退出 psql sudo systemctl restart postgresql.</description>
    </item>
    <item>
      <title>给json数组中的元素排序</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_json_order/</link>
      <pubDate>Tue, 28 Nov 2023 21:38:45 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_json_order/</guid>
      <description>从其它平台迁移而来
起因 基本信息 平台：windows
IDE：Lazarus 2.2.6
json包：FPC自带的fpjson
背景 最近在搞一个小工具，数据文件采用的是json格式，其中一个节点存放的是一组文件的基本信息的清单，这个节点自然就是个json数组，元素就是每个文件基本信息的json对象。界面展示用的是经典的DBGrid + DataSource + DataSet方案，所以会把json数组转为DataSet。
操作过程中会比对磁盘上的文件，该添的添，该删的的删，该改的改，该标记的标记。一番操作下来，顺序自然是乱的，虽然可以操作DataSet或者换用带排序功能的DBGridEh达到排序的目的，但直接看json数据的话，依然是乱序的。因此，期望直接对json数组进行排序。
解决过程 习惯先看源码，如果没有原生解决方案了，或者原生解决方案太别扭了，才会选择第三方解决方案或自己造轮子。
一看源码 1 2 3 4 TJSONArray = class(TJSONData) public ... Procedure Sort(Compare: TListSortCompare); TJSONArray已经提供了排序方法，不过这个参数是什么东西？
1 TListSortCompare = function (Item1, Item2: Pointer): Integer; 嗯，是个函数声明，也就是说具体的算法实现要自己写，可以先找找看有默认的实现没。结果是：没有！那就自己写吧。
看声明，这个函数是要比较两个指针指向的东西，并返回一个整数。嗯，看上去很简单，不过：
到底是怎么实现排序的？
参数是指针，指向的又是什么东西？
返回一个什么样的整数才能实现排序呢？
没懂！！！
还是接着看源码吧：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 procedure TJSONArray.</description>
    </item>
    <item>
      <title>安装Debian</title>
      <link>https://afrusrsc.github.io/posts/os/debian_install/</link>
      <pubDate>Tue, 07 Nov 2023 21:31:55 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/debian_install/</guid>
      <description>从其它平台迁移而来
Linux发行版多如牛毛，多年来的浅尝辄止，最终还是觉得Debian最合心意。
有wsl、虚拟机、物理机三种方式：其中前两种适合初期学习用，或者需要win/linux混合用的情形，同样也都需要开启硬件虚拟化；后一种适合实践演练或双系统用，当然也适用于纯linux用户使用。
wsl wsl有wsl1和wsl2之分，具体差异参考官方文档。当然，也可直接参考其安装步骤。
准备工作 win10/win11操作系统，启动自动更新并更新到最新补丁
下载Linux内核更新包
下载发行版Debian（注：离线包安装可自主控制安装路径，方便管理）
安装 开启硬件虚拟化
开启适用于Linux的Windows子系统
安装Linux内核更新包
重启，手动进行windows更新
在命令提示符中执行wsl --set-default-version 2设置默认版本
解压下载的发行版到待安装的路径（注：*.AppxBundle是包的集合，*.appx是包，本质上都是*.zip包）
进入路径中，运行debian.exe
根据提示输入用户名和密码
配置 更换源
更新系统sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y
安装补全工具sudo apt install bash-completion
进行其它个性化配置
虚拟机 准备工作 开启硬件虚拟化
安装虚拟机软件vbox
下载iso镜像（选择网络安装镜像即可）
安装 创建虚拟机
启动虚拟机，选择下载的iso启动
选择Install
选择语言（但凡有一丁点中文需求，都建议选择简体中文）
设置主机名
设置root密码，创建用户并设置密码
分区（新手可使用整个磁盘并将所有文件放在同一个分区）
选择源
选择桌面环境及其它软件
选择GRUB安装位置（启用UEFI的情况不需要）
配置 安装有桌面环境的直接在GUI下配置即可，以下为无桌面环境的配置：
以root用户登录
更新系统apt update &amp;amp;&amp;amp; apt upgrade -y
安装工具apt install bash-completion sudo
设置用户sudo权限usermod -aG sudo xxx
退出登录</description>
    </item>
    <item>
      <title>给类型、记录、类添加助手</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_helper/</link>
      <pubDate>Fri, 25 Aug 2023 20:38:35 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_helper/</guid>
      <description>从其它平台迁移而来
通常情况下，类型和记录是没有方法的，只有类有方法，但是可以通过给类型和记录添加助手来达到类似于类的方法的功能，当然，也可以给类添加助手。
语法 1 2 3 HelperName = class|record|type helper[(OptionalBaseHelper)] for TypeName [properties, procedures, functions, constructors, consts, vars] end [hint modifiers]; 类助手 FPC 2.6+版本可用，ObjFPC模式下无需特别设置。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 //定义 TObjectHelper = class helper for TObject function SomeFunc: string; end; //实现 function TObjectHelper.SomeFunc: string; begin Result := &amp;#39;类名:&amp;#39; + Self.ClassName; end; //使用 var o: TObject; begin Writeln(o.SomeFunc); end. 一般情况下，给类添加方法可直接在类中添加，但这样添加的方法会直接在所有后代类中显示，如果只是想在特定的范围内添加方法，就可以使用类助手。</description>
    </item>
    <item>
      <title>在wsl中使用Git同时管理windows项目和linux项目</title>
      <link>https://afrusrsc.github.io/posts/git/git_wsl_win_linux/</link>
      <pubDate>Wed, 23 Aug 2023 21:51:01 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/git/git_wsl_win_linux/</guid>
      <description> 从其它平台迁移而来
问题 以前，单纯的做windows桌面应用的开发，wsl里装git，完全按照windows平台进行配置即可。但是现在，想入手golang了，一番了解下来，果然开源的还是linux环境最合适，wsl2目前看是最合适的了，不过，唯一的问题就是要用git同时管理windows和linux项目（其实主要是golang项目，虽然是跨平台的）比较麻烦，麻烦的根源首当其冲的自然是换行符了。
纯windows开发时，git一般是这样配置：
1 2 git config --global core.safecrlf true git config --global core.autocrlf true 纯linux开发时，自然可以这样配置：
1 2 git config --global core.safecrlf true git config --global core.autocrlf input 那既要做windows开发保住饭碗，又要做linux开发提升自我，这git要怎样配置呢？
解决方案 一番尝试下来，问题解决了，不过有几个前提：
windows开发依然在windows环境下进行，linux开发在wsl2下进行
windows项目基本固定，就那么几个，偶尔写个demo什么的也用不上git，而linux开发主要是学习的，肯定会频繁创建项目，还要多看别人的项目，所以git的配置要以linux为主
所以，全局配置按linux来，即：
1 git config --global core.autocrlf input 具体的windows项目内：
1 git config --local core.autocrlf true 新clone出的windows项目，需要删除工作区的内容重新checkout：
1 git checkout -f xxx </description>
    </item>
    <item>
      <title>VSCode基本使用</title>
      <link>https://afrusrsc.github.io/posts/other/vscode/</link>
      <pubDate>Thu, 10 Aug 2023 22:12:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/vscode/</guid>
      <description>从其它平台迁移而来
个性配置 纯文本复制 设置-&amp;gt;搜索copy-&amp;gt;取消Editor:Copy With Syntax Highlighting前的勾
列分隔线 设置-&amp;gt;搜索rulers-&amp;gt;点Editor:Rulers项下的在settings.json中编辑-&amp;gt;如下填入分隔线位置（可设置多个，多个值之间用,隔开）
1 2 3 &amp;#34;editor.rulers&amp;#34;: [ 80, 120 ], 显示空格 设置-&amp;gt;搜索whitespace-&amp;gt;找到Editor:Render Whitespace-&amp;gt;选择all
自动换行 设置-&amp;gt;搜索word-&amp;gt;找到Editor:Word Wrap-&amp;gt;选择on
使用技巧 列模式 ALT+鼠标左击：选择不连续的列进行列编辑，列可不对齐
ALT+鼠标拖动：选择连续的列进行列编辑，列会对齐</description>
    </item>
    <item>
      <title>Markdown基础</title>
      <link>https://afrusrsc.github.io/posts/other/markdown/</link>
      <pubDate>Thu, 10 Aug 2023 21:27:10 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/markdown/</guid>
      <description>从其它平台迁移而来
基础知识 后缀名一般为.md
只关注于内容，渲染交给页面或软件来实现
语法 标题 1 2 3 4 5 6 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 段落 连续两个回车或连续两个空格一个回车表示一个段落的结束。
有序列表 1 2 3 4 5 1. 有序列表1 2. 有序列表2 3. 有序列表3 无序列表 1 2 3 4 5 - 无序列表1 - 无序列表2 - 无序列表3 任务列表 1 2 3 - [ ] 这是未完成 - [x] 这是已完成 这是扩展语法，部分渲染可能不支持。 引用 1 2 3 &amp;gt; 这是引用的内容 &amp;gt; &amp;gt; 这是又一行的引用内容 格式 1 2 3 *这是斜体* **这是加粗** ~~这是删除线~~ 分隔线 1 2 3 --- *** ___ 代码块 1 `这是行内代码块` 1 2 3 ``` 这是多行代码块 ``` 1 2 3 4 5 6 7 ```c //在```之后加语言名可进行语法高亮，具体看渲染如何实现 # include &amp;lt;stdio.</description>
    </item>
    <item>
      <title>Git提交规范</title>
      <link>https://afrusrsc.github.io/posts/git/git_commit_specification/</link>
      <pubDate>Tue, 01 Aug 2023 20:41:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/git/git_commit_specification/</guid>
      <description> 从其它平台迁移而来
一直以来，都是用git commit -m来提交代码的，结果就是看提交历史时一点儿都不赏心悦目！既然别人已经有好的实践了，那么就来学习一下吧。
提交消息格式 1 2 3 4 5 修改类型(影响范围):&amp;lt;--空格--&amp;gt;标题 &amp;lt;--空行--&amp;gt; [正文] &amp;lt;--空行--&amp;gt; [页脚] 任何一行都不能超过100个字符，以便在各种git工具中方便阅读 修改类型 以下选其一：
值 含义 feat 添加新功能 fix 修复bug docs 只修改了文档 style 调整代码格式，未修改代码逻辑（如：调整空白、格式化等） refactor 代码重构，既没修复bug也没添加新功能 perf 性能优化，提高性能的代码修改 test 添加或修改代码测试 chore 对构建流程或辅助工具和依赖库（如文档生成等）的更改 revert 代码回滚 影响范围 内容不固定，可以是代码影响到的任何内容，但要足够简要。如果影响到多个范围可以用*表示。
标题 必需，能简要描述本次提交的信息。
不要大写首字母
结尾不要使用句号
正文 非必需，是对标题的补充说明。
页脚 任何破坏性变更、不向下兼容都应在页脚中说明。也经常用来引用本次解决的issue。
破坏性变更应以BREAKING CHANGE开头 1 BREAKING CHANGE:&amp;lt;--空格--&amp;gt;页脚内容 代码回滚 1 2 3 4 5 revert(影响范围):&amp;lt;--空格--&amp;gt;要恢复到的那个提交的标题 &amp;lt;--空行--&amp;gt; This reverts commit &amp;lt;要恢复到的那个提交的hash&amp;gt; &amp;lt;--空行--&amp;gt; [页脚] </description>
    </item>
    <item>
      <title>Git的基本使用</title>
      <link>https://afrusrsc.github.io/posts/git/git_base/</link>
      <pubDate>Mon, 31 Jul 2023 21:39:34 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/git/git_base/</guid>
      <description>从其它平台迁移而来
安装 Windows 下载git，由于某些原因，建议去镜像站点下载对应的版本（建议下载便携版）。
便携版进行自解压，选择合适路径，建议路径不要有中文。
在环境变量中修改Path的值，增加git路径\bin。
若有需要，也可以安装TortoiseGit图形操作界面。
其实Win10+启用wsl，然后在wsl里安装使用git是最爽的。
Linux 1 sudo apt update &amp;amp;&amp;amp; sudo apt install git 基本配置 1 2 3 4 5 6 7 8 9 10 11 # 用户名和邮箱 git config --global user.name &amp;#34;XXX&amp;#34; git config --global user.email XXXXXX@XXX.com # 换行符 git config --global core.safecrlf true git config --global core.autocrlf input # Windows 平台设为 true # 记住密码 git config --global credential.helper store # 别名设置 git config --global alias.</description>
    </item>
    <item>
      <title>使用Lazarus压缩/解压zip</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip02/</link>
      <pubDate>Sat, 29 Jul 2023 21:31:15 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip02/</guid>
      <description>从其它平台迁移而来
Lazarus默认已经提供了zip文件的压缩和解压功能，在Zipper单元中，不过，使用过程中还是有一些细节需要注意。
压缩 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 uses Zipper; { 使用类方法进行压缩 } //压缩单个文件 TZipper.Zip(&amp;#39;压缩后的文件.zip&amp;#39;, &amp;#39;待压缩的文件.txt&amp;#39;); //压缩多个文件 TZipper.Zip(&amp;#39;压缩后的文件.zip&amp;#39;, [&amp;#39;待压缩的文件1.txt&amp;#39;, &amp;#39;待压缩的文件2.pdf&amp;#39;]); { 使用实例对象进行压缩 } var zip: TZipper; zip := TZipper.Create; try //压缩单个文件 zip.ZipFile(&amp;#39;压缩后的文件.zip&amp;#39;, &amp;#39;待压缩的文件.txt&amp;#39;); //压缩多个文件 zip.ZipFiles(&amp;#39;压缩后的文件.zip&amp;#39;, [&amp;#39;待压缩的文件1.txt&amp;#39;, &amp;#39;待压缩的文件2.pdf&amp;#39;]); finally zip.Free; end; 以上为比较方便的使用方法，但是还存在一些问题：
以上仅限于文件名为英文的情况，若文件名为中文则会出现乱码（主要是在windows平台上，用专门的压缩/解压工具打开查看列表和解压时）。查看解决方案。
若待压缩的文件包括路径，则压缩后的文件内也会包含传参时传入的路径。查看解决方案。
另外，也可以配合FileName（压缩后的文件名）和Entries（待压缩的文件）属性使用ZipAllFiles方法；或者配合Entries（待压缩的文件）属性使用SaveToFile方法。不过，多次调用前一定要调用Clear方法，否则就会受前一次压缩操作的影响。
解压 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 uses Zipper; { 使用类方法进行解压 } //解压出全部文件 TUnZipper.</description>
    </item>
    <item>
      <title>Linux开机时间优化</title>
      <link>https://afrusrsc.github.io/posts/os/linux_sys_start_time/</link>
      <pubDate>Tue, 25 Jul 2023 22:41:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/linux_sys_start_time/</guid>
      <description> 从其它平台迁移而来
分析开机启动时间 1 sudo systemd-analyze 列出开机启动项 1 sudo systemd-analyze blame 关闭开机启动项 注意：不要随意关闭，查资料确定关闭会产生的影响，评估后再进行关闭！
1 sudo systemctl disable xxx 恢复已关闭的开机启动项 1 sudo systemctl enable xxx </description>
    </item>
    <item>
      <title>同时使用Git和SVN</title>
      <link>https://afrusrsc.github.io/posts/git/git_svn/</link>
      <pubDate>Mon, 05 Jun 2023 21:30:33 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/git/git_svn/</guid>
      <description>从其它平台迁移而来
背景 一般情况下，企业内部多数是使用SVN来进行版本控制的，原因通常也就两个字——简单：
安装简单，无论服务端还是客户端
操作简单，即使非技术人员也能很快学会
管理简单，建目录、开账户、分权限，基本就能完成95%以上的需求
SVN是很强大的，但是使用者的水平差距也是很巨大的，结果就是多数情况下只有一个分支，大家都往里面各种提交，当然，有好好管理的不含在内。
不过，用过git的人，尤其是开发人员，估计都会喜欢git多一些，那么，同时使用SVN和git就会爽很多。
以下就以企业内使用SVN，开发者使用git为例进行说明，其中：SVN遵守企业内的版本控制使用工作流程，git遵守git类的工作流程。
环境配置 SVN 以使用ToroiseSVN为例：
任意文件夹中（最好是非SVN项目，减少菜单干扰）右键-&amp;gt;ToroiseSVN-&amp;gt;设置-&amp;gt;常规设置-&amp;gt;Subversion-&amp;gt;全局忽略样式（全局设置不会提交到版本库，避免对仓库信息的修改而影响到别人），在原有基础上追加以下内容： 1 .git .gitignore .README.md 拉取SVN代码 git 配置git环境
在要使用git的SVN项目下建git版本库的初始化
1 2 cd 项目 git init 编写.gitignore文件，配置常规开发需忽略的文件，再加上SVN的版本库信息.svn/
再次拉取SVN代码，确保代码最新
把文件增加进git库
1 git add . 提交初版代码 1 git commit 工作流 分支 master：主分支，与SVN保持一致
dev：开发主分支，主要用于合并开发完成的内容
...：任务分支（含BUG修复），具体的开发任务，开发完成后要合并到dev
具体流程 --- title: SVN+git工作流程 --- graph TD subgraph m[master分支流程] direction TB m1[切到master分支] m2[检出SVN代码] m3[git提交] m4[合并dev代码] m5[SVN提交] m1 --&gt; m2 --&gt; m3 --&gt; m4 --&gt; m5 end subgraph d[dev分支流程] direction TB d1[切到dev分支] d2[合并工作分支内容] d3[合并master分支内容] d4[根据情况调整] d5[提交] d6[切回master] d1 --&gt; d2 --&gt; d4 d1 --&gt; d3 --&gt; d4 --&gt; d5 --&gt; d6 end subgraph w[工作分支流程] direction TB w1[新建/切到工作分支] w2[根据情况合并dev分支内容] w3[开发] w4[提交] w5[根据情况切对应分支] w1 --&gt; w2 --&gt; w4 --&gt; w5 w1 --&gt; w3 --&gt; w4 end m3 -.</description>
    </item>
    <item>
      <title>在Lazarus中使用代码模板</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_code_templates/</link>
      <pubDate>Sat, 27 May 2023 21:12:44 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_code_templates/</guid>
      <description>从其它平台迁移而来
在Delphi中，可以使用CnPack中代码助手的功能，实现快速编写基础代码，专注于写具体业务、逻辑代码。在Lazarus中，也可以使用代码模板功能，实现相同的需求。
使用方法 将光标移到需要录入代码的位置
按Ctrl+J快捷键，弹出代码模板列表
选择要使用的模板，Enter回车
若模板需要填写参数，可在代码模板插入后，按Tab键在各参数间切换并修改，最后按Esc键或将光标移到其它位置
在模板生成的代码的基础上继续编写代码
注意：
可以先输入部分/完整代码模板的Token，然后再按快捷键；也可以按过快捷键后，继续输入Token剩余部分进一步过滤；当然，也可以组合使用。
先输入Token再按快捷键时，若可唯一确定模板，则会直接应用而不弹出模板列表。
自定义模板 Lazarus默认了一批模板，可以在菜单Tools-&amp;gt;Code Templates ...中进行查看。
若感觉默认模板不合适，可自行修改；若默认模板无法满足使用，也可自行添加。
简要说明 Module：当前使用的代码模板，默认是主配置目录下的lazarus.dci，可点右侧按钮选用其它模板。
Templates：所选代码模板的具体清单，格式为：Token - &amp;quot;说明&amp;quot;。右侧三个按钮用于对模板清单进行维护。
其余部分：所选模板项的详细信息。
最下方的编辑区：代码模板的具体内容，$开头的表示使用的宏代码，|表示模板插入后光标的位置。
Keep indentation：保持代码模板内容的缩进，勾选后代码模板首行在光标处插入，除首行外的缩进量保持原样插入（类似行模式插入）；否则模板首行外的内容与首行保持相对缩进（类似列模式插入）。
Enable Macros：启用宏代码，点Insert Macro可插入预定义的宏。
Auto complate on：自动完成，类似于事件触发，即满足条件后无需按Ctrl+J快捷键直接应用模板。
line break：按回车键时触发
space：按空格键时触发
tab：按Tab键时触发
word end：输入结束字符时触发，可暂时理解为输入;时触发
do not complate selection：暂时还不清楚具体效果
do not add character：可与前四种结合使用，勾选后不会把用来触发的字符插入到代码中，否则会插入用来触发的字符</description>
    </item>
    <item>
      <title>ctypes里的bug？</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_ctype/</link>
      <pubDate>Mon, 24 Apr 2023 21:20:06 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_ctype/</guid>
      <description>从其它平台迁移而来
起因 以前使用Delphi调用海康SDK时，专门改写过HCNetSDK.h，当时大部分桌面应用还都是32位的，毕竟64位还没彻底普及开（即便现在，还是有一部分桌面考虑兼容性依然是32位）。后来也搞过64位版的，编译没问题，运行就不成功。虽然没成功，但心里还是清楚这基本上是数据类型的问题，由于对64位了解不多，也就一直搁置着。
转Lazarus之后，又搞过一次64位版，还是没成功。后来知道有ctypes这个单元，也知道这是专门针对c语言数据类型的，但一直没去看过。近来又想起这个事，就想一探究竟。
探 直接看源码，其实就是给pascal的数据类型取了个c的别名。要想了解透彻，自已撸码跑一下还是很有必要的：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 program test; uses SysUtils, ctypes; begin writeln(Format(&amp;#39;%-16s%s&amp;#39;, [&amp;#39;type&amp;#39;, &amp;#39;size&amp;#39;])); writeln(&amp;#39;--------------------&amp;#39;); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint8&amp;#39;, SizeOf(cint8)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint8&amp;#39;, SizeOf(cuint8)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cchar&amp;#39;, SizeOf(cchar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cschar&amp;#39;, SizeOf(cschar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuchar&amp;#39;, SizeOf(cuchar)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint16&amp;#39;, SizeOf(cint16)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint16&amp;#39;, SizeOf(cuint16)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cshort&amp;#39;, SizeOf(cshort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csshort&amp;#39;, SizeOf(csshort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cushort&amp;#39;, SizeOf(cushort)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint32&amp;#39;, SizeOf(cint32)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint32&amp;#39;, SizeOf(cuint32)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint64&amp;#39;, SizeOf(cint64)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint64&amp;#39;, SizeOf(cuint64)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clonglong&amp;#39;, SizeOf(clonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cslonglong&amp;#39;, SizeOf(cslonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;culonglong&amp;#39;, SizeOf(culonglong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cbool&amp;#39;, SizeOf(cbool)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cint&amp;#39;, SizeOf(cint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csint&amp;#39;, SizeOf(csint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cuint&amp;#39;, SizeOf(cuint)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clong&amp;#39;, SizeOf(clong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cslong&amp;#39;, SizeOf(cslong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;culong&amp;#39;, SizeOf(culong)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csigned&amp;#39;, SizeOf(csigned)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cunsigned&amp;#39;, SizeOf(cunsigned)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;csize_t&amp;#39;, SizeOf(csize_t)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cfloat&amp;#39;, SizeOf(cfloat)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;cdouble&amp;#39;, SizeOf(cdouble)])); writeln(Format(&amp;#39;%-16s%d&amp;#39;, [&amp;#39;clongdouble&amp;#39;, SizeOf(clongdouble)])); Readln(); end.</description>
    </item>
    <item>
      <title>Lazarus发布v2.2.6版本</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_v2_2_6/</link>
      <pubDate>Thu, 06 Apr 2023 20:43:52 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_v2_2_6/</guid>
      <description>从其它平台迁移而来
2023-03-09，Lazarus 团队宣布发布 Lazarus 2.2.6 版本，这是一个错误修复版本，使用 FPC 3.2.2 构建。
大概在Lazarus 2.2.6发布的第二天吧，就把自己电脑上的Lazarus升级到最新了，一直以来都是这个习惯，基本上从来没怎么关心过具体都更新了哪些内容。
不过，这次心血来潮，把发行日志给大致看了下，看了之后还是有点小收获的，在此记录一二。
版本号 Lazarus是IDE，最终完成编译的是FPC，两者的版本号管理策略和Linux内核的策略类似。以下为笔者总结，实际的版本号管理策略未考证。
版本号格式如下：
1 [主版本号].[次版本号].[修订版本号] 其中，次版本号和修订版本号，奇数为开发版，偶数为稳定版。
发行日志 Lazarus 2.2.x发行日志原文。可以看到，这是2.2.0的发行日志，并非2.2.6的发行日志，说明这是按次版本号统一整理的。
由于内容较多，而且部分内容笔者也没接触/使用过，所以，只拣熟悉的或感觉比较重要的拿出来分享一下。
LazUtils包 移除PasWStr单元 原因：只有当编译器版本低于3.0才包含代码。
补救：不要再使用PasWStr
LCL包 TValueListEditor 旧行为：允许在键列中使用当前的NameValueSeparator（默认情况下：=）。
新行为：不能在键列中使用名称值分隔符。如果在键列中键入名称值分隔符，焦点将移动到值列。如果将其粘贴到列中，它将被删除（没有任何反馈或警告）。
Screen添加了三组新方法 BeginTempCursor / EndTempCursor、BeginWaitCursor / EndWaitCursor和BeginScreenCursor / EndScreenCursor用于临时光标更改，而不是直接设置Screen.Cursor属性。
TGroupBox，TRadioGroup，TCheckGroup Win32旧行为：可以设置属性颜色，它直接显示。
Win32新行为：如果要更改颜色，则必须设置ParentBackground := False;
TFrame Win32旧行为：无法更改TFrame的颜色。
Win32新行为：如果要更改颜色，则必须设置ParentBackground := False;
T(Float)SpinEdit 新增了EditorEnabled属性，以禁用编辑中的直接用户输入。如果设置为False，则用户只能使用微调器或箭头键更改值。
Debugger LazDebugger-FP (FpDebug) v1.0成为Windows和Linux默认的调试器。
GDB(mo)使用修改版的GDB 9.2
笔者补充：FpDebug无法调试dll，需要使用GDB
组件 OpenGL全面支持Qt5的widgetset。
TSpinEditEx 新属性ThousandSeparator允许显示插入了千位分隔符的值。
TFloatSpinEditEx 支持以科学计数法形式的文本进行录入。
新属性DisplayMode，用于控制是否使用科学记数法。
新属性property控制以科学记数法显示值时使用的精度。
还有其它许多更改，详细请看原文。</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——甘特图</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid_gantt/</link>
      <pubDate>Thu, 02 Mar 2023 21:59:59 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid_gantt/</guid>
      <description>从其它平台迁移而来
语法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 gantt %注释 title 这是标题 %输入数据的时间格式 dateFormat YYYY-MM-DD %坐标轴的时间格式 axisFormat %m-%d %排除的时间 excludes weekends %坐标轴刻度，高版本支持 tickInterval 1day %是否显示当天的标记，默认on todayMarker off section 项目A %任务描述 : [任务状态,] [任务名称,] 开始时间, 时长或结束时间 任务1 : done, a1, 2023-03-01, 3d 任务2 : active, a2, after a1, 2023-03-08 里程碑 : milestone, a3, 2023-03-07, 1d section 项目B 任务1 : b1, 2023-03-07, 4000m 任务2 : crit, b2, after a2, 15h gantt %注释 title 这是标题 dateFormat YYYY-MM-DD axisFormat %m-%d excludes weekends %tickInterval 1day todayMarker off section 项目A 任务1 : done, a1, 2023-03-01, 3d 任务2 : active, a2, after a1, 2023-03-08 里程碑 : milestone, a3, 2023-03-07, 1d section 项目B 任务1 : b1, 2023-03-07, 4000m 任务2 : crit, b2, after a2, 15h 输入数据的时间格式 关键字dateFormat后的内容用于声明输入数据的时间格式，具体如下：</description>
    </item>
    <item>
      <title>Lazarus开发环境配置</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_ide_config/</link>
      <pubDate>Sat, 25 Feb 2023 23:52:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_ide_config/</guid>
      <description>从其它平台迁移而来
前言 做为一个桌面应用开发者，工作中一直使用的是Delphi（是语言，也是IDE，基于pascal语言），无论是经典的D7，还是现下最新的XE，都有着还算丰富的使用经验吧，虽然这两者都各有优缺点。做为团队开发成员之一，具体使用什么，几乎是没什么选择权的，毕竟公司有自己的技术栈，当然还有相应的技术债。
但是，做为一个个人开发者，还是比较喜欢严谨的pascal语言的（其实Go的一些语法就是借鉴pascal的，比如：类型在变量右侧），而且还有着那么多年的开发经验，理论上来说，写个小工具啊什么的，还是应该选择熟悉的Delphi才是，但是Delphi并不符合个人的选择条件：
不要太重量级
有当前比较流行的特性
有相对活跃的社区
D7以现在的眼光来看，绝对算是足够轻量级的，整个环境（不含三方组件）安装完还不到1G，但是是毕竟是二十年前的东西了，不说新特性，一些陈年bug就够喝一壶了。
相对来说，XE却是一直在更新着，新特性是有了，但是仅安装包就7~9G，只安装桌面开发必须的自带组件，安装完也有15G+，而且正版授权巨贵，社区版限制又巨多。
至于有相对活跃的社区这条，国外应该还行，但对英文渣渣来说还是有点难了；而国内，Delphi都是快绝迹的语言了，当我什么都没说吧。
所以，选来选去，也就只剩开源的Lazarus和CodeTyphon（基于Lazarus）了。原本是看中了CodeTyphon的，但是死活在Bug10上安装不成功，也就只能选Lazarus了，不过Lazarus倒也是越用越顺心了。
虽说Lazarus标榜的一次编写，到处编译，不过，实际用到的几乎都是windows平台，至于其它平台，有机会再说吧。
开发环境 以下以Lazarus 2.2.4为例。
安装IDE Lazarus有32位版本和64位版本，而且都互相有对方架构的插件包，个人尝试后还是觉得分别安装两个版本比较合适（不要质疑，真的可以同时安装多个版本，不同架构、不同版本号都可以）。
由于Bug10不愧是Bug10，所以个人还是喜欢整成免安装版本，万一哪天Bug10作妖，就不怕重新折腾了。
在非系统盘下手动创建目录，比如D:\lazarus和D:\lazarus\config，前者是IDE的安装目录，后者是IDE的配置目录
下载并运行安装包
在选择目标位置这一步时，选择之前手动创建的安装目录，同时勾选创建一个新的第二的安装（不要质疑，哪怕是第一次安装），下一步
到选择配置文件夹这一步，选择之前手动创建的配置目录，然后一路下一步
安装完之后，把安装目录备份一下，再把IDE卸载了，然后把安装目录恢复了（当然，这一步也可以不做）
运行lazarus.exe，首次运行时（包括未来重装系统后）会弹出Welcom to Lazarus IDE的窗口，其中Fppkg项会有叹号（似乎是2.2版本之后才有的），点Restore Fppkg configuration，再点Write new configuration files，最后点Start IDE
可以为lazarus.exe创建快捷方式
至此，IDE就算是安装完了，需要的话可以把安装目录整个压缩备份，不过个人还是建议把IDE配置好了再备份
IDE配置 构建配置 由于Lazarus每次安装三方组件都要重新build，如果三方组件装得多了，IDE的exe会很大（不是你自己写的exe），而个人又是比较喜欢小巧的，所以这一步是少不了的。
菜单Tools-&amp;gt;Configure &amp;quot;Build Lazarus&amp;quot;
Profile to build项选择Optimized IDE
点Build会立即重新构建IDE；点Save Settings仅保存配置，下次构建时生效
一体式窗口 安装完之后，IDE默认是D7那种分离式窗口，在小分辨率屏幕的时代很有用，不过现在嘛，个人感觉还是一体式窗口比较舒服。Lazarus已经提供了这样的包，只不过默认并没有启用。
菜单Package-&amp;gt;Install/Uninstall Packages ...
右侧选择AnchorDockingDsgn 1.0，点Install selection或双击
点Save and rebuild IDE重新构建，IDE重启之后就是一体式的窗口了
拖动子窗口的标题，会自动吸附，调整为自己喜欢的布局，重启IDE即可
此时，若是不小心把布局调乱了，就不好恢复了，所以可以考虑把自动保存布局功能给关了：
菜单Tools-&amp;gt;Desktops ...，去掉Auto save active desktop的勾，关闭 其它配置 菜单Tools-&amp;gt;Options ...是IDE集中的配置，可依自己习惯或喜好进行配置。不过，倒是可以分享些个人的配置及相应的考虑，以供参考：</description>
    </item>
    <item>
      <title>FPHTTPClient请求https</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_fphttpclient_https/</link>
      <pubDate>Fri, 17 Feb 2023 20:59:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_fphttpclient_https/</guid>
      <description>从其它平台迁移而来
在客户端不需要证书的情况下，简单两步操作即可让TFPHTTPClient实现https的请求：
在源码中引用opensslsockets单元
在生成目录下加入动态库libcrypto-1_1.dll和libssl-1_1.dll</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——流程图</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid_graph/</link>
      <pubDate>Mon, 06 Feb 2023 21:24:16 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid_graph/</guid>
      <description>从其它平台迁移而来
语法 1 2 3 4 5 6 7 --- title: 流程图名称 # 可能会有渲染不支持 --- graph/flowchart [TB/TD|BT|LR|RL] 节点名即内容 节点名1[节点内容] 节点名2[&amp;#34;节点内容&amp;#34;] graph 节点名即内容 节点名1[节点内容] 节点名2[&#34;带引号节点内容&#34;] 节点 1 2 graph 默认节点 graph 默认节点 1 2 graph a1[矩形] graph a1[矩形] 1 2 graph a2(圆角矩形) graph a2(圆角矩形) 1 2 graph a3{菱形} graph a3{菱形} 1 2 graph a4((圆形)) graph a4((圆形)) 1 2 graph a5&amp;gt;旗形] graph a5&gt;旗形] 1 2 graph a6{{尖端矩形}} graph a6{{尖端矩形}} 1 2 graph a7([圆端矩形]) graph a7([圆端矩形]) 1 2 graph a8[\平行四边形1\] graph a8[\平行四边形1\] 1 2 graph a9[/平行四边形2/] graph a9[/平行四边形2/] 1 2 graph a10[/梯形1\] graph a10[/梯形1\] 1 2 graph a11[\梯形2/] graph a11[\梯形2/] 1 2 graph a12[[子程序]] graph a12[[子程序]] 1 2 graph a13[(圆柱形)] graph a13[(圆柱形)] 1 2 graph a14(((双圆))) # 高版本渲染支持 graph a14(((双圆))) 布局 标识 含义 备注 TB/TD 从上到下 默认 BT 从下到上 LR 从左到右 RL 从右到左 TB/TD graph a --&gt; b BT graph BT a --&gt; b LR graph LR a --&gt; b RL graph RL a --&gt; b 连线 普通连线 线形 1单位长 2单位长 3单位长 细实线 --- ---- ----- 细实线箭头 --&amp;gt; ---&amp;gt; ----&amp;gt; 粗实线 === ==== ===== 粗实线箭头 ==&amp;gt; ===&amp;gt; ====&amp;gt; 虚线 -.</description>
    </item>
    <item>
      <title>Mermaid学习笔记之——初识</title>
      <link>https://afrusrsc.github.io/posts/other/mermaid/</link>
      <pubDate>Sat, 04 Feb 2023 16:06:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/other/mermaid/</guid>
      <description>从其它平台迁移而来
一直比较喜欢用Markdown格式写点东西，如：记笔记、列计划等。但是当需要在Markdown中插入一些图片时，尤其是那些会经常发生变动的图片时（例如：流程图），简直痛不欲生，因为需要重新用工具修改图片后再链接进Markdown里。
如果能直接在Markdown里编写并生成图片，简直不要太开心。所幸这个问题已经有大佬给出了解决方案，那就是Mermaid。
个人理解：Mermaid是一种类似于Markdown中代码块高亮渲染的东西，可以把特定的纯文本渲染成对应的图片（流程图等）。Mermaid仅仅是一种渲染，并非Markdown的原生语法，所以，能不能看到图片以及图片最终呈现的样子，还要看对应的编辑器或页面是否对Mermaid进行支持及具体的渲染实现。
语法 在Markdown中嵌入Mermaid，语法与嵌入代码块的语法类似，即原先写c、java等的地方写为mermaid，之间写上具体的Mermaid内容即可。
1 2 3 4 ```mermaid # 开始 graph TD # 类型 Start --&amp;gt; Stop # 具体内容 ``` # 结束 经渲染后如下：
graph TD Start --&gt; Stop 分类 1. 流程图 见上面的示例。
2. 时序图 1 2 3 4 sequenceDiagram Alice-&amp;gt;&amp;gt;John: Hello John, how are you? John--&amp;gt;&amp;gt;Alice: Great! Alice-)John: See you later! sequenceDiagram Alice-&gt;&gt;John: Hello John, how are you? John--&gt;&gt;Alice: Great! Alice-)John: See you later! 3. 类图 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 classDiagram Animal &amp;lt;|-- Duck Animal &amp;lt;|-- Fish Animal &amp;lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } classDiagram Animal &lt;|-- Duck Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } 4.</description>
    </item>
    <item>
      <title>Lazarus连数据库的那点坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_connection/</link>
      <pubDate>Sat, 24 Dec 2022 22:03:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_connection/</guid>
      <description>从其它平台迁移而来
环境 Lazarus v2.2.4(32位/64位)
MySQL 8.0.31 64位
PostgreSQL 15.1 64位
坑 MySQL Lazarus v2.2.4已内置MySQL8.0的TMySQL80Connection组件，但是连接时却提示Can not load MySQL library &amp;quot;libmysql.dll&amp;quot;. Please check your installation.使用64位编译，放进64位MySQL8.0.31的libmysql.dll仍然报该错，一直到把版本降到5.7系列才正常，换32位编译，同样的结果：使用5.7系列的libmysql.dll可正常使用。
PostgreSQL 连接PostgreSQL时，同样遇到与MySQL类似的报错：Can not load PostgreSQL client library &amp;quot;libpq.dll&amp;quot;. Check your installation.按照与MySQL相同的思路，版本从15.1一直降到目前支持的最低版本9.2.24，仍然报错！
查一下官方论坛，各种方式试了一通，发现64位的程序除libpq.dll外，v11+还需要libcrypto-3-x64.dll、libiconv-2.dll、libintl-9.dll、libssl-3-x64.dll和libwinpthread-1.dll；v9.4~v10.23还需要libcrypto-1_1-x64.dll、libiconv-2.dll、libintl-8.dll、libssl-1_1-x64.dll。
而32位程序，最高可用版本为v10.23，除libpq.dll外，还需要libcrypto-1_1.dll、libiconv-2.dll、libintl-8.dll、libssl-1_1.dll，必要时可能还需要VC运行时。</description>
    </item>
    <item>
      <title>Lazarus的dll卸载问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_unload/</link>
      <pubDate>Sat, 10 Dec 2022 22:26:44 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_unload/</guid>
      <description>从其它平台迁移而来
事件 计划做一个插件式的桌面应用框架，一方面练练手，另一方面算是自身的技术积累吧。
在练手过程中，发现一个巨难受的问题，dll卸载不掉，程序直接假死！
虽然可以不直接调用卸载，依赖主程序退出时卸载的特性，但做为插件式应用，必须能在运行中加载/卸载才算完整。即便不是插件式应用，dll的正常卸载也应该是很常用的功能，现在不正常，那么一定是代码写得有问题。
写了测试Demo，一行一行加代码，结果都能正常卸载，这就杯具了……测试了无数次，直到想把每一步都输出到日志时，dll无法卸载了。一点点分析源码后，发现很可能是日志中为了方便使用，加的initialization节和finalization节导致的，注释掉之后就真的正常了。
分析 initialization节应该是在Application.Initialize;时执行的，finalization节应该是在Application.Terminate;之后的某个时间点执行的（具体执行时机没深入研究过）。而我的dll是要做成插件的，不可避免会有可视化窗体，所以Application.Initialize;不可避免（Lazarus是这样，Delphi不是），而在initialization节中创建了日志记录器实例，在finalization节中进行释放，这样，在卸载dll时就出现了锁死的情况：卸载时有内存（实例）未释放，需要等内存释放了才能完全卸载，而未卸载又导致执行不到finalization节，就不能释放实例……于是，dll无法卸载，程序就进入假死状态。
以上只是初步分析，鉴于对底层机制了解不深，可能分析不完全正确，甚至是错误的。
结论 在编写的dll中不要在initialization节和finalization节中进行内存管理的工作。 对于无对象、纯函数式的dll，initialization节和finalization节会不会产生影响尚未测试，目前也暂无这方面需求，待以后遇到了再详细测试吧。</description>
    </item>
    <item>
      <title>Lazarus debug的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_debug/</link>
      <pubDate>Sun, 20 Nov 2022 23:44:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_debug/</guid>
      <description>从其它平台迁移而来
最近在研究Lazarus写dll，已经踩了不少坑了，这下又踩了个不大不小的坑，记录下。
问题 在dll工程里，断点失效，根本没办法调试 解决方案 网上查了N多资料，个中辛酸在此不表，终于找到些蛛丝马迹。
Lazarus在windows上默认使用的是FpDebug内置的Dwarf，这货本身就不支持在dll中调试，法了个克！切换为gdb，立马OK！
不过，据说gdb在windows上有bug，这……反正FpDebug的bug遇到了也不是一个两个了，先用着再说。</description>
    </item>
    <item>
      <title>Lazarus编写dll与接口注意事项小结</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_api/</link>
      <pubDate>Tue, 13 Sep 2022 20:40:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_dll_api/</guid>
      <description>从其它平台迁移而来
之前用lazarus编写了使用IInterface的dll，可惜没有成功。当把IInterface编译到exe里时，功能正常，编译到dll里再在exe里调用就不正常，原因未深究，不过大致也知道是哪一类问题，至于还有没有其它问题，暂未可知。
闲来有空，有写了点Demo来，有了不少新发现，在此记录下：
只有使用exports导出的函数才能在dll外部调用
只有使用stdcall修饰的函数传参规则才与标准C的传参规则相同，其它遵守标准C传参规则的语言可以正常调用；否则，只有lazarus编写的程序可以正常调用
入参为string类型时，无论是否使用stdcall修饰，lazarus编写的程序调用正常，其它语言未测试
返回值或出参为string类型时，调用报External: ACCESS VIOLATION错误；但参数为PChar时，调用正常
入参/出参/返回值为结构体时，调用正常
string类型传参是指针/引用拷贝，结构体传参是值拷贝
string做入参时，由主调函数分配内存并增加引用计数，被调函数执行时再次增加引用计数，被调函数结束时减少引用计数，此时引用计数不为0不释放内存，主调函数结束时再次减少引用计数，引用计数为0释放内存，该内存由exe分配，因此释放不报错；做出参时，由被调函数执行时分配内存并增加引用计数，被调函数返回时先赋值给主调函数的变量，增加引用计数，再结束被调函数，减少引用计数，主调函数结束时再次减少引用计数，此时引用计数为0释放内存，但该内存是由dll分配，因此产生External: ACCESS VIOLATION错误
string类型不适合在dll和exe之间传参（尤其是出参）
返回值为对象时，调用异常；入参/出参为exe创建的对象时，调用正常
结论 根据测试得出的结论，可能不严谨：
指针做为形参（入参/出参）传递没有问题，但必须遵守谁创建谁释放的原则；指针做为返回值可能会有隐患
对象传参实际传的是对象的指针，规则与指针相同
返回值适合传递值拷贝的类型，如整型、浮点型、布尔型、结构体、指针（但指针指向的内存要遵守谁创建谁释放的原则，不过一般不直接使用）等
字符串、结构体的生命周期是由编译器维护的，使用需慎重</description>
    </item>
    <item>
      <title>*.frf报表中字段计算的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/fastreport_frf_calc/</link>
      <pubDate>Wed, 31 Aug 2022 23:40:11 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/fastreport_frf_calc/</guid>
      <description>从其它平台迁移而来
老坑 *.frf是FastReport 2.x的报表模板，现维护的老项目中有使用到该报表。
问题描述 报表通过数据集DS和报表变量V1、V2、V3等获取数据，并在模板中进行展示。
单独展示数据集中的某个字段：[DS.&amp;quot;D1&amp;quot;]
展示数据集中的某两个字段的运算结果：[[DS.&amp;quot;D1&amp;quot;]+[DS.&amp;quot;D2&amp;quot;]]
单独展示某个变量：[V1]
展示数据集中的某个字段与变量的运算结果：[[DS.&amp;quot;D1&amp;quot;]+[V2]]
以上都是没有问题的，但当需要展示两个变量的运算结果时就不行了，[V1]+[V2]实际展示的是两个变量的字符串连接，因为报表变量本来就是字符串。查看模板其它写法，发现有使用尖括号&amp;lt;&amp;gt;的，尝试后也不行，[V1]+&amp;lt;V2&amp;gt;实际展示的只有V2的值。
由于报表变量本身就是字符串，想着通过数据类型转换来解决，但非常遗憾，报表没有提供把字符串转为数值的函数。
实在不行就只能考虑在代码中计算完之后再赋值给报表变量了，但这样就牺牲了报表的灵活性了，乃是没有办法的最后的办法了。
最后灵光一现，既然数据集字段与变量可以运算，那加个0是不是也可以运算？一试果然可行！
结果 展示某两个变量的运算结果：[0+[V1]+[V2]-[V3]] 问题解决了，不过总感觉是个偏方，不晓得正统的解决方案是什么。
不过话说回来，FastReport 2.x已经很古老了，除了老项目维护基本不可能会用到，因为现在连FastReport 3+用得都很少了，毕竟现在已经是什么乱七八糟的牛鬼蛇神都有的元宇宙时代了，能解决问题就好。</description>
    </item>
    <item>
      <title>Lazarus压缩/解压zip乱码问题</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip01/</link>
      <pubDate>Wed, 24 Aug 2022 22:10:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_zip01/</guid>
      <description>从其它平台迁移而来
Lazarus压缩/解压zip文件可以使用Zipper单元中的TZipper/TUnZipper类来实现，但是在有中文文件名时需要注意，否则会出现乱码。
压缩 TZipper的Zip类方法无需创建实例即可直接生成zip压缩文件。
TZipper实例的ZipFile方法是压缩一个指定的文件生成zip压缩文件，ZipFiles方法是压缩多个指定的文件生成zip压缩文件，UnZipAllFiles方法是配合Entries等属性生成zip压缩文件。
解压 TUnZipper的UnZip类方法无需创建实例即可直接解压zip文件。
TUnZipper实例的UnZipFile方法是解压出一个指定的文件，UnZipFiles方法是解压出多个指定的文件，UnZipAllFiles方法可以从zip文件中解压出所有文件。
乱码 无中文文件名的情况下，以上类方法和实例方法使用都是正常的，与其它压缩/解压工具交叉使用也不会出现问题。
当存在中文文件名时，成对使用以上压缩/解压方法，从结果上来说是没什么问题的，但与其它压缩/解压工具交叉使用时就会出现文件名乱码问题。
乱码其实还是字符编码的问题，Lazarus默认使用UTF8编码，windows默认使用OEM对应的编码，对于中文windows就是GBK编码，于是就出问题了。
解决方案 TZipper有UseLanguageEncoding属性，TUnZipper有UseUTF8属性，均设置为True，再进行压缩/解压即可，因此，类方法是肯定不行的了。
不过，这两个属性在语意上却十分让人费解，因为属性为False时，zip文件头里的文件名实际使用的是UTF8编码，而当属性为True时，zip文件头里的文件名实际使用的却是GBK编码，搞不懂这些老外的想法。
对了，好像要使用FPC 3.2.0+的编译器版本才可以。</description>
    </item>
    <item>
      <title>Go的时间格式化</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_format_datetime/</link>
      <pubDate>Wed, 27 Jul 2022 21:33:56 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_format_datetime/</guid>
      <description>从其它平台迁移而来
就个人而言，对Go的整体评价还是相当不错的，直到遇到了时间格式化。有人说，这是大佬们的浪漫。
直接说对应关系吧：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 //年 2006 &amp;lt;=&amp;gt; yyyy 06 &amp;lt;=&amp;gt; yy //月 01 &amp;lt;=&amp;gt; MM 1 &amp;lt;=&amp;gt; M //日 02 &amp;lt;=&amp;gt; dd 2 &amp;lt;=&amp;gt; d //时 15 &amp;lt;=&amp;gt; hh 3 &amp;lt;=&amp;gt; h //分 04 &amp;lt;=&amp;gt; mm 4 &amp;lt;=&amp;gt; m //秒 05 &amp;lt;=&amp;gt; ss 5 &amp;lt;=&amp;gt; s go 1.20+在time包中又增加了time.DateTime、time.DateOnly、time.TimeOnly三个常量，分别对应2006-01-02 15:04:05、2006-01-02、15:04:05，再也不用专门去记对应关系了。</description>
    </item>
    <item>
      <title>idhttp POST的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_idhttp_post/</link>
      <pubDate>Tue, 12 Jul 2022 21:47:37 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_idhttp_post/</guid>
      <description> 从其它平台迁移而来
坑 最近要和一个平台提供的http接口进行对接，由于服务不是部署在公网上的，所以没办法直接在开发环境下直接调试，又不能在客户的测试机上部署开发环境，只能选择加日志这种古老的方法。
在对接过程中却出现了莫名其妙的问题：POST的内容是一样的，但返回的内容却不一样，更准确点说是有的接口返回正常有的返回不正常（其实还是测试有限，测试多的话还会出现同一接口有的请求正常有的不正常）。
平台提供的word接口文档写得真的是……一言难尽，由此也对接口的准确性、可靠性等保持怀疑。不过，这次用我们提供的数据，平台方给出了相应的中间结果（中间结果一致）及返回结果，还有postman和curl的测试截图，充分证明接口以及数据请求是没有问题的。
在客户测试机上装了curl测试也证明接口没问题。（问为什么一开始没想到用curl？因为windows默认没有，而且utf8还会显示乱码，习惯性的就没想起来用）
请求头也改了，没用一样的效果。
最后实在找不出问题，就只能进行TCP抓包了，这一抓还就真抓出问题了：
原始数据
1 /knwRBV5D4Qtk7RzoQhtBUSMXQig3zURYmeSQBB17NVr6qddCkTxS7e0oO/qfNCkuX14vGsxEoLLN4KS5vtQWDs5on+GeAE5LadCZuHDCe7M25GitNKqnsCfC5qVmti1LyxLxYg2JpLP6GylWERWBOmbP2yO2Aiuey6V526rlRICnidM1W0A4ziNMSjGCng0n5Md4so/RjswNdcE4C5F0kBEGRWH0ZK+QdkZMs4zL84Pu/aiSMpiID9Mm+jtdLZuk0m0UtEd1MmxnU2KPdQz9057JAtM5LIj4YenZl3J86OPWtb9DE6a+410CWBawZY1vItZ+43Kh/QPnkw6Qe4toXRnF84X/ijtiWkTt4moJT87xDpf/TXEd7LRkddWPRRGF3KHnUKacLySwMmXkU6CQMazE1Kh1ZGML6zl1weaq4xVulFwhGfp2XKzYdZfT3uq4yqVr30AaEqYoy2/P1MkhTs5on+GeAE54r939gdklpefguipLJVBpWk/B5S9QsCDxDbfGYNxJo3rIAxDL7sjjlmVL1RjU86sHsNIbmRii7dL70pf5qcIMJzryGmtn94SAE2HjLw0abfr0A9amRsdIzs5on+GeAE5RIxdCKDfNRFnPqLzNU5stMSDcpuafJpNhUXDbQOMlPungXJHHZAgbE2XtoI4geIRYjiyBLDMQuB0l5WvfDhpRnYo1VaEu7J0tRuezwUplK61p4I8giLwAtO+yNMRV+J65g9XaT8vmf8gxmtK3wEFrve7HwsYH0QhlQQiMilY/JVsiHZS6+ID/w== 发送后抓到的却是
1 /knwRBV5D4Qtk7RzoQhtBUSMXQig3zURYmeSQBB17NVr6qddCkTxS7e0oO/qfNCkuX14vGsxEoLLN4KS5vtQWDs5on+GeAE5LadCZuHDCe7M25GitNKqnsCfC5qVmti1LyxLxYg2JpLP6GylWERWBOmbP2yO2Aiuey6V526rlRICnidM1W0A4ziNMSjGCng0n5Md4so/RjswNdcE4C5F0kBEGRWH0ZK+QdkZMs4zL84Pu/aiSMpiID9Mm+jtdLZuk0m0UtEd1MmxnU2KPdQz9057JAtM5LIj4YenZl3J86OPWtb9DE6a+410CWBawZY1vItZ+43Kh/QPnkw6Qe4toXRnF84X/ijtiWkTt4moJT87xDpf/TXEd7LRkddWPRRGF3KHnUKacLySwMmXkU6CQMazE1Kh1ZGML6zl1weaq4xVulFwhGfp2XKzYdZfT3uq4yqVr30AaEqYoy2/P1MkhTs5on+GeAE54r939gdklpefguipLJVBpWk/B5S9QsCDxDbfGYNxJo3rIAxDL7sjjlmVL1RjU86sHsNIbmRii7dL70pf5qcIMJzryGmtn94SAE2HjLw0abfr0A9amRsdIzs5on+GeAE5RIxdCKDfNRFnPqLzNU5stMSDcpuafJpNhUXDbQOMlPungXJHHZAgbE2XtoI4geIRYjiyBLDMQuB0l5WvfDhpRnYo1VaEu7J0tRuezwUplK61p4I8giLwAtO+yNMRV+J65g9XaT8vmf8gxmtK3wEFrve7HwsYH0QhlQQiMilY/JVsiHZS6+ID/w=%3D 最后的=被转码为%3D了！
解决 找到原因就好办了
1 2 //idhttp.HTTPOptions := [hoForceEncodeParams]; //默认强制对参数进行转码 idhttp.HTTPOptions := []; //去掉就OK了 </description>
    </item>
    <item>
      <title>Lazarus构造/析构等方法的执行顺序</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_order/</link>
      <pubDate>Fri, 24 Jun 2022 22:53:40 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_order/</guid>
      <description>从其它平台迁移而来
AfterConstruction、BeforeDestruction是TObject本身就有的方法，Loaded是从TComponent才有的方法，好好利用的话就可以更精准的控制对象的生命周期或者初始化/清理工作。虽然知道这点，而且也经常在自己的程序中使用，但还是会经常搞错执行顺序，因此专门记录一下以备忘备查。
Form graph TD f1[inherited Create 前] --&gt; f2[inherited Loaded 前] --&gt; f3[inherited Loaded 后] --&gt; f4[inherited Create 后] --&gt; f5[inherited AfterConstruction 前] --&gt; f6[FormCreate] --&gt; f7[inherited AfterConstruction 后] --&gt; f8[FormResize] --&gt; f9[FormShow] --&gt; f10[FormCloseQuery] --&gt; f11[FormClose] --&gt; f12[inherited BeforeDestruction 前] --&gt; f13[FormHide] --&gt; f14[FormDestroy] --&gt; f15[inherited BeforeDestruction 后] --&gt; f16[inherited Destroy 前] --&gt; f17[inherited Destroy 后] DataModule graph TD d1[inherited Create 前] --&gt; d2[inherited Loaded 前] --&gt; d3[inherited Loaded 后] --&gt; d4[inherited Create 后] --&gt; d5[inherited AfterConstruction 前] --&gt; d6[DataModuleCreate] --&gt; d7[inherited AfterConstruction 后] --&gt; d8[inherited BeforeDestruction 前] --&gt; d9[DataModuleDestroy] --&gt; d10[inherited BeforeDestruction 后] --&gt; d11[inherited Destroy 前] --&gt; d12[inherited Destroy 后] Frame graph TD f1[inherited Create 前] --&gt; f2[inherited Loaded 前] --&gt; f3[inherited Loaded 后] --&gt; f4[inherited Create 后] --&gt; f5[inherited AfterConstruction 前] --&gt; f6[inherited AfterConstruction 后] --&gt; f7[FrameResize] --&gt; f8[inherited BeforeDestruction 前] --&gt; f9[inherited BeforeDestruction 后] --&gt; f10[inherited Destroy 前] --&gt; f11[inherited Destroy 后] 总结 Loaded是在Create的过程执行的，应该是用来做一些加载资源之类或其它辅助构造的工作</description>
    </item>
    <item>
      <title>Lazarus速查</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_info/</link>
      <pubDate>Thu, 23 Jun 2022 22:55:57 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_info/</guid>
      <description>从其它平台迁移而来
Package-&amp;gt;Install/Uninstall Packages AnchorDockingDsgn：安装后转为一体式IDE
LazActiveX：安装后可安装ActiveX组件
lazdaemon：可开发windows服务
lazprojectgroups：使IDE支持工程组
lazvlc：VLC 播放器组件，需要V2版本以上的libvlccore.dll和libvlc.dll
Package-&amp;gt;Online Package Manager DBTreeViewAndDBCntrlGrid：可从数据集中把树型数据直接显示为树
DCPcrypt：常用加密/解密，如DES、3DES、AES、RC2、RC4、RC5、RC6、MD4、MD5、SHA1、SHA256、SHA384、SHA512等
自带单元 fpjson、jsonscanner、jsonparser：自带JSON
jsonConf：JSON配置
fphttpclient：HTTP客户端
fphttpserver：HTTP服务端
base64：BASE64编码/解码
md5：MD2、MD4、MD5算法
sha1：SHA-1(RFC 3174)算法
crcCRC32、CRC64和CRC128算法
开源库 dataset-serialize：数据集与JSON序列化/反序列化
CEF4Delphi：谷歌浏览器内核，依赖DCPcrypt</description>
    </item>
    <item>
      <title>Lazarus报Error: Undefined symbol</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_undefined_symbol/</link>
      <pubDate>Mon, 06 Jun 2022 21:59:18 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_undefined_symbol/</guid>
      <description>从其它平台迁移而来
在使用Lazarus编写动态库的过程中遇到了报Error: Undefined symbol:错误的问题，死活编译不过去，加了LCL包依赖也不行，找了N久终于在一个英文网站上找到了解决办法。
Error: Undefined symbol:错误会依据所写的代码用到的单元不同而有一定的差异，我遇到的报错大致如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 project1.lpr(18,1) Error: Undefined symbol: WSRegisterCustomImageListResolution project1.lpr(18,1) Error: Undefined symbol: WSRegisterMenuItem project1.lpr(18,1) Error: Undefined symbol: WSRegisterMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterMainMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterPopupMenu project1.lpr(18,1) Error: Undefined symbol: WSRegisterDragImageListResolution project1.lpr(18,1) Error: Undefined symbol: WSRegisterLazAccessibleObject project1.lpr(18,1) Error: Undefined symbol: WSRegisterControl project1.lpr(18,1) Error: Undefined symbol: WSRegisterWinControl project1.lpr(18,1) Error: Undefined symbol: WSRegisterGraphicControl project1.</description>
    </item>
    <item>
      <title>Navicat连接Oracle数据库的坑</title>
      <link>https://afrusrsc.github.io/posts/db/navicat_oracle/</link>
      <pubDate>Wed, 25 May 2022 21:11:03 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/navicat_oracle/</guid>
      <description>从其它平台迁移而来
坑 首次使用Oracle数据库，习惯性的用Navicat连起来，嗯？？？怎么报错连不上？
数据库安装有问题？SQL Plus能连上啊！
检查配置，没问题！
重启，还是不行！
重装Navicat，然并卵！
解决 出现解决不了的问题，那就果断面向搜索引擎，看了好多文章，也试了个遍，甚至都开始更换dll了，最后发现其实还真和dll有关系。
这是默认的配置，可以看到，OCI用的是Navicat自带的oci.dll，换成Oracle安装路径的oci.dll，重启Navicat，完美！</description>
    </item>
    <item>
      <title>慎用 out</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_use_out/</link>
      <pubDate>Wed, 15 Dec 2021 11:29:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_use_out/</guid>
      <description>从其它平台迁移而来
最近需要评估一下海康摄像头不同抓拍方式的性能，以及封装类的可靠性。
在测试过程中，又发现了当初遇见的设备内存抓拍报错的问题。当初排查的结论是：当封装类开启预览的情况下，使用设备抓图有较高概率抓拍失败。由于预览是必需的，最终选择了预览抓拍。
现在，换用lazarus进行测试，发现设备抓图必失败，与是否预览无关。一点点调试，发现直接调用SDK原始方法进行设备抓图正常，使用封装类的设备抓图就不行，那肯定是封装类出了问题。
最终发现，封装类的设备抓图使用了out来修饰参数，参数是TMemoryStream和TJPEGImage对象，尝试去掉out修饰符，然后就一切正常了。
记得很久前专门研究过out和var修饰符的区别，当时查阅的结果是：out和var修饰的参数都是传址的，区别是out会对参数进行初始化，而var则不会。
另外，参数为对象的情况，实际也是传址的。
本次发现的问题可能就是使用out来修饰对象参数导致的，但并没有进行进一步的测试。
附 测试环境 操作系统：win10
硬盘：SSD
测试结果 子码流预览抓图，耗时毫秒级；主码流预览抓图，耗时10+毫秒级
预览抓图比设备拍图耗时少得多，设备抓图在100+毫秒级
在相同分辨率情况下，预览抓图的文件大小比设备抓图的略大</description>
    </item>
    <item>
      <title>配置Lazarus免重装</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/lazarus_install/</link>
      <pubDate>Sun, 10 Oct 2021 11:21:03 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/lazarus_install/</guid>
      <description>从其它平台迁移而来
事件 过了个十一，原本好好的电脑，突然鼠标不能用了，本着重启能解决80%的问题的原则重启了下，结果就杯具了，直接就蓝屏了，怎么折腾都进不了系统，BUG 10果然是BUG 10，绝对名不虚传！
无奈，只剩下重装系统这一条路了，装完系统之后还要装一堆软件，还要把软件配置成自己的习惯，还有其它一些细节工作……要把这些都做完才能大致恢复到原先的样子，想想就各种不爽。
虽然已经尽可能的使用免安装/重装的软件了，但还是避免不了有一些软件必须要重装才能使用的情况，唉~
其中最令人头疼的就是开发环境了，几乎绝大部分都要重装，Lazarus就是其中之一，先前已经尝试过了，离成功只差一步了，这次终于搞定了，记录下来。
免重装 正常安装Lazarus
首次启动Lazarus会弹出初始配置界面，关闭
打开Lazarus的根安装目录，新建一个config文件夹
打开C:\Users\xxx\AppData\Local\lazarus文件夹(xxx为用户名)，复制里面所有内容到config
找到Lazarus的快捷方式，右键属性，在目标里原有内容后面添加 --pcp=.\config(注意前面有空格)，确定
把修改好的快捷方式复制到Lazarus的根安装目录下，供以后使用
删除C:\Users\xxx\AppData\Local\lazarus文件夹
使用刚才的快捷方式启动Lazarus，进行个性化设置、安装组件等
以后重装系统了直接使用快捷方式启动Lazarus即可
如果安装的组件全部都在Lazarus的安装目录下，整个Lazarus的安装目录即为一个便携式的IDE了
为避免如果使用过程中出现莫名其妙的现象，建议把Lazarus的安装目录下的ssleay32.dll、libeay32.dll、Qt5Pas1.dll和Qt4Pas5.dll复制到C:\Windows\System32或C:\Windows\SysWOW64下
本文参考了https://blog.csdn.net/love3s/article/details/7450339
附 在命令行进入Lazarus的根安装目录，运行lazarus.exe -?
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 lazarus [options] &amp;lt;project-filename&amp;gt; IDE Options: --help or -?</description>
    </item>
    <item>
      <title>恶心的Access时间查询</title>
      <link>https://afrusrsc.github.io/posts/db/access_time/</link>
      <pubDate>Mon, 10 May 2021 21:58:30 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/access_time/</guid>
      <description>从其它平台迁移而来
背景 客户使用的是南方XX的生产控制系统，需要把数据导入到我们自己的系统里，之前做过类似的东西，不难。
当看到南方XX使用的是Access数据库里，心中一沉……（此处省略1024G脏字）不管心中有多少头神兽奔腾而过，该做的事情终究还是要做的，谁让人家里客户是金主呢。
坑来了 代码写好了，测试也没问题（小BUG什么的分分钟搞定，不算数），通过！
然后等着定时器，看第二回合是否通过。结果，卡卡卡的报主键重复！！！墨菲定律再次生效！
查日志、打断点……一波操作后发现，是Access的时间过滤SQL执行结果和预期不一样！
在Access里执行，正常！在程序里（ADO）执行，异常！！（此处再次省略1024G脏字）
开启面向搜索引擎编程模式，浪费一把又一把生命后（论浪费生命，某垃圾度绝对功不可没），终于找到了解决方案：
1 SELECT * FROM 表 WHERE 时间字段&amp;gt;CDate(&amp;#39;字符串型的时间条件值&amp;#39;) 吐槽 （此处直接省略1024T脏字）
微软早期的东西自己和自己都范冲，真是垃圾得不能再垃圾了，呃~不好意思，侮辱垃圾了！
福利？ 分享个图吧，不知道算不算福利，反正我是差点笑岔气儿！</description>
    </item>
    <item>
      <title>踩坑记：DBGridEh中取Footer的Sum值</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/ehlib_dbgrideh_footer_sum/</link>
      <pubDate>Wed, 24 Mar 2021 16:26:13 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/ehlib_dbgrideh_footer_sum/</guid>
      <description>从其它平台迁移而来
DBGridEh算是Delphi中比较好用的第三方数据感知组件了，但其中有些小坑是真的有点小无语的。
场景 客户需要的有这样一组数据，大部分列是要求和的，用DBGridEh的Footer是轻松加愉快的；但是个别列是和每一行的计算方法一致的，用求和反倒是大错特错的，所以要求针对这些个别列按照给定的算法进行计算后显示在Footer中。
坑 Footer有个ValueType和Value属性，汇总类型是通过ValueType设置的，习惯性的以为汇总值是通过Value来读写的。
然而，事实并非如此！
对于求和列，DBGridEh1.Columns[i].Footer.Value的值一直是&#39;&#39;空串，要想取得求和列的汇总值，正确的打开方式是DBGridEh1.GetFooterValue(0,DBGridEh1.Columns[i])！这简直是反人类啊有木有！
后记 这是第二次踩这个坑了，记录下，给自己长点记性！事不过三！！
另外，公司使用的版本比较老，新版本可能没有这些问题了，不太清楚，暂时没空去求证。</description>
    </item>
    <item>
      <title>安装 CodeTyphon</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/codetyphon_install/</link>
      <pubDate>Sun, 07 Feb 2021 09:29:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/codetyphon_install/</guid>
      <description>从其它平台迁移而来
一直想找个开源的可以商用的Delphi的替代品，能跨平台了最好。开始时试过Lazarus，和D7还真是挺像的，不过用惯了XE，还是想找个习惯相似的IDE，扒拉下论坛后发现了CodeTyphon，就想着试一下。
下载 下载就不多说了，网上很容易找到，而且官方wiki写得也很好，英文好的可以直接看，像我这样的英语渣渣，还是有必要慢慢去啃的。
CodeTyphon下载后只有一个CodeTyphonIns.zip的压缩包，无论是Windows、Linux还是MacOS，安装包都是它，因为不管在哪个平台上安装，都是要编译的。
安装 解压CodeTyphonIns.zip得到CodeTyphonIns
在Windows平台，以管理员方式运行install.bat；在类unix平台，先cd CodeTyphonIns，再sudo ./install.sh
出现以下界面，输入0
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ==================================================== CodeTyphon Studio Version 7.30 (GEN 7) Installation for Linux-Solaris-Openindiana-MacOS FreeBSD-NetBSD-OpenBSD-DragonFly ==================================================== -----WARNING------ WARNING ----WARNING------- You tryng to install CT as root This is NOT the correct procedure. You MUST start CodeTyphon Installation as normal user with sudo root privileges --------------------------------------------- 0) Install CodeTyphon Studio (remove old first) 1) Update CodeTyphon Studio 2) Remove CodeTyphon Studio 9) Exit &amp;gt;&amp;gt;&amp;gt; Select an action (press 0.</description>
    </item>
    <item>
      <title>愚蠢的 SQL Server</title>
      <link>https://afrusrsc.github.io/posts/db/sqlserver_bug/</link>
      <pubDate>Thu, 04 Feb 2021 15:56:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/sqlserver_bug/</guid>
      <description>从其它平台迁移而来
今天在SQL Server的坑里跌得鼻青脸肿，折腾两三个小时，终于爬了出来，特此纪念一下，并以此明志！
背景 传统行业的老旧ERP项目
数据库在公司服务器上，版本为SQL Server 2000，本地使用的数据库为SQL Server 2008 R2，数据库工具为Navicat
多数查询是从视图里查
部分业务是写在存储过程里
案发过程 业务功能扩充，需要在数据库中增加几个字段，于是直接从本地SQL Server 2008 R2连接公司SQL Server 2000，在表适当的位置插入所需字段，然后在Navicat中修改对应的视图和存储过程。
然后，奇怪的事情发生了，程序运行未报错也无错误日志，但就是出不来数据！
打断点，跟踪调试，发现程序抛了个异常，但是没有任何代码能捕获到，而且也并未层层抛出，不知道中间哪个环节被吃了！先不管是哪吃了，把异常处理了应该就没问题了，毕竟之前都是正常的。
异常是类型不兼容和类型转换错误，好嘛，开始排查存储过程调用……一切正常！
把查询的SQL输出，在Navicat中查询，也无结果！把查询条件去掉，结果出来了！排查条件吧，结果发现条件没问题！这TM就有点让人抓狂了！！！
如此这般折磨几遍之后，结果丝毫没有任何改变！法了个克！
还是先喝口水压压惊吧，然后！居然！！竟然！！！发现了不正常的东西！！！！一个布尔型的字段里居然出现了字符串！！！！！
再次排查存储过程，存储过程正常！
排查视图，视图不正常，但视图的SQL是正确的！这TM是个什么鬼情况？？？
百思不得其解！
再喝口水压压惊，把整个修改过程回忆一遍，灵光一闪，发现了点蛛丝马迹：修改视图时，只是在Navicat中确认了下视图的SQL是否正确，因为是正确的，所以并未进行修改！嗯，问题可能就是出在这里！！！
那就在SQL Server 2008 R2里看一下吧，然后就发现了真相！我只想说：法了个克！！！
重新修改视图，问题解决！
真相 真相就是：
自作聪明的SQL Server其实愚蠢到令人发指！！！
罢了，还是好好说话吧。
其实问题还是出在插入字段的这操作上，正常情况下可能是不会出什么问题的，但是当遇到视图里使用SELECT a.*, b.xx, c.xx ...这种方式时，问题就来了。
Navicat中看到的还是SELECT a.*, b.xx, c.xx ...这种方式，但是在SQL Server中却变成了SELECT a.f1, a.f2, a.f3, b.xx, c.xx ...这种方式，本来这也没什么大不了的，但是偏偏在对a表插入（并非追加）字段时就出问题了，因为SQL Server自己按字段顺序把原有的字段AS成了新字段，由于插入了字段，于是后面的字段就都错位了，结果自然就是驴唇不对马嘴了！
思考 基于这次的发现，估计在SQL Server中调整字段的顺序也有可能会出现类似的情况，不过没有去测试验证，以后有时间了再说吧（不过估计不会再有时间了吧，就算有时间估计也不会去折腾讨厌的SQL Server吧）。
另外，服务器的数据库是SQL Server 2000，修改时用的是SQL Server 2008 R2，还不好就此说这是哪个版本出现的问题，也许新版本已经解决过了吧，这还是留给有心的朋友去研究吧。
最后，我只想说，MySQL它不香么？PostgreSQL它不香么？为什么要把时间浪费在SQL Server上？</description>
    </item>
    <item>
      <title>安装LMDE</title>
      <link>https://afrusrsc.github.io/posts/os/lmde_install/</link>
      <pubDate>Mon, 14 Dec 2020 16:57:26 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/os/lmde_install/</guid>
      <description>从其它平台迁移而来
背景 一直以来，都对Linux心中神往，一直以来，也都对bug 10(win 10)深恶痛绝，但是对Linux却始终是浅尝辄止——要么是在虚拟机里玩，要么就是wls，真要装在真机上也不过是停留在安装完而已，真正用起来还是差得太多太远。
不要跟我提wls2，用这货还得升到最新的bug 10，少不了又是自动升级又是各种应用什么的，那可一点儿都不纯净，还是现在用的LTSC勉强能将就，虽然还是动不动就会自动升级，而且通常还是升级失败再回滚的二货，但是比那种二货都不如的还是要强一些的。
前段时间老婆打下来一台旧笔记本，i3 M370，4G内存，500G机械盘，也是实实在在的老古董了(还有更老的台机在角落里吃土呢)，但质量还是不错的，运行也还算稳定，就动了心思准备拿来搞Linux，实实在在用起来。
选择发行版 Linux的发行版还是非常多的，鉴于以前捣鼓的大多都是Debian系的，这次还打算入手Debian系，至于Redhat系，以后再说吧。
由于是老爷机，桌面环境想要在稳定的基础上尽可能轻量。至于不要桌面环境，彻头彻尾地搞tty，心里还是发怵的，毕竟是以学习为主，免不了要上网查资料，而且我这英语渣渣还是不要搞得太有挑战性，免得一不留神就跑偏了。
Debian 多年前装过Debian，那时对中文的支持真的是——一言难尽，不过这么多年过去了，可能会有点长进吧，所以就先装了最新的尝试了下，然后……我真的没发现有啥长进的。
Ubuntu Ubuntu是在Debian上弄起来的，最早时候玩的也是这货，wls里也是这货，而且各种桌面环境的发行版也都有，说实话，整体感观还是不错的！只不过这货现在好你搞什么平台大一统的，臃肿了不是一星半点，而且还又搞了个Snap什么的，感觉已经不再是我识别的那个Ubuntu，已经有向bug 10靠拢的倾向了，再加上这是老爷机，果断放弃。
Linux Mint Linux Mint这货原先是在Ubuntu上搞起来的，当年也试用过Mate版的，体验挺好的，即兼容了Ubuntu的众多优势，又定位于桌面系统，没有变得那么肥胖，算是比较符合我的选择标准了。最近看到有基于Debian的LMDE版，思虑再三，决定就用这货了！
Kali Linux Kali Linux这货也是在Debian上搞起来的，据说是专为黑客而生，估计以后会尝试吧。
安装LMDE 制作安装盘 下载LMDE的iso镜像
使用UltraISO把镜像写入U盘
注意：写入的时候写入方式一定要选择RAW，否则从U盘启动时会报错failed to load ldlinux.c32
安装 进BIOS设置U盘为第一启动项，保存
从U盘引导，自动进入Live模式
运行桌面上Install启动安装向导开始安装
联网设置先跳过，否则整个安装过程巨漫长
分区的环节，我直接把原有的分区全删了，使用整块硬盘
安装grub的分区一定要选好，像我这种直接选了整块硬盘，不管现在选哪个，后期更新时再出现选grub安装分区的一定要和现在选的保持一致(我就是抽风了一下搞得grub引导不了，折腾半天也没修复回来，最后默默选择了重装)
根据提示拔掉U盘，并按回车重启
联网更新 联网 重启进入系统后就可以放心的联网了，若是wifi联不上就直接用网线吧。反正我是联不上wifi，起初以为是驱动问题，折腾了一整天也没搞定，后来索性放弃了，估计是无线网卡有问题，以后再说吧。
更新 菜单-&amp;gt;首选项-&amp;gt;系统设置-&amp;gt;软件源，输入密码，选择一个国内的源，哪个快选哪个就行，当然也可以不选，只要你能忍受那蜗牛速度
在终端里执行命令sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y，输入密码，等待更新完成
后记 玩Linux就要敢于折腾、勇于折腾
不要问我要图，给图了你们还咋折腾？PS:其实是忘了弄，后来又懒得弄</description>
    </item>
    <item>
      <title>自学RTC——DualServer</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_dual_server/</link>
      <pubDate>Sun, 22 Nov 2020 14:54:39 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_dual_server/</guid>
      <description>从其它平台迁移而来
在窗体上放4个TRtcHttpServer，依次设置ServerPort为：80、443、8080和8090，并分别命名为HS80、HS443、HS8080和HS8090
再放3个TRtcDualDataServerLink到窗体上，分别命名为DL80and443、DL8080and8090和DLall
设置DL80and443的Server属性为HS80，Server2属性为HS443；设置DL8080and8090的Server属性为HS8080，Server2属性为HS8090
设置DLall的Link属性为DL80and443，Link2属性为DL8080and8090
再放1个TRtcDataProvider到窗体上，设置Link属性为DLall，并在OnCheckRequest事件里写上代码：
1 2 3 4 5 with TRtcDataServer(Sender) do begin Accept; Write(&amp;#39;you are on Server &amp;#39; + ServerPort); end; 在窗口OnShow事件里启动所有TRtcHttpServer，在OnClose事件里停止所有TRtcHttpServer
编译运行
在浏览器里分别访问http://localhost:80、http://localhost:443、http://localhost:8080、http://localhost:8090
注意：TRtcDualDataServerLink只能选择设置Server*或Link*！</description>
    </item>
    <item>
      <title>RTC组件关系图</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc/</link>
      <pubDate>Tue, 10 Nov 2020 21:26:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc/</guid>
      <description>从其它平台迁移而来</description>
    </item>
    <item>
      <title>自学RTC——BrowserUpload</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_browser_upload/</link>
      <pubDate>Tue, 10 Nov 2020 20:04:07 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_browser_upload/</guid>
      <description>从其它平台迁移而来
核心代码 OnCheckRequest事件中的代码： 1 2 3 with TRtcDataServer(Sender) do if Request.FilePath.Equal(0, &amp;#39;UPLOAD&amp;#39;) then Accept; OnDataReceived事件中的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 var fname: string; cnt: integer; begin with TRtcDataServer(Sender) do begin if Request.</description>
    </item>
    <item>
      <title>自学RTC——ServerLesson4</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson4/</link>
      <pubDate>Sat, 07 Nov 2020 23:47:54 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson4/</guid>
      <description>从其它平台迁移而来
对于上节的示例中，比较适合发送小文件，若直接用于发送大文件的话，很容易把服务器的内存资源耗尽。当请求大文件时，可以限制每次发送大文件时使用的内存大小（例如16000 B）。
打开上节的工程
修改RtcDataProvider3的OnCheckRequest事件：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var fname: string; begin with TRtcDataServer(Sender) do begin fname := GetFullFileName(Request.FileName); if (fname &amp;lt;&amp;gt; &amp;#39;&amp;#39;) and (File_Exists(fname)) then begin Accept; Request.Info[&amp;#39;fname&amp;#39;] := fname; Response.ContentLength := File_Size(fname); WriteHeader; end; end; end; 修改RtcDataProvider3的OnDataReceived事件： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 var fname: string; len: cardinal; begin with TRtcDataServer(Sender) do if Request.</description>
    </item>
    <item>
      <title>自学RTC——ServerLesson3</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson3/</link>
      <pubDate>Sat, 07 Nov 2020 20:27:36 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson3/</guid>
      <description>从其它平台迁移而来
/test.txt 打开上节的工程
添加组件RtcDataProvider3并设置Server属性为RtcHttpServer1，设置CheckOrder属性为900，使得RtcDataProvider3所处理的请求在其它请求之后（CheckOrder越小越先处理）
在当前exe所在路径下创建一个data文件夹，并在该文件夹内新建一个有内容的test.txt，然后编写一个GetFullFileName函数，用于从请求中提取文件名并转化为本地文件名
1 2 3 4 5 6 7 8 9 10 11 12 13 function GetFullFileName(fname: string): string; var DocRoot: string; begin DocRoot := ExtractFilePath(AppFileName); if Copy(DocRoot, length(DocRoot), 1) = &amp;#39;\&amp;#39; then Delete(DocRoot, length(DocRoot), 1); DocRoot := DocRoot + &amp;#39;\data&amp;#39;; fname := StringReplace(fname, &amp;#39;/&amp;#39;, &amp;#39;\&amp;#39;, [rfreplaceall]); Result := ExpandFileName(DocRoot + fname); if UpperCase(Copy(Result, 1, length(DocRoot))) &amp;lt;&amp;gt; UpperCase(DocRoot) then Result := &amp;#39;&amp;#39;; end; 在RtcDataProvider3的OnCheckRequest事件中写上代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 var fname: string; begin with TRtcDataServer(Sender) do begin fname := GetFullFileName(Request.</description>
    </item>
    <item>
      <title>自学RTC——ServerLesson2</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson2/</link>
      <pubDate>Thu, 05 Nov 2020 23:34:37 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson2/</guid>
      <description>从其它平台迁移而来
/SQUARE 打开上节的工程
添加组件RtcDataProvider2并设置Server属性为RtcHttpServer1
在RtcDataProvider2的OnCheckRequest事件中写上代码：
1 2 3 with TRtcDataServer(Sender) do if UpperCase(Request.FileName)=&amp;#39;/SQUARE&amp;#39; then Accept; 在RtcDataProvider2的OnDataReceived事件中写上代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var line:integer; begin with TRtcDataServer(Sender) do if Request.Complete then begin Write(&amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;#39;); Write(&amp;#39;Here comes a table of square values ... &amp;lt;br&amp;gt;&amp;#39;); for line:=1 to 100 do begin // 使用3个 write 和使用1个效果是一样的 Write(&amp;#39;Square of &amp;#39;+IntToStr(line)+&amp;#39; = &amp;#39;); Write(IntToStr(line*line)); Write(&amp;#39;&amp;lt;br&amp;gt;&amp;#39;); end; Write(&amp;#39;.</description>
    </item>
    <item>
      <title>自学RTC——ServerLesson1</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson1/</link>
      <pubDate>Thu, 05 Nov 2020 20:51:13 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/rtc_server_lesson1/</guid>
      <description>从其它平台迁移而来
RTC全称RealThinClient，据说是Delphi做三层的神器之一，虽然听说已久，却始终未好好研究过，而且安装包里带的有示例源码，于是乎，索性拿这些源码开这么个系列，督促下自己。
步骤 创建一个新工程
从RTC Server组件页中找到RtcHttpServer组件放到窗体上
设置RtcHttpServer1的ServerPort属性为80
在窗体的OnCreate事件里写上代码：
1 RtcHttpServer1.Listen; 从RTC Server组件页中找到RtcDataProvider组件放到窗体上
设置RtcDataProvider1的Server属性为RtcHttpServer1
在RtcDataProvider1的OnCheckRequest事件中写上代码：
1 2 3 with Sender as TRtcDataServer do if UpperCase(Request.FileName)=&amp;#39;/TIME&amp;#39; then Accept; 在RtcDataProvider1的OnDataReceived事件中写上代码： 1 2 3 with Sender as TRtcDataServer do if Request.Complete then Write(&amp;#39;Current time is: &amp;#39;+TimeToStr(Now)); 编译并运行
打开浏览器，访问网址http://localhost/time
示例源码 核心源码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 procedure TForm1.</description>
    </item>
    <item>
      <title>使用gomod</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_gomod/</link>
      <pubDate>Mon, 26 Oct 2020 23:08:47 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_gomod/</guid>
      <description>从其它平台迁移而来
初学Go时，用的都是GOPATH模式，要么代码得写在一个固定的路径下，要么得改系统变量，从始至终只有一个项目也就忍了，可明显这是不可能的，多个项目，想想就要抓狂。
还好有GO MOD模式，虽然也看网上的帖子了，不过一直没尝试。终于，还是要亲自尝试下才有长进。
准备 golang v1.11+ 据说要使用GO MOD模式，必须要使用v1.11以上的版本（这里是直接用最新的v1.15.3）。
IDE 好用的果然还是JB家的Goland，不过吾等P民囊中羞涩，还是果断VS Code+插件。
代理 由于众所周知的原因，我们需要准备好代理，代理的使用略。
GO MOD 打开命令行
在GOPATH之外任意新建一个空测试目录，并cd进去
执行命令go mod init XXX（XXX为项目名），会生成一个go.mod文件，内容如下：
1 2 3 module gmtest go 1.15 以使用GoFrame为例， 修改go.mod加上gf 1 2 3 4 5 module gmtest go 1.15 require github.com/gogf/go latest latest表示使用最新版本。
编写Go代码 1 2 3 4 5 6 7 8 9 10 11 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/gogf/gf&amp;#34; ) func main() { fmt.Println(&amp;#34;Hello GF&amp;#34;, gf.VERSION) } 执行go run main.</description>
    </item>
    <item>
      <title>FireDAC的数据连接池</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/firedac_fdconnection_pool/</link>
      <pubDate>Tue, 11 Aug 2020 21:59:09 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/firedac_fdconnection_pool/</guid>
      <description>从其它平台迁移而来
之前就想搞个数据连接池，结果太麻烦就放弃了，不想却在TFDConnection中看到了Pooled属性，就一路挖了下来，还真就是那么回事！
TFDManager 之前只知道，放上TFDManager控件后，什么都不用做，就可以在别的单元引用该单元后直接连接到TFDConnection控件了；现在，数据连接池还是要通过TFDManager来实现。
设置数据连接池参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //指定动态库 FDPhysMySQLDriverLink.VendorLib := &amp;#39;libmysql.dll&amp;#39;; //设置连接参数 with FDManager.ConnectionDefs.AddConnectionDef do begin Name := &amp;#39;MySQL_Conn&amp;#39;; Params.DriverID := &amp;#39;MySQL&amp;#39;; Params.Add(&amp;#39;CharacterSet=csUtf8mb4&amp;#39;); Params.Add(&amp;#39;Server=127.0.0.1&amp;#39;); Params.Add(&amp;#39;Port=3306&amp;#39;); Params.Database := &amp;#39;test&amp;#39;; Params.UserName := &amp;#39;root&amp;#39;; Params.Password := &amp;#39;123456&amp;#39;; Params.PoolMaximumItems := 10; Params.Pooled := True; end; 以上是以MySQL为例，其它数据库参照即可。
打开连接池 1 FDManager.Open; 获取连接 1 2 FDConnection.ConnectionDefName := &amp;#39;MySQL_Conn&amp;#39;; FDConnection.Connected := True; 归还连接 FDConnection直接放到窗体上，或动态创建，写上如下代码即可，无需在设计器里设置任何东西。</description>
    </item>
    <item>
      <title>从.h头文件到.pas单元</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/h2pas/</link>
      <pubDate>Mon, 04 May 2020 23:42:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/h2pas/</guid>
      <description>从其它平台迁移而来
由于长期使用Delphi开发，又与硬件打交道比较多，不可避免地要与标准C动态库进行对接，而往往厂家提供的SDK又偏偏没有Delphi的，无奈也就只好自己改写.h头文件了。写得多了，也就有了一点点心得，在这里就分享出来，也好与大家互相交流、学习。
知识点 标准C动态库使用的都是单字节字符。
Delphi 2007以前默认使用的是单字节字符，即Ansi编码，也就是说Char = AnsiChar、PChar = PAnsiChar、string = AnsiString；Delphi 2009以后使用的是双字节字符，即Unicode编码，也就是说Char = WideChar、PChar = PWideChar、string = WideString。为了保证改写后的.pas文件适用于Dephi的各个版本，应避免使用Char、PChar、string这种类型不明确的数据类型（通常情况下使用AnsiChar、PAnsiChar、AnsiString即可，但特殊情况要特殊处理）。
@string[1]才是字符串首地址。
Delphi中可以把AnsiString当作缓冲区来使用，某些情况下比array of Byte要方便得多。
对字符串变量第一次使用SetLengh时会重新分配内存，第二次使用时，若设定的长度比第一次小，则只会进行截断而并不改变已写入的内容，该特性在使用API返回字符串时非常好用。
Delphi中的record是进行过字节对齐的，执行效率高，但占用空间比看到的会略大；packed record是未进行过字节对齐的，执行效率略低，但占用空间与看到的保持一致。也就是说，Delphi中packed record才是与C中的struct等同。
在Delphi中packed record配合case可以实现C中的union，具体是否等同还要看实际定义的字节是否一致（需要对每种数据类型占用的空间十分熟悉）。
标准C动态库的API函数或回调函数，在Delphi中均要使用stdcall;来修饰，以确保传参顺序一致。
数据类型对应关系 C/C++ 类型 Delphi 基本类型 Delphi Window 单元类型 说明 char ShortInt / Int8 8位有符号整型 char* PShortInt unsigned char / BYTE Byte / UInt8 UCHAR 8位无符号整型，字节型 unsigned char* PByte LPBYTE / PUCHAR short SmallInt / Int16 SHORT 16位有符号整型 short* PSmallInt PSHORT unsigned short Word / UInt16 WORD 16位无符号整型 unsigned short* PWord PUSHORT int / long Integer / Longint / Int32 LONG 32位有符号整型 int* / long* PInteger / PLongInt PLONG unsigned / unsigned int / unsigned long Cardinal / LongWord / UInt32 DWORD / UINT / ULONG / ULONG32 32位无符号整型 unsigned int* / unsigned long* PCardinal / PLongWord / PUint32 PDWORD / PUINT / PULONG long long / __int64 Int64 LONG64 / LONGLONG 64位有符号整型 long long* / __int64* PInt64 PLONG64 unsigned long long / unsigned __int64 UInt64 ULONG64 / ULONGLONG / DWORD64 64位无符号整型 unsigned long long* / unsigned __int64* PUInt64 PULONG64 / PULONGLONG / PDWORD64 float Single / Float32 32位单精度浮点型 float* PSingle double Double / Float64 64位双精度浮点型 double* PDouble long double Extended 10字节浮点型 char AnsiChar 单字节字符 char* PAnsiChar LPSTR / LPCSTR char** PPAnsiChar wchar_t / WCHAR WideChar WCHAR 双字节字符 wchar_t* PWideChar PWChar / LPWSTR / LPCWSTR wchar_t** PPWideChar 任意1字节类型 Boolean / ByteBool 1字节布尔型 任意1字节类型指针 PBoolean / PByteBool 任意2字节类型 WordBool 2字节布尔型 任意2字节类型指针 PWordBool BOOL LongBool BOOL 4字节布尔型 BOOL* PLongBool PBOOL void* Pointer PVOID / LPVOID / LPCVOID 无类型指针 void** PPointer PPVOID 升华 有了以上知识，把.</description>
    </item>
    <item>
      <title>MySQL zip 安装</title>
      <link>https://afrusrsc.github.io/posts/db/mysql_zip_install/</link>
      <pubDate>Mon, 30 Mar 2020 14:47:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/db/mysql_zip_install/</guid>
      <description>从其它平台迁移而来
越来越喜欢绿色免安装的产品了，MySQL也不例外，由其是MySQL 8，于是就重点研究了下如何安装zip版的MySQL。
安装脚本 以下是参考网上其它资料整理后的批处理文件，直接放在MySQL解压出来的根目录下执行即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @echo off ::============================================================================== set mysqlPath=%cd% echo 1.</description>
    </item>
    <item>
      <title>Delphi开发守则</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_rules/</link>
      <pubDate>Thu, 12 Mar 2020 22:39:03 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_rules/</guid>
      <description>从其它平台迁移而来
前言 接触编程已十年有余，使用Delphi谋生也已五年有余，不敢说阅码无数，实实在在看过的代码也是有几箩筐的，但见过的写得好的、写得漂亮的、写得优美的代码，少之又少。
由于pascal语言简单易学的优点，以及DelphiIDE快速开发的方便，致使随便来个阿猫阿狗搞几下就能搞出来个马马虎虎的东西，于是众多程序猿便借势野蛮生长，个个都长得很有个性，产出的代码也自然是个性十足。事实上，其它语言的这种现象也不少。
我无意发起圣战，毕竟每只猿都有自己的追求，而我，不过是长成了一只有点洁癖的猿。以下是我的洁癖，也是我的追求，算是总结，也算是对自己的警醒。
正文 排版 良好的排版能使代码看起来清晰愉悦，统一的排版能使团队合作愉快，也更能显出版本控制优势。
简单来说，cnPack提供的排版功能就不错。我喜欢在默认的基础上做如下调整：
关键字小写。因为小写比大写更易阅读。
begin 位于下一行。因为能突出代码块的起始位置。
当超过90列时自动换行于80列。因为我的屏幕有点小，而且我个人也比较懒，再加上一点点历史原因。
字符串拼接等不希望cnPack自动排版的地方，可在末尾加//单行注释进行妨碍。写过长SQL语句的都知道我在说什么。
注释 注释很重要，但注释也可以很美妙。比如：interface区主要使用xml风格的注释，implementation区主要使用默认风格的注释，具体如下：
函数、过程、类方法、类属性、结构体方法的声明使用xml风格的注释，注释在上，声明在下。当你把鼠标放上去的时候你就知道我是对的。
枚举成员、类字段、结构体字段使用//单行注释，注释在右，且同一代码块尽量缩进对齐。无他，我有洁癖。
xml风格的注释，我喜欢的格式如下，至于怎么设置，我想这不是问题。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {func} /// &amp;lt;summary&amp;gt;|&amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;#34;n1&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;#34;n2&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt; {param} /// &amp;lt;param name=&amp;#34;|&amp;#34;&amp;gt;&amp;lt;/param&amp;gt; {remarks} /// &amp;lt;remarks&amp;gt;|&amp;lt;/remarks&amp;gt; {returns} /// &amp;lt;returns&amp;gt;|&amp;lt;/returns&amp;gt; {seealso} /// &amp;lt;seealso&amp;gt;|&amp;lt;/seealso&amp;gt; {summary} /// &amp;lt;summary&amp;gt;|&amp;lt;/summary&amp;gt; {value} /// &amp;lt;value&amp;gt;|&amp;lt;/value&amp;gt; 命名 什么拼音首字母，什么1 2 3 4 5，我是极其痛恨的！</description>
    </item>
    <item>
      <title>从Delphi到Go——接口</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_interface/</link>
      <pubDate>Thu, 30 Jan 2020 12:52:16 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_interface/</guid>
      <description>从其它平台迁移而来
由于没有太多编写接口的经验，此处仅简单说明语法。后期对接口有更多认知和经验后再进行详细记录。
Delphi Delphi的接口是侵入式接口，并且是单继承的，但类可以同时实现多个接口，类声明时需要显示声明实现了哪些接口。
声明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 type //直接声明 IMyInterface1 = interface function Func1: Integer; //函数 procedure Proc1(Value: Integer); //过程 property MI: Integer read Func1 write Proc1; //属性 end; //从已有接口继承 IMyInterface2 = interface(IMyInterface1) procedure Proc2; end; //含有 GUID 的接口可以公开给其它进程调用 IMyInterface3 = interface [&amp;#39;{3E51374A-D0E8-4C84-AA30-9634409E45DD}&amp;#39;] procedure Proc3; end; Delphi已经提供了基接口IInterface，自己声明的接口最好从IInterface继承。
实现 1 2 3 4 5 6 7 8 9 10 11 type //含接口的类的声明 TMyClass = class(基类, 接口) public procedure Proc; //接口方法 end; //接口实现 procedure TMyClass.</description>
    </item>
    <item>
      <title>简单数学运算的比较</title>
      <link>https://afrusrsc.github.io/posts/program/misc/float_precision_calc/</link>
      <pubDate>Wed, 01 Jan 2020 22:37:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/float_precision_calc/</guid>
      <description>从其它平台迁移而来
人到中年，总是不免生出些危机感，长年使用Delphi，心中自是不踏实，闲来便看两眼java，不想却发现个从未注意过的小问题。
java 1 2 3 4 5 double a = 1 / 10; //0.0 double b = 1.0 / 10; //0.1 double c = 1 / 10.0; //0.1 double d = 1 - 9.0 / 10; //0.09999999999999998 double e = 1 - 9 / 10; //1.0 Delphi 1 2 3 4 5 a := 1 / 10; //0.1 b := 1.0 / 10; //0.1 c := 1 / 10.</description>
    </item>
    <item>
      <title>Delphi中的延时</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_delay/</link>
      <pubDate>Fri, 13 Dec 2019 23:40:41 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_delay/</guid>
      <description>从其它平台迁移而来
开发过程中经常会需要使用到延时功能，Delphi中有不少实现延时的方法，网上已有不少文章做过说明和分析，但本着实践出真知的态度，还是亲自动手研究一番心里比较踏实。
常用的延时方法 Sleep Sleep(n)，延时n毫秒，延时过程中程序不响应，一般延时较小时使用。
在主线程中使用，延时较大（100+）的话会起程序假死，一般在子线程中使用较多。
无论在主线程还是子线程中，延时较长的话（如 2000 ms），一般不一次性Sleep(2000)，而是分多次循环Sleep。有时为了能在延时过程中响应外部消息，还会加上Application.ProcessMessages;，如：
1 2 3 4 5 6 //延时 2000 ms for i := 0 to 19 do begin Sleep(100); Application.ProcessMessages; end; Timer Timer为定时器，用于周期性地执行某个处理。也可用来实现延时，延时过程中不会引起程序假死，
GetTickCount GetTickCount返回从操作系统启动到当前所经过的毫秒数，一般用于计算代码段的用时。配合循环使用也可达到延时的功能。
1 2 3 4 n := GetTickCount; repeat Application.ProcessMessages; //若延时过程中需要响应消息可加上此句 until GetTickCount &amp;gt;= n + ms; //ms为延时的毫秒数 注意：使用以上代码进行延时的过程中，CPU使用率会异常地高（事实上，不加限制一直跑的循环都会导致CPU使用率过高）。
小结 以上是对Sleep、Timer和GetTickCount用于延时的简单说明，个人经验：通常较小延时的场景用Sleep，较大延时的场景用Timer，评估代码段耗时的场景用GetTickCount。至于为什么这样用，以前是不清楚的，但通过对三者的精度分析，目前已知晓来龙去脉。
延时精度分析 上文已经提到，一般用GetTickCount来分析代码段耗时，但由于本次GetTickCount在被测行列，故另寻他法。
本次测试假定系统时间是足够精确的，因此使用Now分别在延时前后获取系统当前时间来进行耗时评估。
为使测试更具代表性，每个测试点测试100次，取算术平均值。
在1ms~100ms内，测试点步长为1ms，在100ms~1000ms内，测试点步长为10ms。
为尽可能减小干扰，测试过程中未使用Application.ProcessMessages;，也未使用并行。
测试结果 XE10编译，Win10下运行，经过近5个小时的测试，结果终于出炉了。
延时(ms) Sleep GetTickCount Timer 1 1.70 15.58 15.64 2 2.</description>
    </item>
    <item>
      <title>从Delphi到Go——方法</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_method/</link>
      <pubDate>Mon, 02 Dec 2019 22:56:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_method/</guid>
      <description>从其它平台迁移而来
结构体的方法 Delphi Delphi结构体的方法与类的方法几乎是一致的，主要区别是内存的管理方式和可见性不同。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //定义 type TMyStruct = record No: Integer; Name: string; function ToString: string; end; //实现 function TMyStruct.ToString: string; begin Result := Format(&amp;#39;No:%d, Name:%s&amp;#39;, [Self.No, Self.Name]); end; //调用 var ms: TMyStruct; s: string; begin s := ms.ToString; end; Go 方法其实就是加了接收器的函数，语法如下：
1 2 3 func (接收器变量 接收器类型) 方法名(参数列表) (返回参数) { 函数体 } Go结构体的方法无需声明，直接实现即可。</description>
    </item>
    <item>
      <title>从Delphi到Go——异常处理</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_except/</link>
      <pubDate>Sun, 01 Dec 2019 22:35:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_except/</guid>
      <description>从其它平台迁移而来
Delphi try&amp;hellip;finally&amp;hellip;end 1 2 3 4 5 6 //创建、打开、加锁等 try //具体处理 finally //释放、关闭、解锁等 end; raise 1 raise Exception.Create(&amp;#39;异常信息&amp;#39;); //手动抛出异常 try&amp;hellip;except&amp;hellip;end 1 2 3 4 5 6 7 8 9 try //可能产生异常的语句块 except //异常的相关处理 on E: Exception do begin //对应类型的异常的处理 end; end; Go defer 加defer的语句会延迟到函数调用结束返回时才执行，相当于finally...end区。存在多个defer语句时，最先出现的总是最后才执行。
1 2 3 4 5 func F(){ //打开、加锁等 defer //关闭、解锁等 //具体处理 } panic 1 panic(异常信息) recover 1 2 3 4 5 6 7 func FF(){ defer func(){ e := recover() //异常处理 }() //可能产生异常的语句块，或调用 panic() 抛出异常 } 虽然panic/recover组合可以模拟try.</description>
    </item>
    <item>
      <title>从Delphi到Go——函数的可变参数</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_func_args/</link>
      <pubDate>Wed, 27 Nov 2019 22:24:05 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_func_args/</guid>
      <description>从其它平台迁移而来
Delphi 事实上，Delphi并没有什么可以直接为函数传递可变参数（数量可变、类型可变）的语法，但是并不是说不可能实现，最常用的Format()函数就是最好的例子。
虽然不能直接传递可变参数，但是通过一种叫做可变类型的开放数组即可实现为函数传递数量不定、类型不一的可变参数。
可变类型 可变类型不是变体类型，而是一个记录类型TVarRec，在System单元中的定义如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 TVarRec = record { do not pack this record; it is compiler-generated } case Integer of 0: (case Byte of vtInteger: (VInteger: Integer); vtBoolean: (VBoolean: Boolean); vtChar: (VChar: _AnsiChr); vtExtended: (VExtended: PExtended); {$IFNDEF NEXTGEN} vtString: (VString: _PShortStr); {$ENDIF !</description>
    </item>
    <item>
      <title>从Delphi到Go——匿名函数</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_func/</link>
      <pubDate>Sun, 03 Nov 2019 12:14:24 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_func/</guid>
      <description>从其它平台迁移而来
早期的Delphi版本是没有匿名函数的，不过可以定义一个函数类型来实现类似的功能；后期的版本已经支持匿名函数，随用随写。Go天生就支持匿名函数。
Delphi 函数类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //声明函数类型 type TMyProc = procedure(A: Integer); //过程 TMyFunc = function(x: Integer): Integer; //函数 //定义符合函数类型的函数 procedure MyProc(A: Integer); begin ShowMessage(IntToHex(A)); end; function MyFunc1(x: Integer): Integer; begin Result := x + x; end; function MyFunc2(x: Integer): Integer; begin Result := x * x; end; //使用 var mp: TMyProc; mf: TMyFunc; begin mp := MyProc; mf := MyFunc1; mp(mf(99)); end; //作为参数进行传递，这才是函数类型最主要的使用方法 procedure Test(x: Integer; Func: TMyFunc); begin ShowMessage(Func(x).</description>
    </item>
    <item>
      <title>从Delphi到Go——列表</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_list/</link>
      <pubDate>Wed, 30 Oct 2019 21:58:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_list/</guid>
      <description>从其它平台迁移而来
Delphi中最基本的列表是TList类和TList&amp;lt;T&amp;gt;泛型类，还有线程安全的TThreadList类和TThreadList&amp;lt;T&amp;gt;泛型类，底层实现是数组。Go用的是container/list包，内部实现是双向链表。
Delphi TList TList里存的是指针，使用时注意处理好指针即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 //声明 var l: TList; //构造 l := TList.Create; //添加 l.Add(p); //元素个数 n := l.Count; //列表容量 cap := l.Capacity; //取值 p1 := l.Items[0]; p2 := l.Extract(p1); //找到指针p1并从列表中取出，列表中将不再有p1，若其后还有元素，则前移填充空缺。 p := l.First; //取第一个元素 p := l.Last; //取最后一个元素 //查找元素的索引 i := l.IndexOf(p); //修改 l.</description>
    </item>
    <item>
      <title>从Delphi到Go——字典</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_map/</link>
      <pubDate>Mon, 28 Oct 2019 22:09:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_map/</guid>
      <description>从其它平台迁移而来
字典，又称为哈希表，是一种能够快速寻找值的理想结构。Go语言中对应的数据类型是map，Delphi中是TDictionary泛型类。
声明 Delphi
1 2 uses System.Generics.Collections; var 字典名: TDictionary&amp;lt;键类型, 值类型&amp;gt;; Go
1 var 字典名 map[键类型]值类型 初始化 Delphi
1 字典名 := TDictionary&amp;lt;键类型, 值类型&amp;gt;.Create(初始容量); Go
1 2 3 4 //使用make构造 字典名 = make(map[键类型]值类型, 初始容量) //直接赋初值 字典名 = map[键类型]值类型{键1: 值1, 键2: 值2} 元素操作 Delphi
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 var m: TDictionary&amp;lt;Integer, string&amp;gt;; //构造 m := TDictionary&amp;lt;Integer, string&amp;gt;.</description>
    </item>
    <item>
      <title>从Delphi到Go——数组</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_array/</link>
      <pubDate>Tue, 08 Oct 2019 22:03:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_array/</guid>
      <description>从其它平台迁移而来
静态数组 一维数组 声明 Delphi
1 var 数组名 : array[索引范围] of 元素类型; //索引范围是子界类型，格式为：下限..上限 Go
1 var 数组名 [数组长度]元素类型 Delphi的索引范围可以是任意的子界类型，而且是包含上下限的闭区间。子界可以是任意的序数类型（整型、字符型、枚举元素等），例如：0..8、5..11、&#39;a&#39;..&#39;z&#39;等。子界元素就是数组元素的下标。
Go的数组长度只能是整型，下标为0~数组长度-1。
初始化 Delphi
1 2 var 数组名 : array[1..N] of 元素类型 = (元素1, 元素2, ……, 元素N); //如果先声明后赋值的话，赋值时就需要遍历数组对每个元素分别赋值 Go
1 2 3 4 5 6 7 8 9 10 11 var 数组名 [N]元素类型 = [N]元素类型{元素0, 元素1, ……, 元素N-1} //由于初始化时元素个数已知，以上代码也可写为： var 数组名 [N]元素类型 = [...]元素类型{元素0, 元素1, ……, 元素N-1} //如果先声明后赋值的话，写法如下： var 数组名 [N]元素类型 数组名 = [.</description>
    </item>
    <item>
      <title>再探Delphi字符串</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_string02/</link>
      <pubDate>Sun, 06 Oct 2019 04:43:45 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_string02/</guid>
      <description>从其它平台迁移而来
闲来无事，又开始扒拉起Delphi的源码，这次发现一个比较有意思的函数StringCodePage，作用是返回传入字符串的CodePage。至于什么是CodePage，暂且认为是字符编码吧。
先测试一把：
1 2 3 4 5 6 7 8 9 10 11 12 13 var s1: AnsiString; s2: WideString; s3: UTF8String; cp1, cp2, cp3: Word; begin s1 := &amp;#39;123abc中国&amp;#39;; s2 := &amp;#39;123abc中国&amp;#39;; s3 := &amp;#39;123abc中国&amp;#39;; cp1 := StringCodePage(s1); //936 - GBK(简体中文) cp2 := StringCodePage(s2); //1200 - UCS-2LE Unicode 小端序 cp3 := StringCodePage(s3); //65001 - UTF-8 Unicode end; 来看下是怎么实现的：
1 2 3 4 5 6 7 function StringCodePage(const S: UnicodeString): Word; overload; begin if S &amp;lt;&amp;gt; &amp;#39;&amp;#39; then Result := PWord(PByte(S) - 12)^ // StrRec.</description>
    </item>
    <item>
      <title>从Delphi到Go——基础</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_delphi_base/</link>
      <pubDate>Mon, 09 Sep 2019 23:30:04 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_delphi_base/</guid>
      <description>从其它平台迁移而来
废话 长期从事Delphi开发，虽不敢说精通，但说很熟悉还是相当有自信的。不过，只会一门语言，而且还是这么老的语言，更是在大天朝很小众的语言，总感觉自己离饿死街头没多远了，所以趁着还没老再学个潮点的吧。
先前考虑过Python，初步了解后觉得不太适合自己：
解释型语言：部署时得先搞个运行环境，发布的程序就是源码本身，再加上这个执行效率，怎么想都还是编译型语言更合适。
动态语言：无需声明，拿来就用，这已经很不合习惯了。想想一个变量，前一秒还是浮点数，下一秒就成字符串了，再一眨眼又成某个对象了……虽然一般不会有人这么写，但是挡不住手误啊，还是把这种小细节交给编译器更让人放心。
所以，对于有点强迫症和洁癖的自己，最后还是选了Go，比较符合已有的编程习惯，学习成本应该相对会低些吧。
至于Go嘛，想学是已经很久了，但由于种种原因却迟迟未开启，不过终究还是要迈出这一步的，所以就搞这么个系列来记录吧，一方面算是自我督促，另一方面也算是一种交流吧，当然，若一不留神帮上了谁，那自是开心极了。
言归正传 已经初步了解过了Go，说来和Delphi还是有不少相似之处呢，从Delphi转向Go应该会比较轻松吧。
工程结构 Delphi的工程算是比较自由的，源码的话，只要把单元路径引了或是直接包含进工程单元里就可以了，编译出的dcu和最终的exe指定下路径也就没问题了，通常我都使用下面这种结构：
1 2 3 4 5 6 7 8 9 10 11 Project/ bin/ src/ dcu/ mod1/ *.dfm *.pas mod2/ *.dfm *.pas *.dpr 不过，每一个工程都要设置，而且我习惯将Debug和Release设置完全一样，也还真是够烦的。
Go就没得选了，只有一种结构：
1 2 3 4 5 6 7 8 9 10 11 Project/ bin/ pkg/ src/ *.go mod1/ *.go *_test.go mod2/ *.go *_test.go 整体和我原有的习惯差不多，还是蛮容易接受的，不过倒是要把这Project的路径加入到GOPATH系统变量里让人有一点小不爽。但是Go可以直接把测试都写了，这点还是蛮让我惊喜的，毕竟用了这么多年Delphi也没写过一行像样的测试。
源码结构 Delphi典型的源码结构是这样：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 unit Unit1; interface uses .</description>
    </item>
    <item>
      <title>关于TField.DataSize的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_field_datasize/</link>
      <pubDate>Thu, 11 Jul 2019 20:03:00 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_field_datasize/</guid>
      <description>从其它平台迁移而来
在从数据库中查询数据时，有时需要事先取得字段内容的大小，再根据情况进行处理。
对于ADO之类返回TField类型的，可以使用DataSize属性，但是！！！这里有很深的坑！！！。
首先看如下代码：
1 2 3 4 if ADOQuery.FieldByName(&amp;#39;Test&amp;#39;).DataSize &amp;gt; 3 then {处理1} else {处理2}; 按预想，当Test字段里的数据超过3B时，应该执行处理1的代码，但事实上无论该内容长短，都是执行处理2的代码，WHY?
扒一下Delphi的源码就明白了。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 function TField.</description>
    </item>
    <item>
      <title>Windows &#43; VS Code搭建 Go 开发环境</title>
      <link>https://afrusrsc.github.io/posts/program/go/go_vscod/</link>
      <pubDate>Sat, 15 Jun 2019 18:35:12 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/go/go_vscod/</guid>
      <description>从其它平台迁移而来
想学golang也就是Go语言由来已久，但苦于不像Delphi、C#这等有现成的IDE，第一步就卡壳了。所幸网上资源丰富，在尝试后终于把环境搭起来了，在此做个记录以备忘。
安装 Git 安装Go Tools时需要用到。而且，搞开发不用Git？图样图森破！
Git 官网（Git for windows 国内镜像），安装略。若已安装WSL则可直接使用WSL里的Git。
安装 golang 由于众所周知的原因，Go的官网并不总是能访问，其实在国内是有一个官方镜像的。下载安装什么的就略过了。
环境变量 安装好之后在命令行里运行go env即可查看Go环境变量。
GOROOT：就是Go的安装目录，如C:\Go。
GOPATH：Go的工程目录，不能是Go的安装目录，可以有多个目录，多个目录之间用;分隔，且下面安装的Go Tools会安装在第一个目录。如：C:\Users\Administrator\go。
安装 VS Code 下载VS Code，并安装，没什么好说的。
安装配置中文：打开VS Code，按Ctrl+Shift+P，输入display，选择Configure Display Language回车，选择zh-cn回车，若无则选择Install additional languages...回车，在左侧选择中文安装，安装完之后根据提示重启。
按Ctrl+Shift+X搜索Go，安装微软的Go插件。
关闭VS Code。
安装 Go Tools 旧方案 主要是完全由VS Code来下载速度会异常感人。
打开命令行依次执行以下语句 1 2 3 4 ::下载tools git clone https://github.com/golang/tools.git %GOPATH%\src\golang.org\x\tools ::下载lint git clone https://github.com/golang/lint.git %GOPATH%\src\golang.org\x\lint 待全部下载完之后，打开VS Code。
Ctrl+N新建一个文档，选择语言模式为Go，会有Analysis Tools Missing的提示，点Install坐等完成（共11个），安装完成之后查看是否全部成功，最后重启VS Code。
重启后在刚才新建的文档里写上go代码并保存，按F5调试，验证效果。
自备梯子后，可直接运行以下批处理进行Go Tools的安装。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 ::代码补全 go get -v github.</description>
    </item>
    <item>
      <title>Delphi安全结束线程</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_thread/</link>
      <pubDate>Sun, 28 Apr 2019 19:13:48 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_thread/</guid>
      <description>从其它平台迁移而来
在开发过程中，不可避免的要用到多线程，而线程的同步、释放等又可能引入新的问题，不过网上已有许多资料，这里重点说下我使用的方法。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 type TMyThread = class(TThread) protected procedure Execute; override; public constructor Create(...); destructor Destroy; override; //使用 reintroduce 关键字可以明确通知编译器屏蔽父类的同名方法而使用自己的方法。 procedure Free; reintroduce; end; constructor TMyThread.Create(...); begin { 在这里创建相关对象，可以省去先挂起线程再恢复的操作 } inherited Create; end; destructor TMyThread.</description>
    </item>
    <item>
      <title>关于窗口置屏的那个坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_screen_monitor/</link>
      <pubDate>Fri, 01 Mar 2019 16:16:46 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_screen_monitor/</guid>
      <description>从其它平台迁移而来
在开发多屏应用程序的时候，经常需要把某个窗口置到某个屏上的某个位置。以下是一个Delphi写的置屏方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 procedure ShowInMonitor(Sender: TObject; AIndex: Integer; ALeft: Integer = 0; ATop: Integer = 0); var lM: TMonitor; begin if Sender is TControl then begin if AIndex &amp;gt; Screen.MonitorCount - 1 then begin AIndex := 0; end; lM := Screen.Monitors[AIndex]; (Sender as TControl).Left := lM.Left + ALeft; (Sender as TControl).Top := lM.Top + ATop; end; end; Sender是需要置屏的窗口；AIndex是置屏的目标屏号，从0开始；ALeft是水平偏移量，ATop是垂直偏移量，默认均为0，即在目标屏的左上角。</description>
    </item>
    <item>
      <title>DBGridEh显示、编辑标记字段</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/ehlib_dbgrideh_field_dict/</link>
      <pubDate>Fri, 25 Jan 2019 11:37:40 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/ehlib_dbgrideh_field_dict/</guid>
      <description>从其它平台迁移而来
在用Delphi开发数据库应用过程中，经常需要用到DBBrid来显示或编辑数据库表，但相对于IDE自带的DBBrid，DBGridEh显然要更好用一些（cxDBGrid也同样好使，这里只对DBGridEh进行说明）。
在数据库表结构设计时，通常会习惯使用整型字段来存储如男、女、已修改、已删除、已作废等具有标记性的信息，好处是占存储空间小且可扩展性强，缺点是显示方式不友好，但是，使用DBGridEh的一些设置可以弥补这个缺陷。
假设数据库里的表T_Demo里有一个表示性别的字段Sex，其用0表示男，1表示女，2表示未知，用DBGridEh显示时仍为0、1、2，十分不友好。这时只要做一点美化即可。
在DBGridEh的对应列的KeyList属性里分别加入0、1、2三个数字，每个数字一行，用代码实现的话就是： 1 2 3 4 5 //这里假设第一列就是性别，以下代码相同 DBGridEh.Columns[0].KeyList.Clear; DBGridEh.Columns[0].KeyList.Append(&amp;#39;0&amp;#39;); DBGridEh.Columns[0].KeyList.Append(&amp;#39;1&amp;#39;); DBGridEh.Columns[0].KeyList.Append(&amp;#39;2&amp;#39;); 在DBGridEh的对应列的PickList属性里分别加入男、女、未知三行，用代码实现是： 1 2 3 4 DBGridEh.Columns[0].PickList.Clear; DBGridEh.Columns[0].PickList.Append(&amp;#39;男&amp;#39;); DBGridEh.Columns[0].PickList.Append(&amp;#39;女&amp;#39;); DBGridEh.Columns[0].PickList.Append(&amp;#39;未知&amp;#39;); 这样，原先显示为0、1、2的性别就变成了男、女、未知。也可以加上图片来进一步美化。
放置一个TImagList控件，并命名为ilSex，然后分别添加三个图片，比如像卫生间的男、女图片和问号，注意添加后图片对应的索引，否则会张冠李戴。
在DBGridEh的ImagList属性里关联ilSex，并且设置ShowImageAndText属性为True，用代码是：
1 2 DBGridEh.ImagList := ilSex; DBGridEh.ShowImageAndText := True; 这样，性别这一列就有图片有文字，比0、1、2要友好很多，而且在编辑的时候也可以直接下拉进行选择来实现性别的录入。</description>
    </item>
    <item>
      <title>生成指定范围和个数的不重复的随机整数</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/random_int/</link>
      <pubDate>Mon, 14 Jan 2019 10:48:06 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/random_int/</guid>
      <description>从其它平台迁移而来
生成指定范围内的随机数，有相应的随机函数（如RandomRange(x, y)可生成x &amp;lt;= d &amp;lt; y的随机整数），或者在基本的随机函数上稍加修改也可生成；生成 n 个随机数，只需调用 n 次随机函数即可；生成 n 个不重复的随机数，就会有一点点小麻烦。
常规思路 一般来说，要生成n个不重复的随机数，只需判断每次生成的随机数有没有和这前生成的随机数重复即可，若重复即抛弃，不重复则记录。
但是，这样要进行很多额外的判断，而且当生成的量变大时，这样的判断次数也几乎是呈指数级的增加（具体复杂度没有进行详细分析）。
另一种思路 如果每生成一个随机整数，就在一个整数序列上对应的位置做一个标记，那么只需要判断标记的个数有没有达到n即可，然后把有标记的整数取出就是 n 个不重复的随机整数。（其实该思路是借鉴了某个排序算法的思路，具体算法名称不记得了）
首先来考虑生成 n 个[0, m)的不重复的随机数方法，n &amp;lt; m。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 var i: Integer; tmpMark: array of Integer; begin SetLength(tmpMark, m); repeat Randomize; i := RandomRange(0, m); //[0,m)半开半闭区间 tmpMark[i] := 1; until SumInt(tmpMark) = n; for i := 0 to m - 1 do if tmpMark[i] = 1 then i; //i即为随机出的不重复的整数 end; 本例中借助长度为m的数组tmpMark来进行标记，同时使用delphi自带的SumInt（在Math单元）函数来计算标记的个数，有标记的tmpMark下标即为随机出的整数。</description>
    </item>
    <item>
      <title>TClientDataSet的使用以及遇到的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_clientdataset/</link>
      <pubDate>Sat, 12 Jan 2019 14:43:15 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_clientdataset/</guid>
      <description>从其它平台迁移而来
在Delphi未加入FireDAC之前，似乎是没有内存表控件的（也许有，可能我不知道吧），但是可以用TClientDataSet控件来做内存表使用，即使有了FireDAC可以使用TFDMemTable，我还是觉得TClientDataSet更好用一些。
做内存表使用 创建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 with ClientDataSet do begin Close; //定义字段 with FieldDefs do begin Clear; Add(&amp;#39;Field1&amp;#39;, ftInteger, 0, False); Add(&amp;#39;Field2&amp;#39;, ftString, 0, False); ...... end; //创建结构 CreateDataSet; Open; end; 排序 在定义字段后，创建结构前，也可以指定排序字段。
1 IndexFieldNames := &amp;#39;Field1&amp;#39;; 做缓存使用 需要结合TDataSetProvider来使用。以下示例以使用ADO组件为例。
拉取数据 方法1 TDBGrid-&amp;gt;TDataSource-&amp;gt;TClientDataSet-&amp;gt;TDataSetProvider-&amp;gt;TADOQuery-&amp;gt;TADOConnection
1 2 3 4 5 6 7 ClientDataSet.ProviderName := DataSetProvider.Name; //设计器里设置过就不需要了 with ClientDataSet do begin Close; CommandText:=&amp;#39;select * from T_Table&amp;#39;; Open; end; 方法2 TDBGrid-&amp;gt;TDataSource</description>
    </item>
    <item>
      <title>使用海康威视SDK的那些坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/sdk_hcnetsdk/</link>
      <pubDate>Wed, 02 Jan 2019 16:29:46 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/sdk_hcnetsdk/</guid>
      <description>从其它平台迁移而来
由于工作需要，项目中有使用到海康威视的产品，不可避免的就要使用海康的SDK进行二次开发。开发过程中磕磕绊绊的，踩了不少坑，这里做一个简单的记录，算是给健忘的自己提个醒吧。
Delphi版本的接口 Gitee地址
首先，自己一直使用Delphi进行开发，然而海康官方只提供了C/C++的接口和示例，无奈只能自己改写了。改写完的部分已经上传，希望能有人共同来完善。
由于Delphi商业使用的限制，现已转到Lazarus，全面拥抱开源。
坑 播放声音 预览时播放声音，回放时播放声音，甚至使用播放库播放已下载的视频时播放声音，这些对于前端摄像头自带麦克的场景肯定是刚需（另接麦克的情况暂未测试），然而按照官方SDK文档和示例代码写出的程序死活就是没有声音，这样的情况似乎不少人都遇到过，但是，好像并没有见谁把解决方法公开过。
其实，这个问题特别简单，只需要把HCNetSDKCom目录下的OpenAL32.dll拷贝到PlayCtrl.dll所在的目录下就可以了。这下就明白了吧，没有声音的原因其实就是使用NET_DVR_OpenSound调了PlayCtrl.dll，而PlayCtrl.dll又调了OpenAL32.dll来播放声音，但是由于PlayCtrl.dll没有找到OpenAL32.dll所以没有声音，而且这个有问题的返回值也并没有一层层的返回给NET_DVR_OpenSound函数，结果就是函数返回调用成功了，但就是死活没声音。
PlayCtrl.dll不是PlayCtrl.dll 使用海康SDK进行二次开发的，一般也会使用到海康的播放库，但是有一个问题是需要注意的，那就是SDK里的PlayCtrl.dll并不是播放库里的PlayCtrl.dll。虽然它们长得一样，名字也一样，但它们的本质却是完全不一样的，是不能互相替代的！有兴趣的朋友可以使用eXeScope详细查看。</description>
    </item>
    <item>
      <title>Delphi自定义图形控件的自定义字体属性在设计期报错的解决办法</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_custom_graphic_control/</link>
      <pubDate>Tue, 02 Oct 2018 02:40:14 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_custom_graphic_control/</guid>
      <description>从其它平台迁移而来
背景 自定义一个图形控件（继承自TGraphicControl类），需要在不同区域显示不同字体的内容，此时会需要在设计器中加入多个字体，方法是在控件的published区增加对应的字体属性即可（使用Ctrl+Shift+C可快速生成），如：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 TMyGraphicControl = class(GraphicControl) private FText1Font: TFont; FText2Font: TFont; procedure SetText1Font(const Value: TFont); procedure SetText2Font(const Value: TFont); protected procedure Paint; override; public { public declarations } published property Text1Font:TFont read FText1Font write SetText1Font; property Text2Font:TFont read FText2Font write SetText2Font; end; 这样就可以在设计器里像使用原生控件一样使用自己的控件了。
问题 但是，如果在设计期选择了弹出字体对话框进行设置字体，IDE就会报错（大意是读或写某个地址异常），而在运行期则正常！
原因 对比查看Delphi自带的控件源码，终于找到了原因。
1 2 3 4 5 6 7 8 9 10 //Delphi TControl类设置字体属性的方法 procedure TControl.</description>
    </item>
    <item>
      <title>Delphi版本号对照表</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_version/</link>
      <pubDate>Sun, 12 Aug 2018 15:52:38 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_version/</guid>
      <description>从其它平台迁移而来
Conditional VER Product Product Version Package Version VER330 Delphi / C++Builder XE10.3 Rio 26 260 VER320 Delphi / C++Builder XE10.2 Tokyo 25 250 VER310 Delphi / C++Builder XE10.1 Berlin 24 240 VER300 Delphi / C++Builder XE10 Seattle 23 230 VER290 Delphi / C++Builder XE8 22 220 VER280 Delphi / C++Builder XE7 21 210 VER270 Delphi / C++Builder XE6 20 200 VER260 Delphi / C++Builder XE5 19 190 VER250 Delphi / C++Builder XE4 18 180 VER240 Delphi / C++Builder XE3 17 170 VER230 Delphi / C++Builder XE2 16 160 VER220 Delphi / C++Builder XE 15 150 VER210 Delphi / C++Builder 2010 14 140 VER200 Delphi / C++Builder 2009 12 120 VER190 Delphi 2007 for .</description>
    </item>
    <item>
      <title>多线程、多进程、多核</title>
      <link>https://afrusrsc.github.io/posts/program/misc/processes_threads_kernels/</link>
      <pubDate>Fri, 13 Apr 2018 22:53:06 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/processes_threads_kernels/</guid>
      <description>从其它平台迁移而来
前言 线程、进程的概念实际上已经纠结N久了，不过好在多少有些了解了，但总感觉还不是那么通透。
碰巧晚饭时与室友争论了一个问题，与线程的问题很类同，为了能通俗易懂的给室友讲明白，着实消耗了不少脑细胞。所幸最终他表示明白了（至于是真是假便不清楚了，不过至少我自己感觉通透了许多）。
鉴于抱着一颗开源共享的心，便稍加整理，拿来浪一下啦！
CPU 其实，CPU是个很笨的家伙，笨到只会做最简单的事，而且一次还只能做一件最简单的事，而它能做的所有的事掰着指头数来数去也就那么几件。多了、复杂了，抱歉，不会！
CPU仅会做的那几件事呢，就叫做CPU指令。
虽然CPU这家伙很笨，但还是有优点的，而且这优点还很让人喜欢。什么优点呢？快！准！
时间片 虽然CPU只会那么几个指令，但是已经够了，因为那些复杂的事都可以用这些指令进行排列组合来完成。所以啊，CPU一点儿也不怕麻烦。
由于CPU干活又快又准，所以很多事都可以让他来做。但是CPU这小子实在是太傻愣傻愣了，为了防止这傻小子闷着头只顾做手头上的事，把其它事都抛到了脑后，就有个头脑还算灵光的家伙跑来指挥CPU，这个家伙就是操作系统（更准确的说是分时操作系统），也叫OS。
OS规定CPU做一件事只能用一小段时间（这一小段时间就叫时间片），而且时间到了必须放下手头的事，去做下一件事，不管手头上的事有没有做完。事实上OS把每一件事的进度都记录了下来，下次轮到这件事时就让CPU接着原来的进度继续干下去。
由于CPU干活实在是太快太快了，所以感觉就像同时在做所有安排给他的事。
进程&amp;amp;线程 不管是进程还是线程，其实都是任务。任务也分大小的，一个大任务可以包含若干小任务，而且一个大任务至少要有一个小任务。一个大任务就是一个进程，一个小任务就是一个线程。
把这些任务交给OS，OS就根据情况做规划，给每个任务分配合理的时间片，然后安排CPU来完成。
单线程&amp;amp;多线程 一个大任务只有一个小任务，那这个大任务就叫做单线程，否则就叫多线程。
举个栗子：
小明在唱歌，而且在唱歌是其它的事都不做。这就是单线程。
小明一边唱歌，一边跳舞。这就是多线程。
小明一边唱歌，一边吃饭。这也是多线程，只不过这两个小任务都用到了嘴巴，所以执行起来就会麻烦很多，解决麻烦的办法就是线程同步。
多进程 直接举栗子：
小明自己放风筝。这就是单进程。
小明和小红都在放自己的风筝。这是一种多进程，只不过两个进程是独立的。
小明和小红一起放大蜈蚣风筝。这是另一种多进程，进程之间需要配合，也存在类似多线程的麻烦。这方面的问题没有详细了解过，就不多扯了。
多线程&amp;amp;多进程 再次举栗子：
小明一边唱歌，一边跳舞。这是多线程，用的都是小明的身体（资源）。
小明唱歌，小红跳舞。这是多进程，各自用各自的身体（资源）。
小明和小红合唱。这也是多进程，各自用各自的身体（资源）。
多核 单核、多核是针对CPU来说的。
继续举栗子说明：
普通人。单核。
哪吒。多核。
如有不对之处，还望大侠指正！</description>
    </item>
    <item>
      <title>简单确定文件格式</title>
      <link>https://afrusrsc.github.io/posts/program/misc/file_type/</link>
      <pubDate>Sat, 31 Mar 2018 16:33:46 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/file_type/</guid>
      <description>从其它平台迁移而来
有时候，我们会下载到或者从邮箱接收到一些莫名其妙的文件——只有名字，没有后缀名（文件扩展名），排除不安全因素后，确定这就是我们想要的文件，但是不知道文件格式或者不知道用什么软件来打开查看，对于大多数人来说这可是个比较头疼的问题。
但是，如果掌握一些基础知识的话，这样的问题其实是很好解决的！
知识点一： 文件后缀名（扩展名）和文件格式没有半毛钱关系！
文件格式实际上是由文件开头的若干字节来描述的，这些文件描述称为文件头（注意，不是c/c++里的.h头文件）。
那么，后缀名是用来做什么的呢？后缀名仅仅是为了方便从文件名中知道文件是什么格式，一方面给用户（你，我，他）看，另一方面给操作系统看，由操作系统判断使用哪个阅读器、浏览器、工具等软件打开，而这些软件对文件的解析就是根据文件头的描述来进行的。
知识点二： 本质上所有的文件都是二进制文件！
文本、源码（其实也是文本）、word、excel、ppt、pdf、dll、exe、图片、压缩包……都是二进制文件，因为现代计算机系统只认识0和1。不信的话可以用十六进制工具打开来查看。
好了，有了这两个基础知识，我们就可以进行继续了。上面提到了十六进制工具，这里我们要使用的神器也正是它！
这是一张png图片，用十六进制打开后是这样的，可以明显看到有PNG字样。
这是一个pdf文件，也可以明显看到PDF字样。
就不再贴图了，套路就是这么个套路，下面就直接上整理好的常用的对应表了！
文件格式 文件头 bmp图片 42 4D (BM) png图片 89 50 4E 47 (‰PNG) jpg图片 FF D8 pdf文档 25 50 44 46 (%PDF) zip压缩包 50 4B (PK) rar压缩包 52 61 72 (Rar) 7z压缩包 37 7A (7z) docx、xlsx、pptx 50 4B (PK) dll或exe 4D 5A (MZ) 可看到，Microsoft Office 2007 及以上版本的 docx、xlsx、pptx 与 zip压缩包的文件头是一样的，是不是搞错了？没错，Microsoft Office 2007 及以上版本的 docx、xlsx、pptx 实际上就是一个 zip压缩包，不信的小伙伴儿们可以把后缀名改为zip用解压工具打开看看真面目。</description>
    </item>
    <item>
      <title>使用FireDAC的TFDQuery查询Firebird遇到的坑</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/firedac_fdquery_firebird/</link>
      <pubDate>Wed, 03 Jan 2018 01:43:02 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/firedac_fdquery_firebird/</guid>
      <description>从其它平台迁移而来
这几天被Prepare这个东西搞死了，虽然用它解决了目前的问题，但是完全不知道为什么，如有大侠知道还望指教，不胜感激！
首先，说下开发环境：
win10 x64(1709 [10.0.16299.125])+Delphi XE7 up1(自带FireDAC)+Firebird 3.0.2.32703_0(数据库字符集使用UTF8)
问题一：中文模糊查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 var CompanyType: Integer FDQuery1.Close; FDQuery1.SQL.Text := &amp;#39;SELECT * FROM companyinfo &amp;#39; + &amp;#39;WHERE (tag = 0) AND (companytype = :companytype) AND &amp;#39; + &amp;#39;((companyname LIKE :Text) OR (pym LIKE :Text))&amp;#39; + &amp;#39; ORDER BY TIMES DESC&amp;#39;; //FDQuery1.Prepare; //写在这里会报错，提示如下，大致意思是： //数据库 companytype 字段是SmallInt类型，却赋了一个Integer类型的值 {--------------------------- [FireDAC][Phys][FB]-338.</description>
    </item>
    <item>
      <title>GBK编码</title>
      <link>https://afrusrsc.github.io/posts/program/misc/gbk/</link>
      <pubDate>Thu, 30 Nov 2017 10:46:25 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/misc/gbk/</guid>
      <description>从其它平台迁移而来
在软件开发过程中，尤其是涉及到数据库的项目，通常都会遇到字符编码的问题。
其中，中文字符集编码常用的有GB2312和GBK，以及万国码UTF8，另外还有GB18030。
ASCII码每个字符占一个字节；GB2312是GBK的子集，两个字符集都是每个字符占两个字节；GB18030是GBK的取代版本，每个字符占一个、两个或四个字节；UFT8是万国码，每个字符占一个、两个或三个字节。
下图是GBK字符编码表。
图是265*256的矩阵，表示两个字节可以表示的所有字符。水平方向表示高字节，从左至右为0000~FF00；垂直方向表示低字节，从上到下为0000~00FF。
左侧0区：0000~007F，ASCII码区。
右下色块区：8140~FEFE（需剔除a区即817F~FE7F），GBK编码区。
具体说明 GBK编码分三部分。
一、汉字区 2区：B0A1~F7FE，GBK/2，GB2312汉字区，GB2312汉字6763个。
GB13000.1扩充汉字区
3区：8140~A0FE，GBK/3，GB13000.1中的CJK汉字6080个。
4区：AA40~FEA0，GBK/4，CJK汉字和增补的汉字8160个。
二、图形符号区 1区：A1A1~A9FE，GBK/1，GB2312非汉字符号区。除GB2312的符号外，还有10个小写罗马数字和GB12345增补的符号。计符号717个。
5区：A840~A9A0，GBK/5，GB13000.1扩充非汉字区。包含BIG-5非汉字符号、结构符和汉字〇。计符号166个。
三、用户自定义区 A区：AAA1~AFFE，码位564个。
B区：F8A1~FEFE，码位658个。
C区：A140~A7A0，码位672个。</description>
    </item>
    <item>
      <title>cxGrid基本用法小记</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/devexpress_cxgrid/</link>
      <pubDate>Sat, 25 Nov 2017 20:41:33 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/devexpress_cxgrid/</guid>
      <description>从其它平台迁移而来
汉化 在DevExpress选项卡找到TcxLocalizer控件放到窗体上，为了通用，我是放到DataModule窗体上。 准备好汉化的资源文件或配置文件（我使用的是后者），在DataModule的Create事件里写上如下代码 1 2 3 4 5 6 7 with cxLocalizer1 do begin StorageType := lstIni; LoadFromFile(IniPath + &amp;#39;DevChs.ini&amp;#39;); locale := 2052; Active := True; end; 在有cxGrid或其实Dev控件的单元引用DataModule单元。 更改视觉样式 在DevExpress选项卡找到TcxLookAndFeelController控件放到DataModule窗体上。
在有cxGrid或其它Dev控件的单元引用DataModule单元。
在要更改视觉样式的代码段里设置TcxLookAndFeelController控件的Kind属性和NativeStyle属性。
让cxGrid的数据以斑马线的方式显示，即奇偶行分别使用不同样式 在DevExpress选项卡找到TcxStyleRepository控件放到DataModule窗体上。
双击cxStyleRepository控件，打开如下窗口，点Add添加两个样式，并命名。
分别在属性中设置不同的样式，颜色、字体、字号、字体颜色等。 在有cxGrid的单元中引用DataModule单元。
选中cxGrid的cxGridDBTableView，展开Styles，分别关联ContentEven和ContentOdd。
另外也可设置Header、Selection和Inactive。Header改变的是表头的样式，Selection改变的是当前选择行的样式，Inactive改变的是cxGrid失去焦点时当前选择行的样式。
不显示分组框 设置cxGridDBTableView的OptionsView下的GroupByBox属性为False。
显示合计等脚注 设置cxGridDBTableView的OptionsView下的Footer属性为True。
点cxGrid的Customize...按钮，弹出对话框，选择Summary标签页，在Footer子标签页中点Add增加合计项目。
选择增加的项目，在属性中设置关联的列、字段名等属性。 设置行号 增加一列，不关联数据库字段，设置好属性。
在该列的OnGetDataText事件中写如下代码：
1 AText := IntToStr(ARecordIndex + 1); 编辑完成前光标不能离开当前行 在cxGridDBTableView的OnCanFocusRecord事件中写入类似以下的代码： 1 AAllow := DbState in [dsBrowse]; 只读 设置cxGridDBTableView.OptionsData.Editing属性为False。
选择整行 设置cxGridDBTableView.OptionsSelection.CellSelect属性为False。</description>
    </item>
    <item>
      <title>FireDAC之TFDStoredProc</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/firedac_fdstoredproc/</link>
      <pubDate>Fri, 24 Nov 2017 10:11:13 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/firedac_fdstoredproc/</guid>
      <description>从其它平台迁移而来
1.在FireDAC选项卡中找到TFDStoredProc控件，放到窗体上，并把Connection属性设置为准备好的数据库连接控件上。
2.在需要执行存储过程的位置写入类似以下的代码：
1 2 3 4 5 6 7 8 9 FDStoredProc1.StoredProcName := &amp;#39;SP_StoredProcName&amp;#39;; FDStoredProc1.Prepare; //必须，否则会报找不到参数的错误 FDStoredProc1.ParamByName(&amp;#39;I_ID&amp;#39;).AsInteger := id; //无返回值或返回值由输出参数传递时 FDStoredProc1.ExecProc; UserName := FDStoredProc1.ParamByName(&amp;#39;O_USERNAME&amp;#39;).AsString; //有返回值或数据集时 FDStoredProc1.Open(); UserName := FDStoredProc1.FindField(&amp;#39;O_USERNAME&amp;#39;).AsString; 3.以上为存储过程返回单个值或单条记录时的用法，存储过程返回多条记录（即数据表）的用法暂未研究。</description>
    </item>
    <item>
      <title>FirdDAC之TFDQuery使用</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/firedac_fdquery/</link>
      <pubDate>Thu, 23 Nov 2017 22:31:27 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/firedac_fdquery/</guid>
      <description> 从其它平台迁移而来
1.在FireDAC选项卡中找到TFDQuery控件，放到窗体上，并把Connection属性设置为准备好的数据库连接控件上。
2.在需要查询或执行SQL语句的位置写入类似以下的代码：
1 2 3 4 5 6 7 8 //查询，有返回集 FDQuery1.SQL.Text := &amp;#39;SELECT * FROM DBTable WHERE id = :id&amp;#39;; FDQuery1.ParamByName(&amp;#39;id&amp;#39;).AsInteger := 1; FDQuery1.Open(); //执行SQL语句，无返回集 FDQuery1.SQL.Text := &amp;#39;DELETE FROM DBTable WHERE id = :id&amp;#39;; FDQuery1.ParamByName(&amp;#39;id&amp;#39;).AsInteger := 1; FDQuery1.ExecSQL; 3.若查询结果需要连接到数据集，则在DataAccess选项卡中找到TDataSource控件，放到窗体上，并把DataSet属性连接到TFDQuery控件。然后把数据感知控件（如cxGrid等）的DataSource属性连接到TDataSource控件。
4.若只需要取出查询结果并进行后续处理，可使用如下代码取出结果：
1 2 3 id := FDQuery1.FindField(&amp;#39;id&amp;#39;).AsInteger; DeptName := FDQuery1.FindField(&amp;#39;deptname&amp;#39;).AsString; Money := FDQuery1.FindField(&amp;#39;money&amp;#39;).AsFloat; </description>
    </item>
    <item>
      <title>FireDAC连接数据库</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/firedac_fdconnection/</link>
      <pubDate>Wed, 22 Nov 2017 11:25:47 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/firedac_fdconnection/</guid>
      <description>从其它平台迁移而来
建立DataModule
在FireDAC选项卡中找到我们的主角TFDConnection控件，并放到DataModule窗体上，把LoginPrompt设为False，这样在连接时就不会弹出登陆对话框了。然后再找到TFDManager控件，也放到DataModule窗体上，并且把Active属性设为True，这样一来，在引用了本单元的其它单元中，就可以直接把FireDAC控件的Connection连接到本单元的TFDConnection了。
在FireDAC Links选项卡中找到所需要连接的数据的驱动链接控件，放到DataModule窗体上。本例中使用的是FireBird数据库，因此就选择了TFDPhysFBDriverLink，其它数据库参照执行（本人接触的数据库不多，各数据库间的差异不敢妄言，但整体使用思路和方法应是不差的）。 在FireDAC UI选项卡中找到TFDGUIxWaitCursor控件，放到DataModule窗体上。该控件其实只是个光标，可修改ScreenCursor属性来改变光标。 至此，拖控件的工作基本上就做完了，下面该写代码了（虽然代码中有相当一部分工作可以直接在设计器中修改属性来达到，但建议用代码来实现，一方面便于DEBUG，另一方面也易于进行数据库的变更、迁移等）。
在DataModule的Create事件中写入类似以下的代码（也可写在其它地主，但要保证必须在任何数据库操作代码前运行）： 1 2 3 4 5 6 7 8 9 10 11 12 FDPhysFBDriverLink1.VendorLib := DllPath + &amp;#39;fbclient.dll&amp;#39;; FDConnection1.Params.DriverID := &amp;#39;FB&amp;#39;; FDConnection1.Params.Database := HostName + &amp;#39;/&amp;#39; + DBPort + &amp;#39;:&amp;#39; + DBFilePathAndName; FDConnection1.Params.UserName := UserName; FDConnection1.Params.Password := Password; FDConnection1.Params.Add(&amp;#39;CharacterSet=utf8&amp;#39;); try FDConnection1.Open(); except on E:Exception do ShowMessage(E.Message); end; 注意：FDConnection1.Params.Add(&#39;CharacterSet=utf8&#39;);这句是设置客户端连接数据库是默认使用的字符集，一定要与所连接的数据库使用的默认字符集一致，否则将会发生很多奇怪的事情。而且该项无法在设计器的属性中进行设置！</description>
    </item>
    <item>
      <title>深入Delphi的字符串类型</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_string01/</link>
      <pubDate>Tue, 15 Aug 2017 23:17:53 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_string01/</guid>
      <description>从其它平台迁移而来
探索 之前提到了Delphi的字符串，但并未展开说，这里就详细探讨下Delphi的字符串类型。
废话不多说，直接上源码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 program StringTest; {$APPTYPE CONSOLE} uses SysUtils; var s1, s2, s3: string; begin Writeln(&amp;#39;Now time : &amp;#39;,FormatDateTime(&amp;#39;HH:MM:SS.</description>
    </item>
    <item>
      <title>Delphi中的数据类型</title>
      <link>https://afrusrsc.github.io/posts/program/pascal/delphi_type/</link>
      <pubDate>Sun, 13 Aug 2017 14:34:21 +0800</pubDate>
      <guid>https://afrusrsc.github.io/posts/program/pascal/delphi_type/</guid>
      <description>从其它平台迁移而来
之前一直使用的是Delphi 7，现在准备转向Delphi XE7，据说数据类型上有一些微小的调整，便想亲自验证一下，也顺便加深一下自己对Delphi数据类型的认识，毕竟之前仅仅是在用而从未考虑过类型在内存中的形态。
验证方法很简单，就是在控制台用Sizeof()把相应数据类型的字节数显示出来。源码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 program TypeSize; {$APPTYPE CONSOLE} uses SysUtils; type Emnu = (one, two, three, four); Range1 = $0.</description>
    </item>
    <item>
      <title>👨🏻‍💻关于</title>
      <link>https://afrusrsc.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://afrusrsc.github.io/about/</guid>
      <description>个人资料 半路出家的程序员，凭兴趣完全自学，比较注重基础，虽是纯野生，但许多方面不逊于科班出身的正规军。
十多年间，先后接触/学习了VB、Excel VBA、c/c++、c#、Delphi、Lazarus、python、go等编程语言，其中最熟悉的是pascal（即Delphi和Lazarus），其次是go；从事过桌面、服务器、嵌入式（单片机、PLC）的开发，最擅长的还数上位机开发；其它如安防、传感器、机械、机电、有限元、密码学、区块链等领域，也略有涉入。
捐赠打赏 如果内容对您有帮助，欢迎捐赠打赏以表示支持！</description>
    </item>
  </channel>
</rss>
